{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"AverageWindow\", {\n    enumerable: true,\n    get: function () {\n      return AverageWindow;\n    }\n  });\n  Object.defineProperty(exports, \"MultiTypeAverageWindow\", {\n    enumerable: true,\n    get: function () {\n      return MultiTypeAverageWindow;\n    }\n  });\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  /**\n   * Helper class to calculate running average of the most recent n values\n   */\n  var AverageWindow = /*#__PURE__*/function () {\n    function AverageWindow(size, startValue) {\n      (0, _classCallCheck.default)(this, AverageWindow);\n      this.nextIndex = 0;\n      this.inputValues = new Array(Math.max(1, size));\n      this.currentAverage = startValue !== null && startValue !== void 0 ? startValue : 0;\n      this.currentCount = startValue === undefined ? 0 : 1;\n      this.nextIndex = this.currentCount;\n      this.inputValues[0] = startValue;\n    }\n    /**\n     * Can be used to get the current average value\n     */\n    return (0, _createClass.default)(AverageWindow, [{\n      key: \"currentValue\",\n      get: function () {\n        return this.currentAverage;\n      }\n      /**\n       *\n       * @param value Add new value to the average window and updated current average\n       */\n    }, {\n      key: \"addValue\",\n      value: function addValue(value) {\n        var target = this.getNextIndex();\n        var oldValue = this.inputValues[target];\n        var newCount = oldValue === undefined ? this.currentCount + 1 : this.currentCount;\n        this.inputValues[target] = value;\n        this.currentAverage = this.currentAverage * (this.currentCount / newCount) + (value - (oldValue !== null && oldValue !== void 0 ? oldValue : 0)) / newCount;\n        this.currentCount = newCount;\n      }\n    }, {\n      key: \"getNextIndex\",\n      value: function getNextIndex() {\n        // starts from 0 once we reach end of the array\n        var newTarget = this.nextIndex;\n        this.nextIndex = (this.nextIndex + 1) % this.inputValues.length;\n        return newTarget;\n      }\n    }]);\n  }();\n  var MultiTypeAverageWindow = /*#__PURE__*/function () {\n    /**\n     * @param windowSize Size of the average window\n     * @param defaultValue Default value to return if no value is available\n     */\n    function MultiTypeAverageWindow(windowSize, defaultValue) {\n      (0, _classCallCheck.default)(this, MultiTypeAverageWindow);\n      this.averageWindows = new Map();\n      this.windowSize = windowSize;\n      this.defaultValue = defaultValue;\n    }\n    return (0, _createClass.default)(MultiTypeAverageWindow, [{\n      key: \"addValue\",\n      value: function addValue(value, type) {\n        var averageWindow = this.averageWindows.get(type);\n        if (!averageWindow) {\n          averageWindow = new AverageWindow(this.windowSize);\n          this.averageWindows.set(type, averageWindow);\n        }\n        averageWindow.addValue(value);\n      }\n    }, {\n      key: \"getCurrentValue\",\n      value: function getCurrentValue(type) {\n        var _a, _b;\n        var averageWindow = this.averageWindows.get(type);\n        return (_b = (_a = averageWindow === null || averageWindow === void 0 ? void 0 : averageWindow.currentValue) !== null && _a !== void 0 ? _a : this.defaultValue) !== null && _b !== void 0 ? _b : 0;\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this.averageWindows.clear();\n      }\n    }]);\n  }();\n});","lineCount":108,"map":[[12,2,4,0,"Object"],[12,8,4,0],[12,9,4,0,"defineProperty"],[12,23,4,0],[12,24,4,0,"exports"],[12,31,4,0],[13,4,4,0,"enumerable"],[13,14,4,0],[14,4,4,0,"get"],[14,7,4,0],[14,18,4,0,"get"],[14,19,4,0],[15,6,4,0],[15,13,4,0,"AverageWindow"],[15,26,4,0],[16,4,4,0],[17,2,4,0],[18,2,40,0,"Object"],[18,8,40,0],[18,9,40,0,"defineProperty"],[18,23,40,0],[18,24,40,0,"exports"],[18,31,40,0],[19,4,40,0,"enumerable"],[19,14,40,0],[20,4,40,0,"get"],[20,7,40,0],[20,18,40,0,"get"],[20,19,40,0],[21,6,40,0],[21,13,40,0,"MultiTypeAverageWindow"],[21,35,40,0],[22,4,40,0],[23,2,40,0],[24,2,66,1],[24,6,66,1,"_babelRuntimeHelpersClassCallCheck"],[24,40,66,1],[24,43,66,1,"require"],[24,50,66,1],[24,51,66,1,"_dependencyMap"],[24,65,66,1],[25,2,66,1],[25,6,66,1,"_classCallCheck"],[25,21,66,1],[25,24,66,1,"_interopDefault"],[25,39,66,1],[25,40,66,1,"_babelRuntimeHelpersClassCallCheck"],[25,74,66,1],[26,2,66,1],[26,6,66,1,"_babelRuntimeHelpersCreateClass"],[26,37,66,1],[26,40,66,1,"require"],[26,47,66,1],[26,48,66,1,"_dependencyMap"],[26,62,66,1],[27,2,66,1],[27,6,66,1,"_createClass"],[27,18,66,1],[27,21,66,1,"_interopDefault"],[27,36,66,1],[27,37,66,1,"_babelRuntimeHelpersCreateClass"],[27,68,66,1],[28,2,1,0],[29,0,2,0],[30,0,3,0],[31,2,1,0],[31,6,4,13,"AverageWindow"],[31,19,4,26],[32,4,5,4],[32,13,5,4,"AverageWindow"],[32,27,5,16,"size"],[32,31,5,20],[32,33,5,22,"startValue"],[32,43,5,32],[32,45,5,34],[33,6,5,34],[33,10,5,34,"_classCallCheck"],[33,25,5,34],[33,26,5,34,"default"],[33,33,5,34],[33,41,5,34,"AverageWindow"],[33,54,5,34],[34,6,6,8],[34,10,6,12],[34,11,6,13,"nextIndex"],[34,20,6,22],[34,23,6,25],[34,24,6,26],[35,6,7,8],[35,10,7,12],[35,11,7,13,"inputValues"],[35,22,7,24],[35,25,7,27],[35,29,7,31,"Array"],[35,34,7,36],[35,35,7,37,"Math"],[35,39,7,41],[35,40,7,42,"max"],[35,43,7,45],[35,44,7,46],[35,45,7,47],[35,47,7,49,"size"],[35,51,7,53],[35,52,7,54],[35,53,7,55],[36,6,8,8],[36,10,8,12],[36,11,8,13,"currentAverage"],[36,25,8,27],[36,28,8,30,"startValue"],[36,38,8,40],[36,43,8,45],[36,47,8,49],[36,51,8,53,"startValue"],[36,61,8,63],[36,66,8,68],[36,71,8,73],[36,72,8,74],[36,75,8,77,"startValue"],[36,85,8,87],[36,88,8,90],[36,89,8,91],[37,6,9,8],[37,10,9,12],[37,11,9,13,"currentCount"],[37,23,9,25],[37,26,9,28,"startValue"],[37,36,9,38],[37,41,9,43,"undefined"],[37,50,9,52],[37,53,9,55],[37,54,9,56],[37,57,9,59],[37,58,9,60],[38,6,10,8],[38,10,10,12],[38,11,10,13,"nextIndex"],[38,20,10,22],[38,23,10,25],[38,27,10,29],[38,28,10,30,"currentCount"],[38,40,10,42],[39,6,11,8],[39,10,11,12],[39,11,11,13,"inputValues"],[39,22,11,24],[39,23,11,25],[39,24,11,26],[39,25,11,27],[39,28,11,30,"startValue"],[39,38,11,40],[40,4,12,4],[41,4,13,4],[42,0,14,0],[43,0,15,0],[44,4,13,4],[44,15,13,4,"_createClass"],[44,27,13,4],[44,28,13,4,"default"],[44,35,13,4],[44,37,13,4,"AverageWindow"],[44,50,13,4],[45,6,13,4,"key"],[45,9,13,4],[46,6,13,4,"get"],[46,9,13,4],[46,11,16,4],[46,20,16,4,"get"],[46,21,16,4],[46,23,16,23],[47,8,17,8],[47,15,17,15],[47,19,17,19],[47,20,17,20,"currentAverage"],[47,34,17,34],[48,6,18,4],[49,6,19,4],[50,0,20,0],[51,0,21,0],[52,0,22,0],[53,4,19,4],[54,6,19,4,"key"],[54,9,19,4],[55,6,19,4,"value"],[55,11,19,4],[55,13,23,4],[55,22,23,4,"addValue"],[55,30,23,12,"addValue"],[55,31,23,13,"value"],[55,36,23,18],[55,38,23,20],[56,8,24,8],[56,12,24,14,"target"],[56,18,24,20],[56,21,24,23],[56,25,24,27],[56,26,24,28,"getNextIndex"],[56,38,24,40],[56,39,24,41],[56,40,24,42],[57,8,25,8],[57,12,25,14,"oldValue"],[57,20,25,22],[57,23,25,25],[57,27,25,29],[57,28,25,30,"inputValues"],[57,39,25,41],[57,40,25,42,"target"],[57,46,25,48],[57,47,25,49],[58,8,26,8],[58,12,26,14,"newCount"],[58,20,26,22],[58,23,26,25,"oldValue"],[58,31,26,33],[58,36,26,38,"undefined"],[58,45,26,47],[58,48,26,50],[58,52,26,54],[58,53,26,55,"currentCount"],[58,65,26,67],[58,68,26,70],[58,69,26,71],[58,72,26,74],[58,76,26,78],[58,77,26,79,"currentCount"],[58,89,26,91],[59,8,27,8],[59,12,27,12],[59,13,27,13,"inputValues"],[59,24,27,24],[59,25,27,25,"target"],[59,31,27,31],[59,32,27,32],[59,35,27,35,"value"],[59,40,27,40],[60,8,28,8],[60,12,28,12],[60,13,28,13,"currentAverage"],[60,27,28,27],[60,30,29,12],[60,34,29,16],[60,35,29,17,"currentAverage"],[60,49,29,31],[60,53,29,35],[60,57,29,39],[60,58,29,40,"currentCount"],[60,70,29,52],[60,73,29,55,"newCount"],[60,81,29,63],[60,82,29,64],[60,85,30,16],[60,86,30,17,"value"],[60,91,30,22],[60,95,30,26,"oldValue"],[60,103,30,34],[60,108,30,39],[60,112,30,43],[60,116,30,47,"oldValue"],[60,124,30,55],[60,129,30,60],[60,134,30,65],[60,135,30,66],[60,138,30,69,"oldValue"],[60,146,30,77],[60,149,30,80],[60,150,30,81],[60,151,30,82],[60,155,30,86,"newCount"],[60,163,30,94],[61,8,31,8],[61,12,31,12],[61,13,31,13,"currentCount"],[61,25,31,25],[61,28,31,28,"newCount"],[61,36,31,36],[62,6,32,4],[63,4,32,5],[64,6,32,5,"key"],[64,9,32,5],[65,6,32,5,"value"],[65,11,32,5],[65,13,33,4],[65,22,33,4,"getNextIndex"],[65,34,33,16,"getNextIndex"],[65,35,33,16],[65,37,33,19],[66,8,34,8],[67,8,35,8],[67,12,35,14,"newTarget"],[67,21,35,23],[67,24,35,26],[67,28,35,30],[67,29,35,31,"nextIndex"],[67,38,35,40],[68,8,36,8],[68,12,36,12],[68,13,36,13,"nextIndex"],[68,22,36,22],[68,25,36,25],[68,26,36,26],[68,30,36,30],[68,31,36,31,"nextIndex"],[68,40,36,40],[68,43,36,43],[68,44,36,44],[68,48,36,48],[68,52,36,52],[68,53,36,53,"inputValues"],[68,64,36,64],[68,65,36,65,"length"],[68,71,36,71],[69,8,37,8],[69,15,37,15,"newTarget"],[69,24,37,24],[70,6,38,4],[71,4,38,5],[72,2,38,5],[73,2,38,5],[73,6,40,13,"MultiTypeAverageWindow"],[73,28,40,35],[74,4,41,4],[75,0,42,0],[76,0,43,0],[77,0,44,0],[78,4,45,4],[78,13,45,4,"MultiTypeAverageWindow"],[78,36,45,16,"windowSize"],[78,46,45,26],[78,48,45,28,"defaultValue"],[78,60,45,40],[78,62,45,42],[79,6,45,42],[79,10,45,42,"_classCallCheck"],[79,25,45,42],[79,26,45,42,"default"],[79,33,45,42],[79,41,45,42,"MultiTypeAverageWindow"],[79,63,45,42],[80,6,46,8],[80,10,46,12],[80,11,46,13,"averageWindows"],[80,25,46,27],[80,28,46,30],[80,32,46,34,"Map"],[80,35,46,37],[80,36,46,38],[80,37,46,39],[81,6,47,8],[81,10,47,12],[81,11,47,13,"windowSize"],[81,21,47,23],[81,24,47,26,"windowSize"],[81,34,47,36],[82,6,48,8],[82,10,48,12],[82,11,48,13,"defaultValue"],[82,23,48,25],[82,26,48,28,"defaultValue"],[82,38,48,40],[83,4,49,4],[84,4,49,5],[84,15,49,5,"_createClass"],[84,27,49,5],[84,28,49,5,"default"],[84,35,49,5],[84,37,49,5,"MultiTypeAverageWindow"],[84,59,49,5],[85,6,49,5,"key"],[85,9,49,5],[86,6,49,5,"value"],[86,11,49,5],[86,13,50,4],[86,22,50,4,"addValue"],[86,30,50,12,"addValue"],[86,31,50,13,"value"],[86,36,50,18],[86,38,50,20,"type"],[86,42,50,24],[86,44,50,26],[87,8,51,8],[87,12,51,12,"averageWindow"],[87,25,51,25],[87,28,51,28],[87,32,51,32],[87,33,51,33,"averageWindows"],[87,47,51,47],[87,48,51,48,"get"],[87,51,51,51],[87,52,51,52,"type"],[87,56,51,56],[87,57,51,57],[88,8,52,8],[88,12,52,12],[88,13,52,13,"averageWindow"],[88,26,52,26],[88,28,52,28],[89,10,53,12,"averageWindow"],[89,23,53,25],[89,26,53,28],[89,30,53,32,"AverageWindow"],[89,43,53,45],[89,44,53,46],[89,48,53,50],[89,49,53,51,"windowSize"],[89,59,53,61],[89,60,53,62],[90,10,54,12],[90,14,54,16],[90,15,54,17,"averageWindows"],[90,29,54,31],[90,30,54,32,"set"],[90,33,54,35],[90,34,54,36,"type"],[90,38,54,40],[90,40,54,42,"averageWindow"],[90,53,54,55],[90,54,54,56],[91,8,55,8],[92,8,56,8,"averageWindow"],[92,21,56,21],[92,22,56,22,"addValue"],[92,30,56,30],[92,31,56,31,"value"],[92,36,56,36],[92,37,56,37],[93,6,57,4],[94,4,57,5],[95,6,57,5,"key"],[95,9,57,5],[96,6,57,5,"value"],[96,11,57,5],[96,13,58,4],[96,22,58,4,"getCurrentValue"],[96,37,58,19,"getCurrentValue"],[96,38,58,20,"type"],[96,42,58,24],[96,44,58,26],[97,8,59,8],[97,12,59,12,"_a"],[97,14,59,14],[97,16,59,16,"_b"],[97,18,59,18],[98,8,60,8],[98,12,60,14,"averageWindow"],[98,25,60,27],[98,28,60,30],[98,32,60,34],[98,33,60,35,"averageWindows"],[98,47,60,49],[98,48,60,50,"get"],[98,51,60,53],[98,52,60,54,"type"],[98,56,60,58],[98,57,60,59],[99,8,61,8],[99,15,61,15],[99,16,61,16,"_b"],[99,18,61,18],[99,21,61,21],[99,22,61,22,"_a"],[99,24,61,24],[99,27,61,27,"averageWindow"],[99,40,61,40],[99,45,61,45],[99,49,61,49],[99,53,61,53,"averageWindow"],[99,66,61,66],[99,71,61,71],[99,76,61,76],[99,77,61,77],[99,80,61,80],[99,85,61,85],[99,86,61,86],[99,89,61,89,"averageWindow"],[99,102,61,102],[99,103,61,103,"currentValue"],[99,115,61,115],[99,121,61,121],[99,125,61,125],[99,129,61,129,"_a"],[99,131,61,131],[99,136,61,136],[99,141,61,141],[99,142,61,142],[99,145,61,145,"_a"],[99,147,61,147],[99,150,61,150],[99,154,61,154],[99,155,61,155,"defaultValue"],[99,167,61,167],[99,173,61,173],[99,177,61,177],[99,181,61,181,"_b"],[99,183,61,183],[99,188,61,188],[99,193,61,193],[99,194,61,194],[99,197,61,197,"_b"],[99,199,61,199],[99,202,61,202],[99,203,61,203],[100,6,62,4],[101,4,62,5],[102,6,62,5,"key"],[102,9,62,5],[103,6,62,5,"value"],[103,11,62,5],[103,13,63,4],[103,22,63,4,"reset"],[103,27,63,9,"reset"],[103,28,63,9],[103,30,63,12],[104,8,64,8],[104,12,64,12],[104,13,64,13,"averageWindows"],[104,27,64,27],[104,28,64,28,"clear"],[104,33,64,33],[104,34,64,34],[104,35,64,35],[105,6,65,4],[106,4,65,5],[107,2,65,5],[108,0,65,5],[108,3]],"functionMap":{"names":["<global>","AverageWindow","constructor","get__currentValue","addValue","getNextIndex","MultiTypeAverageWindow","MultiTypeAverageWindow#constructor","MultiTypeAverageWindow#addValue","MultiTypeAverageWindow#getCurrentValue","MultiTypeAverageWindow#reset"],"mappings":"AAA;OCG;ICC;KDO;IEI;KFE;IGK;KHS;IIC;KJK;CDC;OMC;ICK;KDI;IEC;KFO;IGC;KHI;IIC;KJE;CNC"},"hasCjsExports":false},"type":"js/module"}]}