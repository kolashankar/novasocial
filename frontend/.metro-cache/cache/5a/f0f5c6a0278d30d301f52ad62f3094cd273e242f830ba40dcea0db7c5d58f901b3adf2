{"dependencies":[{"name":"expo/virtual/env","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dgHc21cgR+buKc7O3/dChhD5JJk=","exportNames":["*"],"imports":1}},{"name":"expo-constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":39,"index":39}}],"key":"pPv5KzfRT0rL6NCr7G9k0o4d1W8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"notificationsApi\", {\n    enumerable: true,\n    get: function () {\n      return notificationsApi;\n    }\n  });\n  var _expoVirtualEnv = require(_dependencyMap[0], \"expo/virtual/env\");\n  var _expoConstants = require(_dependencyMap[1], \"expo-constants\");\n  var Constants = _interopDefault(_expoConstants);\n  const API_BASE_URL = Constants.default.expoConfig?.extra?.backendUrl || _expoVirtualEnv.env.EXPO_PUBLIC_BACKEND_URL;\n  class NotificationsApi {\n    getHeaders(token) {\n      return {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      };\n    }\n    async getNotifications(token, skip = 0, limit = 50) {\n      const response = await fetch(`${API_BASE_URL}/api/notifications?skip=${skip}&limit=${limit}`, {\n        method: 'GET',\n        headers: this.getHeaders(token)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch notifications');\n      }\n      return response.json();\n    }\n    async markAsRead(notificationId, token) {\n      const response = await fetch(`${API_BASE_URL}/api/notifications/${notificationId}/read`, {\n        method: 'PUT',\n        headers: this.getHeaders(token)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to mark notification as read');\n      }\n    }\n    async markAllAsRead(token) {\n      const response = await fetch(`${API_BASE_URL}/api/notifications/read-all`, {\n        method: 'PUT',\n        headers: this.getHeaders(token)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to mark all notifications as read');\n      }\n    }\n    async getUnreadCount(token) {\n      const notifications = await this.getNotifications(token, 0, 100);\n      return notifications.filter(n => !n.isRead).length;\n    }\n  }\n  const notificationsApi = new NotificationsApi();\n});","lineCount":63,"map":[[12,2,86,0,"Object"],[12,8,86,0],[12,9,86,0,"defineProperty"],[12,23,86,0],[12,24,86,0,"exports"],[12,31,86,0],[13,4,86,0,"enumerable"],[13,14,86,0],[14,4,86,0,"get"],[14,7,86,0],[14,18,86,0,"get"],[14,19,86,0],[15,6,86,0],[15,13,86,0,"notificationsApi"],[15,29,86,0],[16,4,86,0],[17,2,86,0],[18,2,86,55],[18,6,86,55,"_expoVirtualEnv"],[18,21,86,55],[18,24,86,55,"require"],[18,31,86,55],[18,32,86,55,"_dependencyMap"],[18,46,86,55],[19,2,1,0],[19,6,1,0,"_expoConstants"],[19,20,1,0],[19,23,1,0,"require"],[19,30,1,0],[19,31,1,0,"_dependencyMap"],[19,45,1,0],[20,2,1,0],[20,6,1,0,"Constants"],[20,15,1,0],[20,18,1,0,"_interopDefault"],[20,33,1,0],[20,34,1,0,"_expoConstants"],[20,48,1,0],[21,2,3,0],[21,8,3,6,"API_BASE_URL"],[21,20,3,18],[21,23,3,21,"Constants"],[21,32,3,30],[21,33,3,30,"default"],[21,40,3,30],[21,41,3,31,"expoConfig"],[21,51,3,41],[21,53,3,43,"extra"],[21,58,3,48],[21,60,3,50,"backendUrl"],[21,70,3,60],[21,74,3,60,"_expoVirtualEnv"],[21,89,3,60],[21,90,3,60,"env"],[21,93,3,60],[21,94,3,60,"EXPO_PUBLIC_BACKEND_URL"],[21,117,3,99],[22,2,28,0],[22,8,28,6,"NotificationsApi"],[22,24,28,22],[22,25,28,23],[23,4,29,10,"getHeaders"],[23,14,29,20,"getHeaders"],[23,15,29,21,"token"],[23,20,29,34],[23,22,29,36],[24,6,30,4],[24,13,30,11],[25,8,31,6],[25,22,31,20],[25,24,31,22],[25,42,31,40],[26,8,32,6],[26,23,32,21],[26,25,32,23],[26,35,32,33,"token"],[26,40,32,38],[27,6,33,4],[27,7,33,5],[28,4,34,2],[29,4,36,2],[29,10,36,8,"getNotifications"],[29,26,36,24,"getNotifications"],[29,27,36,25,"token"],[29,32,36,38],[29,34,36,40,"skip"],[29,38,36,52],[29,41,36,55],[29,42,36,56],[29,44,36,58,"limit"],[29,49,36,71],[29,52,36,74],[29,54,36,76],[29,56,36,103],[30,6,37,4],[30,12,37,10,"response"],[30,20,37,18],[30,23,37,21],[30,29,37,27,"fetch"],[30,34,37,32],[30,35,38,6],[30,38,38,9,"API_BASE_URL"],[30,50,38,21],[30,77,38,48,"skip"],[30,81,38,52],[30,91,38,62,"limit"],[30,96,38,67],[30,98,38,69],[30,100,39,6],[31,8,40,8,"method"],[31,14,40,14],[31,16,40,16],[31,21,40,21],[32,8,41,8,"headers"],[32,15,41,15],[32,17,41,17],[32,21,41,21],[32,22,41,22,"getHeaders"],[32,32,41,32],[32,33,41,33,"token"],[32,38,41,38],[33,6,42,6],[33,7,43,4],[33,8,43,5],[34,6,45,4],[34,10,45,8],[34,11,45,9,"response"],[34,19,45,17],[34,20,45,18,"ok"],[34,22,45,20],[34,24,45,22],[35,8,46,6],[35,14,46,12],[35,18,46,16,"Error"],[35,23,46,21],[35,24,46,22],[35,55,46,53],[35,56,46,54],[36,6,47,4],[37,6,49,4],[37,13,49,11,"response"],[37,21,49,19],[37,22,49,20,"json"],[37,26,49,24],[37,27,49,25],[37,28,49,26],[38,4,50,2],[39,4,52,2],[39,10,52,8,"markAsRead"],[39,20,52,18,"markAsRead"],[39,21,52,19,"notificationId"],[39,35,52,41],[39,37,52,43,"token"],[39,42,52,56],[39,44,52,73],[40,6,53,4],[40,12,53,10,"response"],[40,20,53,18],[40,23,53,21],[40,29,53,27,"fetch"],[40,34,53,32],[40,35,54,6],[40,38,54,9,"API_BASE_URL"],[40,50,54,21],[40,72,54,43,"notificationId"],[40,86,54,57],[40,93,54,64],[40,95,55,6],[41,8,56,8,"method"],[41,14,56,14],[41,16,56,16],[41,21,56,21],[42,8,57,8,"headers"],[42,15,57,15],[42,17,57,17],[42,21,57,21],[42,22,57,22,"getHeaders"],[42,32,57,32],[42,33,57,33,"token"],[42,38,57,38],[43,6,58,6],[43,7,59,4],[43,8,59,5],[44,6,61,4],[44,10,61,8],[44,11,61,9,"response"],[44,19,61,17],[44,20,61,18,"ok"],[44,22,61,20],[44,24,61,22],[45,8,62,6],[45,14,62,12],[45,18,62,16,"Error"],[45,23,62,21],[45,24,62,22],[45,61,62,59],[45,62,62,60],[46,6,63,4],[47,4,64,2],[48,4,66,2],[48,10,66,8,"markAllAsRead"],[48,23,66,21,"markAllAsRead"],[48,24,66,22,"token"],[48,29,66,35],[48,31,66,52],[49,6,67,4],[49,12,67,10,"response"],[49,20,67,18],[49,23,67,21],[49,29,67,27,"fetch"],[49,34,67,32],[49,35,68,6],[49,38,68,9,"API_BASE_URL"],[49,50,68,21],[49,79,68,50],[49,81,69,6],[50,8,70,8,"method"],[50,14,70,14],[50,16,70,16],[50,21,70,21],[51,8,71,8,"headers"],[51,15,71,15],[51,17,71,17],[51,21,71,21],[51,22,71,22,"getHeaders"],[51,32,71,32],[51,33,71,33,"token"],[51,38,71,38],[52,6,72,6],[52,7,73,4],[52,8,73,5],[53,6,75,4],[53,10,75,8],[53,11,75,9,"response"],[53,19,75,17],[53,20,75,18,"ok"],[53,22,75,20],[53,24,75,22],[54,8,76,6],[54,14,76,12],[54,18,76,16,"Error"],[54,23,76,21],[54,24,76,22],[54,66,76,64],[54,67,76,65],[55,6,77,4],[56,4,78,2],[57,4,80,2],[57,10,80,8,"getUnreadCount"],[57,24,80,22,"getUnreadCount"],[57,25,80,23,"token"],[57,30,80,36],[57,32,80,55],[58,6,81,4],[58,12,81,10,"notifications"],[58,25,81,23],[58,28,81,26],[58,34,81,32],[58,38,81,36],[58,39,81,37,"getNotifications"],[58,55,81,53],[58,56,81,54,"token"],[58,61,81,59],[58,63,81,61],[58,64,81,62],[58,66,81,64],[58,69,81,67],[58,70,81,68],[59,6,82,4],[59,13,82,11,"notifications"],[59,26,82,24],[59,27,82,25,"filter"],[59,33,82,31],[59,34,82,32,"n"],[59,35,82,33],[59,39,82,37],[59,40,82,38,"n"],[59,41,82,39],[59,42,82,40,"isRead"],[59,48,82,46],[59,49,82,47],[59,50,82,48,"length"],[59,56,82,54],[60,4,83,2],[61,2,84,0],[62,2,86,7],[62,8,86,13,"notificationsApi"],[62,24,86,29],[62,27,86,32],[62,31,86,36,"NotificationsApi"],[62,47,86,52],[62,48,86,53],[62,49,86,54],[63,0,86,55],[63,3]],"functionMap":{"names":["<global>","NotificationsApi","NotificationsApi#getHeaders","NotificationsApi#getNotifications","NotificationsApi#markAsRead","NotificationsApi#markAllAsRead","NotificationsApi#getUnreadCount","notifications.filter$argument_0"],"mappings":"AAA;AC2B;ECC;GDK;EEE;GFc;EGE;GHY;EIE;GJY;EKE;gCCE,cD;GLC;CDC"},"hasCjsExports":false},"type":"js/module"}]}