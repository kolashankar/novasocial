{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"../../utils/AverageWindow","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":51},"end":{"line":2,"column":67,"index":118}}],"key":"SQ3dfDx/WV1Y1RzFg/JLZPMOTE0=","exportNames":["*"],"imports":1}},{"name":"../helpers/ConsecutiveNumbers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":119},"end":{"line":3,"column":67,"index":186}}],"key":"cw6KVs8kayN8q9jdmkBPMsl8V5I=","exportNames":["*"],"imports":1}},{"name":"../utils/findVisibleIndex","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":187},"end":{"line":4,"column":89,"index":276}}],"key":"KF1H7lNXclcNhWWhVoaVosY9bks=","exportNames":["*"],"imports":1}},{"name":"../utils/measureLayout","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":277},"end":{"line":5,"column":63,"index":340}}],"key":"hpvDiGKRYRB2EuXEMVVHwVt3//0=","exportNames":["*"],"imports":1}},{"name":"../../errors/ErrorMessages","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":341},"end":{"line":6,"column":59,"index":400}}],"key":"dcb4K7pqb6gN/GPdKjYu35YRe0w=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"RVLayoutManager\", {\n    enumerable: true,\n    get: function () {\n      return RVLayoutManager;\n    }\n  });\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _utilsAverageWindow = require(_dependencyMap[2], \"../../utils/AverageWindow\");\n  var _helpersConsecutiveNumbers = require(_dependencyMap[3], \"../helpers/ConsecutiveNumbers\");\n  var _utilsFindVisibleIndex = require(_dependencyMap[4], \"../utils/findVisibleIndex\");\n  var _utilsMeasureLayout = require(_dependencyMap[5], \"../utils/measureLayout\");\n  var _errorsErrorMessages = require(_dependencyMap[6], \"../../errors/ErrorMessages\");\n  // Interface of layout manager for app's listviews\n  /**\n   * Base abstract class for layout managers in the recycler view system.\n   * Provides common functionality for managing item layouts and dimensions.\n   * Supports both horizontal and vertical layouts with dynamic item sizing.\n   */\n  var RVLayoutManager = /*#__PURE__*/function () {\n    function RVLayoutManager(params, previousLayoutManager) {\n      (0, _classCallCheck.default)(this, RVLayoutManager);\n      var _a, _b;\n      /** Flag indicating if the layout requires repainting */\n      this.requiresRepaint = false;\n      /** Maximum number of items to process in a single layout pass */\n      this.maxItemsToProcess = 250;\n      /** Information about item spans and sizes */\n      this.spanSizeInfo = {};\n      /** Span tracker for each item */\n      this.spanTracker = [];\n      /** Current max index with changed layout */\n      this.currentMaxIndexWithChangedLayout = -1;\n      /**\n       * Last index that was skipped during layout computation.\n       * Used to determine if a layout needs to be recomputed.\n       */\n      this.lastSkippedLayoutIndex = Number.MAX_VALUE;\n      this.heightAverageWindow = new _utilsAverageWindow.MultiTypeAverageWindow(5, 200);\n      this.widthAverageWindow = new _utilsAverageWindow.MultiTypeAverageWindow(5, 200);\n      this.getItemType = params.getItemType;\n      this.overrideItemLayout = params.overrideItemLayout;\n      this.layouts = (_a = previousLayoutManager === null || previousLayoutManager === void 0 ? void 0 : previousLayoutManager.layouts) !== null && _a !== void 0 ? _a : [];\n      if (previousLayoutManager) {\n        this.updateLayoutParams(params);\n      } else {\n        this.horizontal = Boolean(params.horizontal);\n        this.windowSize = params.windowSize;\n        this.maxColumns = (_b = params.maxColumns) !== null && _b !== void 0 ? _b : 1;\n      }\n    }\n    /**\n     * Gets the estimated width for an item based on its type.\n     * @param index Index of the item\n     * @returns Estimated width\n     */\n    return (0, _createClass.default)(RVLayoutManager, [{\n      key: \"getEstimatedWidth\",\n      value: function getEstimatedWidth(index) {\n        return this.widthAverageWindow.getCurrentValue(this.getItemType(index));\n      }\n      /**\n       * Gets the estimated height for an item based on its type.\n       * @param index Index of the item\n       * @returns Estimated height\n       */\n    }, {\n      key: \"getEstimatedHeight\",\n      value: function getEstimatedHeight(index) {\n        return this.heightAverageWindow.getCurrentValue(this.getItemType(index));\n      }\n      /**\n       * Checks if the layout is horizontal.\n       * @returns True if horizontal, false if vertical\n       */\n    }, {\n      key: \"isHorizontal\",\n      value: function isHorizontal() {\n        return this.horizontal;\n      }\n      /**\n       * Gets the dimensions of the visible window.\n       * @returns Window dimensions\n       */\n    }, {\n      key: \"getWindowsSize\",\n      value: function getWindowsSize() {\n        return this.windowSize;\n      }\n      /**\n       * Gets indices of items currently visible in the viewport.\n       * Uses binary search for efficient lookup.\n       * @param unboundDimensionStart Start position of viewport (start X or start Y)\n       * @param unboundDimensionEnd End position of viewport (end X or end Y)\n       * @returns ConsecutiveNumbers containing visible indices\n       */\n    }, {\n      key: \"getVisibleLayouts\",\n      value: function getVisibleLayouts(unboundDimensionStart, unboundDimensionEnd) {\n        // Find the first visible index\n        var firstVisibleIndex = (0, _utilsFindVisibleIndex.findFirstVisibleIndex)(this.layouts, unboundDimensionStart, this.horizontal);\n        // Find the last visible index\n        var lastVisibleIndex = (0, _utilsFindVisibleIndex.findLastVisibleIndex)(this.layouts, unboundDimensionEnd, this.horizontal);\n        // Collect the indices in the range\n        if (firstVisibleIndex !== -1 && lastVisibleIndex !== -1) {\n          return new _helpersConsecutiveNumbers.ConsecutiveNumbers(firstVisibleIndex, lastVisibleIndex);\n        }\n        return _helpersConsecutiveNumbers.ConsecutiveNumbers.EMPTY;\n      }\n      /**\n       * Removes layout information for specified indices and recomputes layout.\n       * @param indices Array of indices to remove\n       */\n    }, {\n      key: \"deleteLayout\",\n      value: function deleteLayout(indices) {\n        // Sort indices in descending order\n        indices.sort((num1, num2) => num2 - num1);\n        // Remove elements from the array\n        for (var index of indices) {\n          this.layouts.splice(index, 1);\n        }\n        var startIndex = Math.min(...indices);\n        // Recompute layouts starting from the smallest index in the original indices array\n        this._recomputeLayouts(this.getMinRecomputeIndex(startIndex), this.getMaxRecomputeIndex(startIndex));\n      }\n      /**\n       * Updates layout information for items and recomputes layout if necessary.\n       * @param layoutInfo Array of layout information for items (real measurements)\n       * @param totalItemCount Total number of items in the list\n       */\n    }, {\n      key: \"modifyLayout\",\n      value: function modifyLayout(layoutInfo, totalItemCount) {\n        var _a;\n        this.maxItemsToProcess = Math.max(this.maxItemsToProcess, layoutInfo.length * 10);\n        var minRecomputeIndex = Number.MAX_VALUE;\n        if (this.layouts.length > totalItemCount) {\n          this.layouts.length = totalItemCount;\n          this.spanTracker.length = totalItemCount;\n          minRecomputeIndex = totalItemCount - 1; // <0 gets skipped so it's safe to set to totalItemCount - 1\n        }\n        // update average windows\n        minRecomputeIndex = Math.min(minRecomputeIndex, this.computeEstimatesAndMinMaxChangedLayout(layoutInfo));\n        if (this.layouts.length < totalItemCount && totalItemCount > 0) {\n          var startIndex = this.layouts.length;\n          this.layouts.length = totalItemCount;\n          this.spanTracker.length = totalItemCount;\n          for (var i = startIndex; i < totalItemCount; i++) {\n            this.getLayout(i);\n            this.getSpan(i);\n          }\n          this.recomputeLayouts(startIndex, totalItemCount - 1);\n        }\n        // compute minRecomputeIndex\n        minRecomputeIndex = Math.min(minRecomputeIndex, this.lastSkippedLayoutIndex, this.computeMinIndexWithChangedSpan(layoutInfo), (_a = this.processLayoutInfo(layoutInfo, totalItemCount)) !== null && _a !== void 0 ? _a : minRecomputeIndex, this.computeEstimatesAndMinMaxChangedLayout(layoutInfo));\n        if (minRecomputeIndex >= 0 && minRecomputeIndex < totalItemCount) {\n          var maxRecomputeIndex = this.getMaxRecomputeIndex(minRecomputeIndex);\n          this._recomputeLayouts(minRecomputeIndex, maxRecomputeIndex);\n        }\n        this.currentMaxIndexWithChangedLayout = -1;\n      }\n      /**\n       * Gets layout information for an item at the given index.\n       * Creates and initializes a new layout if one doesn't exist.\n       * @param index Index of the item\n       * @returns Layout information for the item\n       */\n    }, {\n      key: \"getLayout\",\n      value: function getLayout(index) {\n        if (index >= this.layouts.length) {\n          throw new Error(_errorsErrorMessages.ErrorMessages.indexOutOfBounds);\n        }\n        var layout = this.layouts[index];\n        if (!layout) {\n          // Create new layout with estimated dimensions\n          layout = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n          };\n          this.layouts[index] = layout;\n        }\n        if (!layout.isWidthMeasured || !layout.isHeightMeasured) {\n          this.estimateLayout(index);\n        }\n        return layout;\n      }\n      /**\n       * Updates layout parameters and triggers recomputation if necessary.\n       * @param params New layout parameters\n       */\n    }, {\n      key: \"updateLayoutParams\",\n      value: function updateLayoutParams(params) {\n        var _a, _b, _c;\n        this.windowSize = params.windowSize;\n        this.horizontal = (_a = params.horizontal) !== null && _a !== void 0 ? _a : this.horizontal;\n        this.maxColumns = (_b = params.maxColumns) !== null && _b !== void 0 ? _b : this.maxColumns;\n        this.optimizeItemArrangement = (_c = params.optimizeItemArrangement) !== null && _c !== void 0 ? _c : this.optimizeItemArrangement;\n      }\n    }, {\n      key: \"getLayoutCount\",\n      value: function getLayoutCount() {\n        return this.layouts.length;\n      }\n      /**\n       * Gets span for an item, applying any overrides.\n       * This is intended to be called during a relayout call. The value is tracked and used to determine if a span change has occurred.\n       * If skipTracking is true, the operation is not tracked. Can be useful if span is required outside of a relayout call.\n       * The tracker is used to call handleSpanChange if a span change has occurred before relayout call.\n       * // TODO: improve this contract.\n       * @param index Index of the item\n       * @returns Span for the item\n       */\n    }, {\n      key: \"getSpan\",\n      value: function getSpan(index) {\n        var skipTracking = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var _a;\n        this.spanSizeInfo.span = undefined;\n        this.overrideItemLayout(index, this.spanSizeInfo);\n        var span = Math.min((_a = this.spanSizeInfo.span) !== null && _a !== void 0 ? _a : 1, this.maxColumns);\n        if (!skipTracking) {\n          this.spanTracker[index] = span;\n        }\n        return span;\n      }\n      /**\n       * Method to handle span change for an item. Can be overridden by subclasses.\n       * @param index Index of the item\n       */\n    }, {\n      key: \"handleSpanChange\",\n      value: function handleSpanChange(index) {}\n      /**\n       * Gets the maximum index to process in a single layout pass.\n       * @param startIndex Starting index\n       * @returns Maximum index to process\n       */\n    }, {\n      key: \"getMaxRecomputeIndex\",\n      value: function getMaxRecomputeIndex(startIndex) {\n        return Math.min(Math.max(startIndex, this.currentMaxIndexWithChangedLayout) + this.maxItemsToProcess, this.layouts.length - 1);\n      }\n      /**\n       * Gets the minimum index to process in a single layout pass.\n       * @param startIndex Starting index\n       * @returns Minimum index to process\n       */\n    }, {\n      key: \"getMinRecomputeIndex\",\n      value: function getMinRecomputeIndex(startIndex) {\n        return startIndex;\n      }\n    }, {\n      key: \"_recomputeLayouts\",\n      value: function _recomputeLayouts(startIndex, endIndex) {\n        this.recomputeLayouts(startIndex, endIndex);\n        if (this.lastSkippedLayoutIndex >= startIndex && this.lastSkippedLayoutIndex <= endIndex) {\n          this.lastSkippedLayoutIndex = Number.MAX_VALUE;\n        }\n        if (endIndex + 1 < this.layouts.length) {\n          this.lastSkippedLayoutIndex = Math.min(endIndex + 1, this.lastSkippedLayoutIndex);\n          var lastIndex = this.layouts.length - 1;\n          // Since layout managers derive height from last indices we need to make\n          // sure they're not too much out of sync.\n          if (this.layouts[lastIndex].y < this.layouts[endIndex].y) {\n            this.recomputeLayouts(this.lastSkippedLayoutIndex, lastIndex);\n            this.lastSkippedLayoutIndex = Number.MAX_VALUE;\n          }\n        }\n      }\n      /**\n       * Computes size estimates and finds the minimum recompute index.\n       * @param layoutInfo Array of layout information for items\n       * @returns Minimum index that needs recomputation\n       */\n    }, {\n      key: \"computeEstimatesAndMinMaxChangedLayout\",\n      value: function computeEstimatesAndMinMaxChangedLayout(layoutInfo) {\n        var minRecomputeIndex = Number.MAX_VALUE;\n        for (var info of layoutInfo) {\n          var index = info.index,\n            dimensions = info.dimensions;\n          var storedLayout = this.layouts[index];\n          if (index >= this.lastSkippedLayoutIndex || !storedLayout || !storedLayout.isHeightMeasured || !storedLayout.isWidthMeasured || (0, _utilsMeasureLayout.areDimensionsNotEqual)(storedLayout.height, dimensions.height) || (0, _utilsMeasureLayout.areDimensionsNotEqual)(storedLayout.width, dimensions.width)) {\n            minRecomputeIndex = Math.min(minRecomputeIndex, index);\n            this.currentMaxIndexWithChangedLayout = Math.max(this.currentMaxIndexWithChangedLayout, index);\n          }\n          this.heightAverageWindow.addValue(dimensions.height, this.getItemType(index));\n          this.widthAverageWindow.addValue(dimensions.width, this.getItemType(index));\n        }\n        return minRecomputeIndex;\n      }\n    }, {\n      key: \"computeMinIndexWithChangedSpan\",\n      value: function computeMinIndexWithChangedSpan(layoutInfo) {\n        var minIndexWithChangedSpan = Number.MAX_VALUE;\n        for (var info of layoutInfo) {\n          var index = info.index;\n          var span = this.getSpan(index, true);\n          var storedSpan = this.spanTracker[index];\n          if (span !== storedSpan) {\n            this.spanTracker[index] = span;\n            this.handleSpanChange(index);\n            minIndexWithChangedSpan = Math.min(minIndexWithChangedSpan, index);\n          }\n        }\n        return minIndexWithChangedSpan;\n      }\n    }]);\n  }();\n});","lineCount":329,"map":[[12,2,12,0,"Object"],[12,8,12,0],[12,9,12,0,"defineProperty"],[12,23,12,0],[12,24,12,0,"exports"],[12,31,12,0],[13,4,12,0,"enumerable"],[13,14,12,0],[14,4,12,0,"get"],[14,7,12,0],[14,18,12,0,"get"],[14,19,12,0],[15,6,12,0],[15,13,12,0,"RVLayoutManager"],[15,28,12,0],[16,4,12,0],[17,2,12,0],[18,2,278,1],[18,6,278,1,"_babelRuntimeHelpersClassCallCheck"],[18,40,278,1],[18,43,278,1,"require"],[18,50,278,1],[18,51,278,1,"_dependencyMap"],[18,65,278,1],[19,2,278,1],[19,6,278,1,"_classCallCheck"],[19,21,278,1],[19,24,278,1,"_interopDefault"],[19,39,278,1],[19,40,278,1,"_babelRuntimeHelpersClassCallCheck"],[19,74,278,1],[20,2,278,1],[20,6,278,1,"_babelRuntimeHelpersCreateClass"],[20,37,278,1],[20,40,278,1,"require"],[20,47,278,1],[20,48,278,1,"_dependencyMap"],[20,62,278,1],[21,2,278,1],[21,6,278,1,"_createClass"],[21,18,278,1],[21,21,278,1,"_interopDefault"],[21,36,278,1],[21,37,278,1,"_babelRuntimeHelpersCreateClass"],[21,68,278,1],[22,2,2,0],[22,6,2,0,"_utilsAverageWindow"],[22,25,2,0],[22,28,2,0,"require"],[22,35,2,0],[22,36,2,0,"_dependencyMap"],[22,50,2,0],[23,2,3,0],[23,6,3,0,"_helpersConsecutiveNumbers"],[23,32,3,0],[23,35,3,0,"require"],[23,42,3,0],[23,43,3,0,"_dependencyMap"],[23,57,3,0],[24,2,4,0],[24,6,4,0,"_utilsFindVisibleIndex"],[24,28,4,0],[24,31,4,0,"require"],[24,38,4,0],[24,39,4,0,"_dependencyMap"],[24,53,4,0],[25,2,5,0],[25,6,5,0,"_utilsMeasureLayout"],[25,25,5,0],[25,28,5,0,"require"],[25,35,5,0],[25,36,5,0,"_dependencyMap"],[25,50,5,0],[26,2,6,0],[26,6,6,0,"_errorsErrorMessages"],[26,26,6,0],[26,29,6,0,"require"],[26,36,6,0],[26,37,6,0,"_dependencyMap"],[26,51,6,0],[27,2,1,0],[28,2,7,0],[29,0,8,0],[30,0,9,0],[31,0,10,0],[32,0,11,0],[33,2,7,0],[33,6,12,13,"RVLayoutManager"],[33,21,12,28],[34,4,13,4],[34,13,13,4,"RVLayoutManager"],[34,29,13,16,"params"],[34,35,13,22],[34,37,13,24,"previousLayoutManager"],[34,58,13,45],[34,60,13,47],[35,6,13,47],[35,10,13,47,"_classCallCheck"],[35,25,13,47],[35,26,13,47,"default"],[35,33,13,47],[35,41,13,47,"RVLayoutManager"],[35,56,13,47],[36,6,14,8],[36,10,14,12,"_a"],[36,12,14,14],[36,14,14,16,"_b"],[36,16,14,18],[37,6,15,8],[38,6,16,8],[38,10,16,12],[38,11,16,13,"requiresRepaint"],[38,26,16,28],[38,29,16,31],[38,34,16,36],[39,6,17,8],[40,6,18,8],[40,10,18,12],[40,11,18,13,"maxItemsToProcess"],[40,28,18,30],[40,31,18,33],[40,34,18,36],[41,6,19,8],[42,6,20,8],[42,10,20,12],[42,11,20,13,"spanSizeInfo"],[42,23,20,25],[42,26,20,28],[42,27,20,29],[42,28,20,30],[43,6,21,8],[44,6,22,8],[44,10,22,12],[44,11,22,13,"spanTracker"],[44,22,22,24],[44,25,22,27],[44,27,22,29],[45,6,23,8],[46,6,24,8],[46,10,24,12],[46,11,24,13,"currentMaxIndexWithChangedLayout"],[46,43,24,45],[46,46,24,48],[46,47,24,49],[46,48,24,50],[47,6,25,8],[48,0,26,0],[49,0,27,0],[50,0,28,0],[51,6,29,8],[51,10,29,12],[51,11,29,13,"lastSkippedLayoutIndex"],[51,33,29,35],[51,36,29,38,"Number"],[51,42,29,44],[51,43,29,45,"MAX_VALUE"],[51,52,29,54],[52,6,30,8],[52,10,30,12],[52,11,30,13,"heightAverageWindow"],[52,30,30,32],[52,33,30,35],[52,37,30,39,"MultiTypeAverageWindow"],[52,56,30,61],[52,57,30,61,"MultiTypeAverageWindow"],[52,79,30,61],[52,80,30,62],[52,81,30,63],[52,83,30,65],[52,86,30,68],[52,87,30,69],[53,6,31,8],[53,10,31,12],[53,11,31,13,"widthAverageWindow"],[53,29,31,31],[53,32,31,34],[53,36,31,38,"MultiTypeAverageWindow"],[53,55,31,60],[53,56,31,60,"MultiTypeAverageWindow"],[53,78,31,60],[53,79,31,61],[53,80,31,62],[53,82,31,64],[53,85,31,67],[53,86,31,68],[54,6,32,8],[54,10,32,12],[54,11,32,13,"getItemType"],[54,22,32,24],[54,25,32,27,"params"],[54,31,32,33],[54,32,32,34,"getItemType"],[54,43,32,45],[55,6,33,8],[55,10,33,12],[55,11,33,13,"overrideItemLayout"],[55,29,33,31],[55,32,33,34,"params"],[55,38,33,40],[55,39,33,41,"overrideItemLayout"],[55,57,33,59],[56,6,34,8],[56,10,34,12],[56,11,34,13,"layouts"],[56,18,34,20],[56,21,34,23],[56,22,34,24,"_a"],[56,24,34,26],[56,27,34,29,"previousLayoutManager"],[56,48,34,50],[56,53,34,55],[56,57,34,59],[56,61,34,63,"previousLayoutManager"],[56,82,34,84],[56,87,34,89],[56,92,34,94],[56,93,34,95],[56,96,34,98],[56,101,34,103],[56,102,34,104],[56,105,34,107,"previousLayoutManager"],[56,126,34,128],[56,127,34,129,"layouts"],[56,134,34,136],[56,140,34,142],[56,144,34,146],[56,148,34,150,"_a"],[56,150,34,152],[56,155,34,157],[56,160,34,162],[56,161,34,163],[56,164,34,166,"_a"],[56,166,34,168],[56,169,34,171],[56,171,34,173],[57,6,35,8],[57,10,35,12,"previousLayoutManager"],[57,31,35,33],[57,33,35,35],[58,8,36,12],[58,12,36,16],[58,13,36,17,"updateLayoutParams"],[58,31,36,35],[58,32,36,36,"params"],[58,38,36,42],[58,39,36,43],[59,6,37,8],[59,7,37,9],[59,13,38,13],[60,8,39,12],[60,12,39,16],[60,13,39,17,"horizontal"],[60,23,39,27],[60,26,39,30,"Boolean"],[60,33,39,37],[60,34,39,38,"params"],[60,40,39,44],[60,41,39,45,"horizontal"],[60,51,39,55],[60,52,39,56],[61,8,40,12],[61,12,40,16],[61,13,40,17,"windowSize"],[61,23,40,27],[61,26,40,30,"params"],[61,32,40,36],[61,33,40,37,"windowSize"],[61,43,40,47],[62,8,41,12],[62,12,41,16],[62,13,41,17,"maxColumns"],[62,23,41,27],[62,26,41,30],[62,27,41,31,"_b"],[62,29,41,33],[62,32,41,36,"params"],[62,38,41,42],[62,39,41,43,"maxColumns"],[62,49,41,53],[62,55,41,59],[62,59,41,63],[62,63,41,67,"_b"],[62,65,41,69],[62,70,41,74],[62,75,41,79],[62,76,41,80],[62,79,41,83,"_b"],[62,81,41,85],[62,84,41,88],[62,85,41,89],[63,6,42,8],[64,4,43,4],[65,4,44,4],[66,0,45,0],[67,0,46,0],[68,0,47,0],[69,0,48,0],[70,4,44,4],[70,15,44,4,"_createClass"],[70,27,44,4],[70,28,44,4,"default"],[70,35,44,4],[70,37,44,4,"RVLayoutManager"],[70,52,44,4],[71,6,44,4,"key"],[71,9,44,4],[72,6,44,4,"value"],[72,11,44,4],[72,13,49,4],[72,22,49,4,"getEstimatedWidth"],[72,39,49,21,"getEstimatedWidth"],[72,40,49,22,"index"],[72,45,49,27],[72,47,49,29],[73,8,50,8],[73,15,50,15],[73,19,50,19],[73,20,50,20,"widthAverageWindow"],[73,38,50,38],[73,39,50,39,"getCurrentValue"],[73,54,50,54],[73,55,50,55],[73,59,50,59],[73,60,50,60,"getItemType"],[73,71,50,71],[73,72,50,72,"index"],[73,77,50,77],[73,78,50,78],[73,79,50,79],[74,6,51,4],[75,6,52,4],[76,0,53,0],[77,0,54,0],[78,0,55,0],[79,0,56,0],[80,4,52,4],[81,6,52,4,"key"],[81,9,52,4],[82,6,52,4,"value"],[82,11,52,4],[82,13,57,4],[82,22,57,4,"getEstimatedHeight"],[82,40,57,22,"getEstimatedHeight"],[82,41,57,23,"index"],[82,46,57,28],[82,48,57,30],[83,8,58,8],[83,15,58,15],[83,19,58,19],[83,20,58,20,"heightAverageWindow"],[83,39,58,39],[83,40,58,40,"getCurrentValue"],[83,55,58,55],[83,56,58,56],[83,60,58,60],[83,61,58,61,"getItemType"],[83,72,58,72],[83,73,58,73,"index"],[83,78,58,78],[83,79,58,79],[83,80,58,80],[84,6,59,4],[85,6,60,4],[86,0,61,0],[87,0,62,0],[88,0,63,0],[89,4,60,4],[90,6,60,4,"key"],[90,9,60,4],[91,6,60,4,"value"],[91,11,60,4],[91,13,64,4],[91,22,64,4,"isHorizontal"],[91,34,64,16,"isHorizontal"],[91,35,64,16],[91,37,64,19],[92,8,65,8],[92,15,65,15],[92,19,65,19],[92,20,65,20,"horizontal"],[92,30,65,30],[93,6,66,4],[94,6,67,4],[95,0,68,0],[96,0,69,0],[97,0,70,0],[98,4,67,4],[99,6,67,4,"key"],[99,9,67,4],[100,6,67,4,"value"],[100,11,67,4],[100,13,71,4],[100,22,71,4,"getWindowsSize"],[100,36,71,18,"getWindowsSize"],[100,37,71,18],[100,39,71,21],[101,8,72,8],[101,15,72,15],[101,19,72,19],[101,20,72,20,"windowSize"],[101,30,72,30],[102,6,73,4],[103,6,74,4],[104,0,75,0],[105,0,76,0],[106,0,77,0],[107,0,78,0],[108,0,79,0],[109,0,80,0],[110,4,74,4],[111,6,74,4,"key"],[111,9,74,4],[112,6,74,4,"value"],[112,11,74,4],[112,13,81,4],[112,22,81,4,"getVisibleLayouts"],[112,39,81,21,"getVisibleLayouts"],[112,40,81,22,"unboundDimensionStart"],[112,61,81,43],[112,63,81,45,"unboundDimensionEnd"],[112,82,81,64],[112,84,81,66],[113,8,82,8],[114,8,83,8],[114,12,83,14,"firstVisibleIndex"],[114,29,83,31],[114,32,83,34],[114,36,83,34,"findFirstVisibleIndex"],[114,58,83,55],[114,59,83,55,"findFirstVisibleIndex"],[114,80,83,55],[114,82,83,56],[114,86,83,60],[114,87,83,61,"layouts"],[114,94,83,68],[114,96,83,70,"unboundDimensionStart"],[114,117,83,91],[114,119,83,93],[114,123,83,97],[114,124,83,98,"horizontal"],[114,134,83,108],[114,135,83,109],[115,8,84,8],[116,8,85,8],[116,12,85,14,"lastVisibleIndex"],[116,28,85,30],[116,31,85,33],[116,35,85,33,"findLastVisibleIndex"],[116,57,85,53],[116,58,85,53,"findLastVisibleIndex"],[116,78,85,53],[116,80,85,54],[116,84,85,58],[116,85,85,59,"layouts"],[116,92,85,66],[116,94,85,68,"unboundDimensionEnd"],[116,113,85,87],[116,115,85,89],[116,119,85,93],[116,120,85,94,"horizontal"],[116,130,85,104],[116,131,85,105],[117,8,86,8],[118,8,87,8],[118,12,87,12,"firstVisibleIndex"],[118,29,87,29],[118,34,87,34],[118,35,87,35],[118,36,87,36],[118,40,87,40,"lastVisibleIndex"],[118,56,87,56],[118,61,87,61],[118,62,87,62],[118,63,87,63],[118,65,87,65],[119,10,88,12],[119,17,88,19],[119,21,88,23,"ConsecutiveNumbers"],[119,47,88,41],[119,48,88,41,"ConsecutiveNumbers"],[119,66,88,41],[119,67,88,42,"firstVisibleIndex"],[119,84,88,59],[119,86,88,61,"lastVisibleIndex"],[119,102,88,77],[119,103,88,78],[120,8,89,8],[121,8,90,8],[121,15,90,15,"ConsecutiveNumbers"],[121,41,90,33],[121,42,90,33,"ConsecutiveNumbers"],[121,60,90,33],[121,61,90,34,"EMPTY"],[121,66,90,39],[122,6,91,4],[123,6,92,4],[124,0,93,0],[125,0,94,0],[126,0,95,0],[127,4,92,4],[128,6,92,4,"key"],[128,9,92,4],[129,6,92,4,"value"],[129,11,92,4],[129,13,96,4],[129,22,96,4,"deleteLayout"],[129,34,96,16,"deleteLayout"],[129,35,96,17,"indices"],[129,42,96,24],[129,44,96,26],[130,8,97,8],[131,8,98,8,"indices"],[131,15,98,15],[131,16,98,16,"sort"],[131,20,98,20],[131,21,98,21],[131,22,98,22,"num1"],[131,26,98,26],[131,28,98,28,"num2"],[131,32,98,32],[131,37,98,37,"num2"],[131,41,98,41],[131,44,98,44,"num1"],[131,48,98,48],[131,49,98,49],[132,8,99,8],[133,8,100,8],[133,13,100,13],[133,17,100,19,"index"],[133,22,100,24],[133,26,100,28,"indices"],[133,33,100,35],[133,35,100,37],[134,10,101,12],[134,14,101,16],[134,15,101,17,"layouts"],[134,22,101,24],[134,23,101,25,"splice"],[134,29,101,31],[134,30,101,32,"index"],[134,35,101,37],[134,37,101,39],[134,38,101,40],[134,39,101,41],[135,8,102,8],[136,8,103,8],[136,12,103,14,"startIndex"],[136,22,103,24],[136,25,103,27,"Math"],[136,29,103,31],[136,30,103,32,"min"],[136,33,103,35],[136,34,103,36],[136,37,103,39,"indices"],[136,44,103,46],[136,45,103,47],[137,8,104,8],[138,8,105,8],[138,12,105,12],[138,13,105,13,"_recomputeLayouts"],[138,30,105,30],[138,31,105,31],[138,35,105,35],[138,36,105,36,"getMinRecomputeIndex"],[138,56,105,56],[138,57,105,57,"startIndex"],[138,67,105,67],[138,68,105,68],[138,70,105,70],[138,74,105,74],[138,75,105,75,"getMaxRecomputeIndex"],[138,95,105,95],[138,96,105,96,"startIndex"],[138,106,105,106],[138,107,105,107],[138,108,105,108],[139,6,106,4],[140,6,107,4],[141,0,108,0],[142,0,109,0],[143,0,110,0],[144,0,111,0],[145,4,107,4],[146,6,107,4,"key"],[146,9,107,4],[147,6,107,4,"value"],[147,11,107,4],[147,13,112,4],[147,22,112,4,"modifyLayout"],[147,34,112,16,"modifyLayout"],[147,35,112,17,"layoutInfo"],[147,45,112,27],[147,47,112,29,"totalItemCount"],[147,61,112,43],[147,63,112,45],[148,8,113,8],[148,12,113,12,"_a"],[148,14,113,14],[149,8,114,8],[149,12,114,12],[149,13,114,13,"maxItemsToProcess"],[149,30,114,30],[149,33,114,33,"Math"],[149,37,114,37],[149,38,114,38,"max"],[149,41,114,41],[149,42,114,42],[149,46,114,46],[149,47,114,47,"maxItemsToProcess"],[149,64,114,64],[149,66,114,66,"layoutInfo"],[149,76,114,76],[149,77,114,77,"length"],[149,83,114,83],[149,86,114,86],[149,88,114,88],[149,89,114,89],[150,8,115,8],[150,12,115,12,"minRecomputeIndex"],[150,29,115,29],[150,32,115,32,"Number"],[150,38,115,38],[150,39,115,39,"MAX_VALUE"],[150,48,115,48],[151,8,116,8],[151,12,116,12],[151,16,116,16],[151,17,116,17,"layouts"],[151,24,116,24],[151,25,116,25,"length"],[151,31,116,31],[151,34,116,34,"totalItemCount"],[151,48,116,48],[151,50,116,50],[152,10,117,12],[152,14,117,16],[152,15,117,17,"layouts"],[152,22,117,24],[152,23,117,25,"length"],[152,29,117,31],[152,32,117,34,"totalItemCount"],[152,46,117,48],[153,10,118,12],[153,14,118,16],[153,15,118,17,"spanTracker"],[153,26,118,28],[153,27,118,29,"length"],[153,33,118,35],[153,36,118,38,"totalItemCount"],[153,50,118,52],[154,10,119,12,"minRecomputeIndex"],[154,27,119,29],[154,30,119,32,"totalItemCount"],[154,44,119,46],[154,47,119,49],[154,48,119,50],[154,49,119,51],[154,50,119,52],[155,8,120,8],[156,8,121,8],[157,8,122,8,"minRecomputeIndex"],[157,25,122,25],[157,28,122,28,"Math"],[157,32,122,32],[157,33,122,33,"min"],[157,36,122,36],[157,37,122,37,"minRecomputeIndex"],[157,54,122,54],[157,56,122,56],[157,60,122,60],[157,61,122,61,"computeEstimatesAndMinMaxChangedLayout"],[157,99,122,99],[157,100,122,100,"layoutInfo"],[157,110,122,110],[157,111,122,111],[157,112,122,112],[158,8,123,8],[158,12,123,12],[158,16,123,16],[158,17,123,17,"layouts"],[158,24,123,24],[158,25,123,25,"length"],[158,31,123,31],[158,34,123,34,"totalItemCount"],[158,48,123,48],[158,52,123,52,"totalItemCount"],[158,66,123,66],[158,69,123,69],[158,70,123,70],[158,72,123,72],[159,10,124,12],[159,14,124,18,"startIndex"],[159,24,124,28],[159,27,124,31],[159,31,124,35],[159,32,124,36,"layouts"],[159,39,124,43],[159,40,124,44,"length"],[159,46,124,50],[160,10,125,12],[160,14,125,16],[160,15,125,17,"layouts"],[160,22,125,24],[160,23,125,25,"length"],[160,29,125,31],[160,32,125,34,"totalItemCount"],[160,46,125,48],[161,10,126,12],[161,14,126,16],[161,15,126,17,"spanTracker"],[161,26,126,28],[161,27,126,29,"length"],[161,33,126,35],[161,36,126,38,"totalItemCount"],[161,50,126,52],[162,10,127,12],[162,15,127,17],[162,19,127,21,"i"],[162,20,127,22],[162,23,127,25,"startIndex"],[162,33,127,35],[162,35,127,37,"i"],[162,36,127,38],[162,39,127,41,"totalItemCount"],[162,53,127,55],[162,55,127,57,"i"],[162,56,127,58],[162,58,127,60],[162,60,127,62],[163,12,128,16],[163,16,128,20],[163,17,128,21,"getLayout"],[163,26,128,30],[163,27,128,31,"i"],[163,28,128,32],[163,29,128,33],[164,12,129,16],[164,16,129,20],[164,17,129,21,"getSpan"],[164,24,129,28],[164,25,129,29,"i"],[164,26,129,30],[164,27,129,31],[165,10,130,12],[166,10,131,12],[166,14,131,16],[166,15,131,17,"recomputeLayouts"],[166,31,131,33],[166,32,131,34,"startIndex"],[166,42,131,44],[166,44,131,46,"totalItemCount"],[166,58,131,60],[166,61,131,63],[166,62,131,64],[166,63,131,65],[167,8,132,8],[168,8,133,8],[169,8,134,8,"minRecomputeIndex"],[169,25,134,25],[169,28,134,28,"Math"],[169,32,134,32],[169,33,134,33,"min"],[169,36,134,36],[169,37,134,37,"minRecomputeIndex"],[169,54,134,54],[169,56,134,56],[169,60,134,60],[169,61,134,61,"lastSkippedLayoutIndex"],[169,83,134,83],[169,85,134,85],[169,89,134,89],[169,90,134,90,"computeMinIndexWithChangedSpan"],[169,120,134,120],[169,121,134,121,"layoutInfo"],[169,131,134,131],[169,132,134,132],[169,134,134,134],[169,135,134,135,"_a"],[169,137,134,137],[169,140,134,140],[169,144,134,144],[169,145,134,145,"processLayoutInfo"],[169,162,134,162],[169,163,134,163,"layoutInfo"],[169,173,134,173],[169,175,134,175,"totalItemCount"],[169,189,134,189],[169,190,134,190],[169,196,134,196],[169,200,134,200],[169,204,134,204,"_a"],[169,206,134,206],[169,211,134,211],[169,216,134,216],[169,217,134,217],[169,220,134,220,"_a"],[169,222,134,222],[169,225,134,225,"minRecomputeIndex"],[169,242,134,242],[169,244,134,244],[169,248,134,248],[169,249,134,249,"computeEstimatesAndMinMaxChangedLayout"],[169,287,134,287],[169,288,134,288,"layoutInfo"],[169,298,134,298],[169,299,134,299],[169,300,134,300],[170,8,135,8],[170,12,135,12,"minRecomputeIndex"],[170,29,135,29],[170,33,135,33],[170,34,135,34],[170,38,135,38,"minRecomputeIndex"],[170,55,135,55],[170,58,135,58,"totalItemCount"],[170,72,135,72],[170,74,135,74],[171,10,136,12],[171,14,136,18,"maxRecomputeIndex"],[171,31,136,35],[171,34,136,38],[171,38,136,42],[171,39,136,43,"getMaxRecomputeIndex"],[171,59,136,63],[171,60,136,64,"minRecomputeIndex"],[171,77,136,81],[171,78,136,82],[172,10,137,12],[172,14,137,16],[172,15,137,17,"_recomputeLayouts"],[172,32,137,34],[172,33,137,35,"minRecomputeIndex"],[172,50,137,52],[172,52,137,54,"maxRecomputeIndex"],[172,69,137,71],[172,70,137,72],[173,8,138,8],[174,8,139,8],[174,12,139,12],[174,13,139,13,"currentMaxIndexWithChangedLayout"],[174,45,139,45],[174,48,139,48],[174,49,139,49],[174,50,139,50],[175,6,140,4],[176,6,141,4],[177,0,142,0],[178,0,143,0],[179,0,144,0],[180,0,145,0],[181,0,146,0],[182,4,141,4],[183,6,141,4,"key"],[183,9,141,4],[184,6,141,4,"value"],[184,11,141,4],[184,13,147,4],[184,22,147,4,"getLayout"],[184,31,147,13,"getLayout"],[184,32,147,14,"index"],[184,37,147,19],[184,39,147,21],[185,8,148,8],[185,12,148,12,"index"],[185,17,148,17],[185,21,148,21],[185,25,148,25],[185,26,148,26,"layouts"],[185,33,148,33],[185,34,148,34,"length"],[185,40,148,40],[185,42,148,42],[186,10,149,12],[186,16,149,18],[186,20,149,22,"Error"],[186,25,149,27],[186,26,149,28,"ErrorMessages"],[186,46,149,41],[186,47,149,41,"ErrorMessages"],[186,60,149,41],[186,61,149,42,"indexOutOfBounds"],[186,77,149,58],[186,78,149,59],[187,8,150,8],[188,8,151,8],[188,12,151,12,"layout"],[188,18,151,18],[188,21,151,21],[188,25,151,25],[188,26,151,26,"layouts"],[188,33,151,33],[188,34,151,34,"index"],[188,39,151,39],[188,40,151,40],[189,8,152,8],[189,12,152,12],[189,13,152,13,"layout"],[189,19,152,19],[189,21,152,21],[190,10,153,12],[191,10,154,12,"layout"],[191,16,154,18],[191,19,154,21],[192,12,155,16,"x"],[192,13,155,17],[192,15,155,19],[192,16,155,20],[193,12,156,16,"y"],[193,13,156,17],[193,15,156,19],[193,16,156,20],[194,12,157,16,"width"],[194,17,157,21],[194,19,157,23],[194,20,157,24],[195,12,158,16,"height"],[195,18,158,22],[195,20,158,24],[196,10,159,12],[196,11,159,13],[197,10,160,12],[197,14,160,16],[197,15,160,17,"layouts"],[197,22,160,24],[197,23,160,25,"index"],[197,28,160,30],[197,29,160,31],[197,32,160,34,"layout"],[197,38,160,40],[198,8,161,8],[199,8,162,8],[199,12,162,12],[199,13,162,13,"layout"],[199,19,162,19],[199,20,162,20,"isWidthMeasured"],[199,35,162,35],[199,39,162,39],[199,40,162,40,"layout"],[199,46,162,46],[199,47,162,47,"isHeightMeasured"],[199,63,162,63],[199,65,162,65],[200,10,163,12],[200,14,163,16],[200,15,163,17,"estimateLayout"],[200,29,163,31],[200,30,163,32,"index"],[200,35,163,37],[200,36,163,38],[201,8,164,8],[202,8,165,8],[202,15,165,15,"layout"],[202,21,165,21],[203,6,166,4],[204,6,167,4],[205,0,168,0],[206,0,169,0],[207,0,170,0],[208,4,167,4],[209,6,167,4,"key"],[209,9,167,4],[210,6,167,4,"value"],[210,11,167,4],[210,13,171,4],[210,22,171,4,"updateLayoutParams"],[210,40,171,22,"updateLayoutParams"],[210,41,171,23,"params"],[210,47,171,29],[210,49,171,31],[211,8,172,8],[211,12,172,12,"_a"],[211,14,172,14],[211,16,172,16,"_b"],[211,18,172,18],[211,20,172,20,"_c"],[211,22,172,22],[212,8,173,8],[212,12,173,12],[212,13,173,13,"windowSize"],[212,23,173,23],[212,26,173,26,"params"],[212,32,173,32],[212,33,173,33,"windowSize"],[212,43,173,43],[213,8,174,8],[213,12,174,12],[213,13,174,13,"horizontal"],[213,23,174,23],[213,26,174,26],[213,27,174,27,"_a"],[213,29,174,29],[213,32,174,32,"params"],[213,38,174,38],[213,39,174,39,"horizontal"],[213,49,174,49],[213,55,174,55],[213,59,174,59],[213,63,174,63,"_a"],[213,65,174,65],[213,70,174,70],[213,75,174,75],[213,76,174,76],[213,79,174,79,"_a"],[213,81,174,81],[213,84,174,84],[213,88,174,88],[213,89,174,89,"horizontal"],[213,99,174,99],[214,8,175,8],[214,12,175,12],[214,13,175,13,"maxColumns"],[214,23,175,23],[214,26,175,26],[214,27,175,27,"_b"],[214,29,175,29],[214,32,175,32,"params"],[214,38,175,38],[214,39,175,39,"maxColumns"],[214,49,175,49],[214,55,175,55],[214,59,175,59],[214,63,175,63,"_b"],[214,65,175,65],[214,70,175,70],[214,75,175,75],[214,76,175,76],[214,79,175,79,"_b"],[214,81,175,81],[214,84,175,84],[214,88,175,88],[214,89,175,89,"maxColumns"],[214,99,175,99],[215,8,176,8],[215,12,176,12],[215,13,176,13,"optimizeItemArrangement"],[215,36,176,36],[215,39,177,12],[215,40,177,13,"_c"],[215,42,177,15],[215,45,177,18,"params"],[215,51,177,24],[215,52,177,25,"optimizeItemArrangement"],[215,75,177,48],[215,81,177,54],[215,85,177,58],[215,89,177,62,"_c"],[215,91,177,64],[215,96,177,69],[215,101,177,74],[215,102,177,75],[215,105,177,78,"_c"],[215,107,177,80],[215,110,177,83],[215,114,177,87],[215,115,177,88,"optimizeItemArrangement"],[215,138,177,111],[216,6,178,4],[217,4,178,5],[218,6,178,5,"key"],[218,9,178,5],[219,6,178,5,"value"],[219,11,178,5],[219,13,179,4],[219,22,179,4,"getLayoutCount"],[219,36,179,18,"getLayoutCount"],[219,37,179,18],[219,39,179,21],[220,8,180,8],[220,15,180,15],[220,19,180,19],[220,20,180,20,"layouts"],[220,27,180,27],[220,28,180,28,"length"],[220,34,180,34],[221,6,181,4],[222,6,182,4],[223,0,183,0],[224,0,184,0],[225,0,185,0],[226,0,186,0],[227,0,187,0],[228,0,188,0],[229,0,189,0],[230,0,190,0],[231,4,182,4],[232,6,182,4,"key"],[232,9,182,4],[233,6,182,4,"value"],[233,11,182,4],[233,13,191,4],[233,22,191,4,"getSpan"],[233,29,191,11,"getSpan"],[233,30,191,12,"index"],[233,35,191,17],[233,37,191,41],[234,8,191,41],[234,12,191,19,"skipTracking"],[234,24,191,31],[234,27,191,31,"arguments"],[234,36,191,31],[234,37,191,31,"length"],[234,43,191,31],[234,51,191,31,"arguments"],[234,60,191,31],[234,68,191,31,"undefined"],[234,77,191,31],[234,80,191,31,"arguments"],[234,89,191,31],[234,95,191,34],[234,100,191,39],[235,8,192,8],[235,12,192,12,"_a"],[235,14,192,14],[236,8,193,8],[236,12,193,12],[236,13,193,13,"spanSizeInfo"],[236,25,193,25],[236,26,193,26,"span"],[236,30,193,30],[236,33,193,33,"undefined"],[236,42,193,42],[237,8,194,8],[237,12,194,12],[237,13,194,13,"overrideItemLayout"],[237,31,194,31],[237,32,194,32,"index"],[237,37,194,37],[237,39,194,39],[237,43,194,43],[237,44,194,44,"spanSizeInfo"],[237,56,194,56],[237,57,194,57],[238,8,195,8],[238,12,195,14,"span"],[238,16,195,18],[238,19,195,21,"Math"],[238,23,195,25],[238,24,195,26,"min"],[238,27,195,29],[238,28,195,30],[238,29,195,31,"_a"],[238,31,195,33],[238,34,195,36],[238,38,195,40],[238,39,195,41,"spanSizeInfo"],[238,51,195,53],[238,52,195,54,"span"],[238,56,195,58],[238,62,195,64],[238,66,195,68],[238,70,195,72,"_a"],[238,72,195,74],[238,77,195,79],[238,82,195,84],[238,83,195,85],[238,86,195,88,"_a"],[238,88,195,90],[238,91,195,93],[238,92,195,94],[238,94,195,96],[238,98,195,100],[238,99,195,101,"maxColumns"],[238,109,195,111],[238,110,195,112],[239,8,196,8],[239,12,196,12],[239,13,196,13,"skipTracking"],[239,25,196,25],[239,27,196,27],[240,10,197,12],[240,14,197,16],[240,15,197,17,"spanTracker"],[240,26,197,28],[240,27,197,29,"index"],[240,32,197,34],[240,33,197,35],[240,36,197,38,"span"],[240,40,197,42],[241,8,198,8],[242,8,199,8],[242,15,199,15,"span"],[242,19,199,19],[243,6,200,4],[244,6,201,4],[245,0,202,0],[246,0,203,0],[247,0,204,0],[248,4,201,4],[249,6,201,4,"key"],[249,9,201,4],[250,6,201,4,"value"],[250,11,201,4],[250,13,205,4],[250,22,205,4,"handleSpanChange"],[250,38,205,20,"handleSpanChange"],[250,39,205,21,"index"],[250,44,205,26],[250,46,205,28],[250,47,205,30],[251,6,206,4],[252,0,207,0],[253,0,208,0],[254,0,209,0],[255,0,210,0],[256,4,206,4],[257,6,206,4,"key"],[257,9,206,4],[258,6,206,4,"value"],[258,11,206,4],[258,13,211,4],[258,22,211,4,"getMaxRecomputeIndex"],[258,42,211,24,"getMaxRecomputeIndex"],[258,43,211,25,"startIndex"],[258,53,211,35],[258,55,211,37],[259,8,212,8],[259,15,212,15,"Math"],[259,19,212,19],[259,20,212,20,"min"],[259,23,212,23],[259,24,212,24,"Math"],[259,28,212,28],[259,29,212,29,"max"],[259,32,212,32],[259,33,212,33,"startIndex"],[259,43,212,43],[259,45,212,45],[259,49,212,49],[259,50,212,50,"currentMaxIndexWithChangedLayout"],[259,82,212,82],[259,83,212,83],[259,86,213,12],[259,90,213,16],[259,91,213,17,"maxItemsToProcess"],[259,108,213,34],[259,110,213,36],[259,114,213,40],[259,115,213,41,"layouts"],[259,122,213,48],[259,123,213,49,"length"],[259,129,213,55],[259,132,213,58],[259,133,213,59],[259,134,213,60],[260,6,214,4],[261,6,215,4],[262,0,216,0],[263,0,217,0],[264,0,218,0],[265,0,219,0],[266,4,215,4],[267,6,215,4,"key"],[267,9,215,4],[268,6,215,4,"value"],[268,11,215,4],[268,13,220,4],[268,22,220,4,"getMinRecomputeIndex"],[268,42,220,24,"getMinRecomputeIndex"],[268,43,220,25,"startIndex"],[268,53,220,35],[268,55,220,37],[269,8,221,8],[269,15,221,15,"startIndex"],[269,25,221,25],[270,6,222,4],[271,4,222,5],[272,6,222,5,"key"],[272,9,222,5],[273,6,222,5,"value"],[273,11,222,5],[273,13,223,4],[273,22,223,4,"_recomputeLayouts"],[273,39,223,21,"_recomputeLayouts"],[273,40,223,22,"startIndex"],[273,50,223,32],[273,52,223,34,"endIndex"],[273,60,223,42],[273,62,223,44],[274,8,224,8],[274,12,224,12],[274,13,224,13,"recomputeLayouts"],[274,29,224,29],[274,30,224,30,"startIndex"],[274,40,224,40],[274,42,224,42,"endIndex"],[274,50,224,50],[274,51,224,51],[275,8,225,8],[275,12,225,12],[275,16,225,16],[275,17,225,17,"lastSkippedLayoutIndex"],[275,39,225,39],[275,43,225,43,"startIndex"],[275,53,225,53],[275,57,226,12],[275,61,226,16],[275,62,226,17,"lastSkippedLayoutIndex"],[275,84,226,39],[275,88,226,43,"endIndex"],[275,96,226,51],[275,98,226,53],[276,10,227,12],[276,14,227,16],[276,15,227,17,"lastSkippedLayoutIndex"],[276,37,227,39],[276,40,227,42,"Number"],[276,46,227,48],[276,47,227,49,"MAX_VALUE"],[276,56,227,58],[277,8,228,8],[278,8,229,8],[278,12,229,12,"endIndex"],[278,20,229,20],[278,23,229,23],[278,24,229,24],[278,27,229,27],[278,31,229,31],[278,32,229,32,"layouts"],[278,39,229,39],[278,40,229,40,"length"],[278,46,229,46],[278,48,229,48],[279,10,230,12],[279,14,230,16],[279,15,230,17,"lastSkippedLayoutIndex"],[279,37,230,39],[279,40,230,42,"Math"],[279,44,230,46],[279,45,230,47,"min"],[279,48,230,50],[279,49,230,51,"endIndex"],[279,57,230,59],[279,60,230,62],[279,61,230,63],[279,63,230,65],[279,67,230,69],[279,68,230,70,"lastSkippedLayoutIndex"],[279,90,230,92],[279,91,230,93],[280,10,231,12],[280,14,231,18,"lastIndex"],[280,23,231,27],[280,26,231,30],[280,30,231,34],[280,31,231,35,"layouts"],[280,38,231,42],[280,39,231,43,"length"],[280,45,231,49],[280,48,231,52],[280,49,231,53],[281,10,232,12],[282,10,233,12],[283,10,234,12],[283,14,234,16],[283,18,234,20],[283,19,234,21,"layouts"],[283,26,234,28],[283,27,234,29,"lastIndex"],[283,36,234,38],[283,37,234,39],[283,38,234,40,"y"],[283,39,234,41],[283,42,234,44],[283,46,234,48],[283,47,234,49,"layouts"],[283,54,234,56],[283,55,234,57,"endIndex"],[283,63,234,65],[283,64,234,66],[283,65,234,67,"y"],[283,66,234,68],[283,68,234,70],[284,12,235,16],[284,16,235,20],[284,17,235,21,"recomputeLayouts"],[284,33,235,37],[284,34,235,38],[284,38,235,42],[284,39,235,43,"lastSkippedLayoutIndex"],[284,61,235,65],[284,63,235,67,"lastIndex"],[284,72,235,76],[284,73,235,77],[285,12,236,16],[285,16,236,20],[285,17,236,21,"lastSkippedLayoutIndex"],[285,39,236,43],[285,42,236,46,"Number"],[285,48,236,52],[285,49,236,53,"MAX_VALUE"],[285,58,236,62],[286,10,237,12],[287,8,238,8],[288,6,239,4],[289,6,240,4],[290,0,241,0],[291,0,242,0],[292,0,243,0],[293,0,244,0],[294,4,240,4],[295,6,240,4,"key"],[295,9,240,4],[296,6,240,4,"value"],[296,11,240,4],[296,13,245,4],[296,22,245,4,"computeEstimatesAndMinMaxChangedLayout"],[296,60,245,42,"computeEstimatesAndMinMaxChangedLayout"],[296,61,245,43,"layoutInfo"],[296,71,245,53],[296,73,245,55],[297,8,246,8],[297,12,246,12,"minRecomputeIndex"],[297,29,246,29],[297,32,246,32,"Number"],[297,38,246,38],[297,39,246,39,"MAX_VALUE"],[297,48,246,48],[298,8,247,8],[298,13,247,13],[298,17,247,19,"info"],[298,21,247,23],[298,25,247,27,"layoutInfo"],[298,35,247,37],[298,37,247,39],[299,10,248,12],[299,14,248,20,"index"],[299,19,248,25],[299,22,248,42,"info"],[299,26,248,46],[299,27,248,20,"index"],[299,32,248,25],[300,12,248,27,"dimensions"],[300,22,248,37],[300,25,248,42,"info"],[300,29,248,46],[300,30,248,27,"dimensions"],[300,40,248,37],[301,10,249,12],[301,14,249,18,"storedLayout"],[301,26,249,30],[301,29,249,33],[301,33,249,37],[301,34,249,38,"layouts"],[301,41,249,45],[301,42,249,46,"index"],[301,47,249,51],[301,48,249,52],[302,10,250,12],[302,14,250,16,"index"],[302,19,250,21],[302,23,250,25],[302,27,250,29],[302,28,250,30,"lastSkippedLayoutIndex"],[302,50,250,52],[302,54,251,16],[302,55,251,17,"storedLayout"],[302,67,251,29],[302,71,252,16],[302,72,252,17,"storedLayout"],[302,84,252,29],[302,85,252,30,"isHeightMeasured"],[302,101,252,46],[302,105,253,16],[302,106,253,17,"storedLayout"],[302,118,253,29],[302,119,253,30,"isWidthMeasured"],[302,134,253,45],[302,138,254,16],[302,142,254,16,"areDimensionsNotEqual"],[302,161,254,37],[302,162,254,37,"areDimensionsNotEqual"],[302,183,254,37],[302,185,254,38,"storedLayout"],[302,197,254,50],[302,198,254,51,"height"],[302,204,254,57],[302,206,254,59,"dimensions"],[302,216,254,69],[302,217,254,70,"height"],[302,223,254,76],[302,224,254,77],[302,228,255,16],[302,232,255,16,"areDimensionsNotEqual"],[302,251,255,37],[302,252,255,37,"areDimensionsNotEqual"],[302,273,255,37],[302,275,255,38,"storedLayout"],[302,287,255,50],[302,288,255,51,"width"],[302,293,255,56],[302,295,255,58,"dimensions"],[302,305,255,68],[302,306,255,69,"width"],[302,311,255,74],[302,312,255,75],[302,314,255,77],[303,12,256,16,"minRecomputeIndex"],[303,29,256,33],[303,32,256,36,"Math"],[303,36,256,40],[303,37,256,41,"min"],[303,40,256,44],[303,41,256,45,"minRecomputeIndex"],[303,58,256,62],[303,60,256,64,"index"],[303,65,256,69],[303,66,256,70],[304,12,257,16],[304,16,257,20],[304,17,257,21,"currentMaxIndexWithChangedLayout"],[304,49,257,53],[304,52,257,56,"Math"],[304,56,257,60],[304,57,257,61,"max"],[304,60,257,64],[304,61,257,65],[304,65,257,69],[304,66,257,70,"currentMaxIndexWithChangedLayout"],[304,98,257,102],[304,100,257,104,"index"],[304,105,257,109],[304,106,257,110],[305,10,258,12],[306,10,259,12],[306,14,259,16],[306,15,259,17,"heightAverageWindow"],[306,34,259,36],[306,35,259,37,"addValue"],[306,43,259,45],[306,44,259,46,"dimensions"],[306,54,259,56],[306,55,259,57,"height"],[306,61,259,63],[306,63,259,65],[306,67,259,69],[306,68,259,70,"getItemType"],[306,79,259,81],[306,80,259,82,"index"],[306,85,259,87],[306,86,259,88],[306,87,259,89],[307,10,260,12],[307,14,260,16],[307,15,260,17,"widthAverageWindow"],[307,33,260,35],[307,34,260,36,"addValue"],[307,42,260,44],[307,43,260,45,"dimensions"],[307,53,260,55],[307,54,260,56,"width"],[307,59,260,61],[307,61,260,63],[307,65,260,67],[307,66,260,68,"getItemType"],[307,77,260,79],[307,78,260,80,"index"],[307,83,260,85],[307,84,260,86],[307,85,260,87],[308,8,261,8],[309,8,262,8],[309,15,262,15,"minRecomputeIndex"],[309,32,262,32],[310,6,263,4],[311,4,263,5],[312,6,263,5,"key"],[312,9,263,5],[313,6,263,5,"value"],[313,11,263,5],[313,13,264,4],[313,22,264,4,"computeMinIndexWithChangedSpan"],[313,52,264,34,"computeMinIndexWithChangedSpan"],[313,53,264,35,"layoutInfo"],[313,63,264,45],[313,65,264,47],[314,8,265,8],[314,12,265,12,"minIndexWithChangedSpan"],[314,35,265,35],[314,38,265,38,"Number"],[314,44,265,44],[314,45,265,45,"MAX_VALUE"],[314,54,265,54],[315,8,266,8],[315,13,266,13],[315,17,266,19,"info"],[315,21,266,23],[315,25,266,27,"layoutInfo"],[315,35,266,37],[315,37,266,39],[316,10,267,12],[316,14,267,20,"index"],[316,19,267,25],[316,22,267,30,"info"],[316,26,267,34],[316,27,267,20,"index"],[316,32,267,25],[317,10,268,12],[317,14,268,18,"span"],[317,18,268,22],[317,21,268,25],[317,25,268,29],[317,26,268,30,"getSpan"],[317,33,268,37],[317,34,268,38,"index"],[317,39,268,43],[317,41,268,45],[317,45,268,49],[317,46,268,50],[318,10,269,12],[318,14,269,18,"storedSpan"],[318,24,269,28],[318,27,269,31],[318,31,269,35],[318,32,269,36,"spanTracker"],[318,43,269,47],[318,44,269,48,"index"],[318,49,269,53],[318,50,269,54],[319,10,270,12],[319,14,270,16,"span"],[319,18,270,20],[319,23,270,25,"storedSpan"],[319,33,270,35],[319,35,270,37],[320,12,271,16],[320,16,271,20],[320,17,271,21,"spanTracker"],[320,28,271,32],[320,29,271,33,"index"],[320,34,271,38],[320,35,271,39],[320,38,271,42,"span"],[320,42,271,46],[321,12,272,16],[321,16,272,20],[321,17,272,21,"handleSpanChange"],[321,33,272,37],[321,34,272,38,"index"],[321,39,272,43],[321,40,272,44],[322,12,273,16,"minIndexWithChangedSpan"],[322,35,273,39],[322,38,273,42,"Math"],[322,42,273,46],[322,43,273,47,"min"],[322,46,273,50],[322,47,273,51,"minIndexWithChangedSpan"],[322,70,273,74],[322,72,273,76,"index"],[322,77,273,81],[322,78,273,82],[323,10,274,12],[324,8,275,8],[325,8,276,8],[325,15,276,15,"minIndexWithChangedSpan"],[325,38,276,38],[326,6,277,4],[327,4,277,5],[328,2,277,5],[329,0,277,5],[329,3]],"functionMap":{"names":["<global>","RVLayoutManager","RVLayoutManager#constructor","RVLayoutManager#getEstimatedWidth","RVLayoutManager#getEstimatedHeight","RVLayoutManager#isHorizontal","RVLayoutManager#getWindowsSize","RVLayoutManager#getVisibleLayouts","RVLayoutManager#deleteLayout","indices.sort$argument_0","RVLayoutManager#modifyLayout","RVLayoutManager#getLayout","RVLayoutManager#updateLayoutParams","RVLayoutManager#getLayoutCount","RVLayoutManager#getSpan","RVLayoutManager#handleSpanChange","RVLayoutManager#getMaxRecomputeIndex","RVLayoutManager#getMinRecomputeIndex","RVLayoutManager#_recomputeLayouts","RVLayoutManager#computeEstimatesAndMinMaxChangedLayout","RVLayoutManager#computeMinIndexWithChangedSpan"],"mappings":"AAA;OCW;ICC;KD8B;IEM;KFE;IGM;KHE;IIK;KJE;IKK;KLE;IMQ;KNU;IOK;qBCE,2BD;KPQ;ISM;KT4B;IUO;KVmB;IWK;KXO;IYC;KZE;IaU;KbS;IcK,2Bd;IeM;KfG;IgBM;KhBE;IiBC;KjBgB;IkBM;KlBkB;ImBC;KnBa;CDC"},"hasCjsExports":false},"type":"js/module"}]}