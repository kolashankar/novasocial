{"dependencies":[{"name":"expo-constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":39,"index":39}}],"key":"pPv5KzfRT0rL6NCr7G9k0o4d1W8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"notificationsApi\", {\n    enumerable: true,\n    get: function () {\n      return notificationsApi;\n    }\n  });\n  var _expoConstants = require(_dependencyMap[0], \"expo-constants\");\n  var Constants = _interopDefault(_expoConstants);\n  const API_BASE_URL = Constants.default.expoConfig?.extra?.backendUrl || process.env.EXPO_PUBLIC_BACKEND_URL;\n  class NotificationsApi {\n    getHeaders(token) {\n      return {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      };\n    }\n    async getNotifications(token, skip = 0, limit = 50) {\n      const response = await fetch(`${API_BASE_URL}/api/notifications?skip=${skip}&limit=${limit}`, {\n        method: 'GET',\n        headers: this.getHeaders(token)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch notifications');\n      }\n      return response.json();\n    }\n    async markAsRead(notificationId, token) {\n      const response = await fetch(`${API_BASE_URL}/api/notifications/${notificationId}/read`, {\n        method: 'PUT',\n        headers: this.getHeaders(token)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to mark notification as read');\n      }\n    }\n    async markAllAsRead(token) {\n      const response = await fetch(`${API_BASE_URL}/api/notifications/read-all`, {\n        method: 'PUT',\n        headers: this.getHeaders(token)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to mark all notifications as read');\n      }\n    }\n    async getUnreadCount(token) {\n      const notifications = await this.getNotifications(token, 0, 100);\n      return notifications.filter(n => !n.isRead).length;\n    }\n  }\n  const notificationsApi = new NotificationsApi();\n});","lineCount":62,"map":[[12,2,86,0,"Object"],[12,8,86,0],[12,9,86,0,"defineProperty"],[12,23,86,0],[12,24,86,0,"exports"],[12,31,86,0],[13,4,86,0,"enumerable"],[13,14,86,0],[14,4,86,0,"get"],[14,7,86,0],[14,18,86,0,"get"],[14,19,86,0],[15,6,86,0],[15,13,86,0,"notificationsApi"],[15,29,86,0],[16,4,86,0],[17,2,86,0],[18,2,1,0],[18,6,1,0,"_expoConstants"],[18,20,1,0],[18,23,1,0,"require"],[18,30,1,0],[18,31,1,0,"_dependencyMap"],[18,45,1,0],[19,2,1,0],[19,6,1,0,"Constants"],[19,15,1,0],[19,18,1,0,"_interopDefault"],[19,33,1,0],[19,34,1,0,"_expoConstants"],[19,48,1,0],[20,2,3,0],[20,8,3,6,"API_BASE_URL"],[20,20,3,18],[20,23,3,21,"Constants"],[20,32,3,30],[20,33,3,30,"default"],[20,40,3,30],[20,41,3,31,"expoConfig"],[20,51,3,41],[20,53,3,43,"extra"],[20,58,3,48],[20,60,3,50,"backendUrl"],[20,70,3,60],[20,74,3,64,"process"],[20,81,3,71],[20,82,3,72,"env"],[20,85,3,75],[20,86,3,76,"EXPO_PUBLIC_BACKEND_URL"],[20,109,3,99],[21,2,28,0],[21,8,28,6,"NotificationsApi"],[21,24,28,22],[21,25,28,23],[22,4,29,10,"getHeaders"],[22,14,29,20,"getHeaders"],[22,15,29,21,"token"],[22,20,29,34],[22,22,29,36],[23,6,30,4],[23,13,30,11],[24,8,31,6],[24,22,31,20],[24,24,31,22],[24,42,31,40],[25,8,32,6],[25,23,32,21],[25,25,32,23],[25,35,32,33,"token"],[25,40,32,38],[26,6,33,4],[26,7,33,5],[27,4,34,2],[28,4,36,2],[28,10,36,8,"getNotifications"],[28,26,36,24,"getNotifications"],[28,27,36,25,"token"],[28,32,36,38],[28,34,36,40,"skip"],[28,38,36,52],[28,41,36,55],[28,42,36,56],[28,44,36,58,"limit"],[28,49,36,71],[28,52,36,74],[28,54,36,76],[28,56,36,103],[29,6,37,4],[29,12,37,10,"response"],[29,20,37,18],[29,23,37,21],[29,29,37,27,"fetch"],[29,34,37,32],[29,35,38,6],[29,38,38,9,"API_BASE_URL"],[29,50,38,21],[29,77,38,48,"skip"],[29,81,38,52],[29,91,38,62,"limit"],[29,96,38,67],[29,98,38,69],[29,100,39,6],[30,8,40,8,"method"],[30,14,40,14],[30,16,40,16],[30,21,40,21],[31,8,41,8,"headers"],[31,15,41,15],[31,17,41,17],[31,21,41,21],[31,22,41,22,"getHeaders"],[31,32,41,32],[31,33,41,33,"token"],[31,38,41,38],[32,6,42,6],[32,7,43,4],[32,8,43,5],[33,6,45,4],[33,10,45,8],[33,11,45,9,"response"],[33,19,45,17],[33,20,45,18,"ok"],[33,22,45,20],[33,24,45,22],[34,8,46,6],[34,14,46,12],[34,18,46,16,"Error"],[34,23,46,21],[34,24,46,22],[34,55,46,53],[34,56,46,54],[35,6,47,4],[36,6,49,4],[36,13,49,11,"response"],[36,21,49,19],[36,22,49,20,"json"],[36,26,49,24],[36,27,49,25],[36,28,49,26],[37,4,50,2],[38,4,52,2],[38,10,52,8,"markAsRead"],[38,20,52,18,"markAsRead"],[38,21,52,19,"notificationId"],[38,35,52,41],[38,37,52,43,"token"],[38,42,52,56],[38,44,52,73],[39,6,53,4],[39,12,53,10,"response"],[39,20,53,18],[39,23,53,21],[39,29,53,27,"fetch"],[39,34,53,32],[39,35,54,6],[39,38,54,9,"API_BASE_URL"],[39,50,54,21],[39,72,54,43,"notificationId"],[39,86,54,57],[39,93,54,64],[39,95,55,6],[40,8,56,8,"method"],[40,14,56,14],[40,16,56,16],[40,21,56,21],[41,8,57,8,"headers"],[41,15,57,15],[41,17,57,17],[41,21,57,21],[41,22,57,22,"getHeaders"],[41,32,57,32],[41,33,57,33,"token"],[41,38,57,38],[42,6,58,6],[42,7,59,4],[42,8,59,5],[43,6,61,4],[43,10,61,8],[43,11,61,9,"response"],[43,19,61,17],[43,20,61,18,"ok"],[43,22,61,20],[43,24,61,22],[44,8,62,6],[44,14,62,12],[44,18,62,16,"Error"],[44,23,62,21],[44,24,62,22],[44,61,62,59],[44,62,62,60],[45,6,63,4],[46,4,64,2],[47,4,66,2],[47,10,66,8,"markAllAsRead"],[47,23,66,21,"markAllAsRead"],[47,24,66,22,"token"],[47,29,66,35],[47,31,66,52],[48,6,67,4],[48,12,67,10,"response"],[48,20,67,18],[48,23,67,21],[48,29,67,27,"fetch"],[48,34,67,32],[48,35,68,6],[48,38,68,9,"API_BASE_URL"],[48,50,68,21],[48,79,68,50],[48,81,69,6],[49,8,70,8,"method"],[49,14,70,14],[49,16,70,16],[49,21,70,21],[50,8,71,8,"headers"],[50,15,71,15],[50,17,71,17],[50,21,71,21],[50,22,71,22,"getHeaders"],[50,32,71,32],[50,33,71,33,"token"],[50,38,71,38],[51,6,72,6],[51,7,73,4],[51,8,73,5],[52,6,75,4],[52,10,75,8],[52,11,75,9,"response"],[52,19,75,17],[52,20,75,18,"ok"],[52,22,75,20],[52,24,75,22],[53,8,76,6],[53,14,76,12],[53,18,76,16,"Error"],[53,23,76,21],[53,24,76,22],[53,66,76,64],[53,67,76,65],[54,6,77,4],[55,4,78,2],[56,4,80,2],[56,10,80,8,"getUnreadCount"],[56,24,80,22,"getUnreadCount"],[56,25,80,23,"token"],[56,30,80,36],[56,32,80,55],[57,6,81,4],[57,12,81,10,"notifications"],[57,25,81,23],[57,28,81,26],[57,34,81,32],[57,38,81,36],[57,39,81,37,"getNotifications"],[57,55,81,53],[57,56,81,54,"token"],[57,61,81,59],[57,63,81,61],[57,64,81,62],[57,66,81,64],[57,69,81,67],[57,70,81,68],[58,6,82,4],[58,13,82,11,"notifications"],[58,26,82,24],[58,27,82,25,"filter"],[58,33,82,31],[58,34,82,32,"n"],[58,35,82,33],[58,39,82,37],[58,40,82,38,"n"],[58,41,82,39],[58,42,82,40,"isRead"],[58,48,82,46],[58,49,82,47],[58,50,82,48,"length"],[58,56,82,54],[59,4,83,2],[60,2,84,0],[61,2,86,7],[61,8,86,13,"notificationsApi"],[61,24,86,29],[61,27,86,32],[61,31,86,36,"NotificationsApi"],[61,47,86,52],[61,48,86,53],[61,49,86,54],[62,0,86,55],[62,3]],"functionMap":{"names":["<global>","NotificationsApi","NotificationsApi#getHeaders","NotificationsApi#getNotifications","NotificationsApi#markAsRead","NotificationsApi#markAllAsRead","NotificationsApi#getUnreadCount","notifications.filter$argument_0"],"mappings":"AAA;AC2B;ECC;GDK;EEE;GFc;EGE;GHY;EIE;GJY;EKE;gCCE,cD;GLC;CDC"},"hasCjsExports":false},"type":"js/module"}]}