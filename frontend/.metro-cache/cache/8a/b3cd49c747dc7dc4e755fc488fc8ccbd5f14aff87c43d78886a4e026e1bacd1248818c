{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/callSuper","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"378KbBHdmndC3iMXZ2Ix8oB3LeE=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/superPropGet","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"b4Lel0pEiTM8mvZZX/d05uR+OmU=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA=","exportNames":["*"],"imports":1}},{"name":"./LayoutManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"8kHEUlKQMmxShjK4DMjntIDDVoM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"RVMasonryLayoutManagerImpl\", {\n    enumerable: true,\n    get: function () {\n      return RVMasonryLayoutManagerImpl;\n    }\n  });\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _babelRuntimeHelpersCallSuper = require(_dependencyMap[2], \"@babel/runtime/helpers/callSuper\");\n  var _callSuper = _interopDefault(_babelRuntimeHelpersCallSuper);\n  var _babelRuntimeHelpersSuperPropGet = require(_dependencyMap[3], \"@babel/runtime/helpers/superPropGet\");\n  var _superPropGet = _interopDefault(_babelRuntimeHelpersSuperPropGet);\n  var _babelRuntimeHelpersInherits = require(_dependencyMap[4], \"@babel/runtime/helpers/inherits\");\n  var _inherits = _interopDefault(_babelRuntimeHelpersInherits);\n  var _LayoutManager = require(_dependencyMap[5], \"./LayoutManager\");\n  /**\n   * MasonryLayoutManager implementation that arranges items in a masonry/pinterest-style layout.\n   * Items are placed in columns, with support for items spanning multiple columns.\n   * Can optimize item placement to minimize column height differences.\n   */\n  var RVMasonryLayoutManagerImpl = /*#__PURE__*/function (_RVLayoutManager) {\n    function RVMasonryLayoutManagerImpl(params, previousLayoutManager) {\n      var _this;\n      (0, _classCallCheck.default)(this, RVMasonryLayoutManagerImpl);\n      var _a;\n      _this = (0, _callSuper.default)(this, RVMasonryLayoutManagerImpl, [params, previousLayoutManager]);\n      /** Current column index for sequential placement */\n      _this.currentColumn = 0;\n      /** If there's a span change for masonry layout, we need to recompute all the widths */\n      _this.fullRelayoutRequired = false;\n      _this.boundedSize = params.windowSize.width;\n      _this.optimizeItemArrangement = params.optimizeItemArrangement;\n      _this.columnHeights = (_a = _this.columnHeights) !== null && _a !== void 0 ? _a : Array(_this.maxColumns).fill(0);\n      return _this;\n    }\n    /**\n     * Updates layout parameters and triggers recomputation if necessary.\n     * @param params New layout parameters\n     */\n    (0, _inherits.default)(RVMasonryLayoutManagerImpl, _RVLayoutManager);\n    return (0, _createClass.default)(RVMasonryLayoutManagerImpl, [{\n      key: \"updateLayoutParams\",\n      value: function updateLayoutParams(params) {\n        var prevMaxColumns = this.maxColumns;\n        var prevOptimizeItemArrangement = this.optimizeItemArrangement;\n        (0, _superPropGet.default)(RVMasonryLayoutManagerImpl, \"updateLayoutParams\", this, 3)([params]);\n        if (this.boundedSize !== params.windowSize.width || prevMaxColumns !== params.maxColumns || prevOptimizeItemArrangement !== params.optimizeItemArrangement) {\n          this.boundedSize = params.windowSize.width;\n          if (this.layouts.length > 0) {\n            // console.log(\"-----> recomputeLayouts\");\n            // update all widths\n            this.updateAllWidths();\n            this.recomputeLayouts(0, this.layouts.length - 1);\n            this.requiresRepaint = true;\n          }\n        }\n      }\n      /**\n       * Processes layout information for items, updating their dimensions.\n       * @param layoutInfo Array of layout information for items (real measurements)\n       * @param itemCount Total number of items in the list\n       */\n    }, {\n      key: \"processLayoutInfo\",\n      value: function processLayoutInfo(layoutInfo, itemCount) {\n        // Update layout information\n        for (var info of layoutInfo) {\n          var index = info.index,\n            dimensions = info.dimensions;\n          var layout = this.layouts[index];\n          layout.height = dimensions.height;\n          layout.isHeightMeasured = true;\n          layout.isWidthMeasured = true;\n          this.layouts[index] = layout;\n        }\n        // TODO: Can be optimized\n        if (this.fullRelayoutRequired) {\n          this.updateAllWidths();\n          this.fullRelayoutRequired = false;\n          return 0;\n        }\n      }\n      /**\n       * Estimates layout dimensions for an item at the given index.\n       * Can be called by base class if estimate is required.\n       * @param index Index of the item to estimate layout for\n       */\n    }, {\n      key: \"estimateLayout\",\n      value: function estimateLayout(index) {\n        var layout = this.layouts[index];\n        // Set width based on columns and span\n        layout.width = this.getWidth(index);\n        layout.height = this.getEstimatedHeight(index);\n        layout.isWidthMeasured = true;\n        layout.enforcedWidth = true;\n      }\n      /**\n       * Handles span change for an item.\n       * @param index Index of the item\n       */\n    }, {\n      key: \"handleSpanChange\",\n      value: function handleSpanChange(index) {\n        this.fullRelayoutRequired = true;\n      }\n      /**\n       * Returns the total size of the layout area.\n       * @returns RVDimension containing width and height of the layout\n       */\n    }, {\n      key: \"getLayoutSize\",\n      value: function getLayoutSize() {\n        if (this.layouts.length === 0) return {\n          width: 0,\n          height: 0\n        };\n        // Find the tallest column\n        var maxHeight = Math.max(...this.columnHeights);\n        return {\n          width: this.boundedSize,\n          height: maxHeight\n        };\n      }\n      /**\n       * Recomputes layouts for items in the given range.\n       * Uses different placement strategies based on optimization settings.\n       * @param startIndex Starting index of items to recompute\n       * @param endIndex Ending index of items to recompute\n       */\n    }, {\n      key: \"recomputeLayouts\",\n      value: function recomputeLayouts(startIndex, endIndex) {\n        // Reset column heights if starting from the beginning\n        if (startIndex === 0) {\n          this.columnHeights = Array(this.maxColumns).fill(0);\n          this.currentColumn = 0;\n        } else {\n          // Find the y-position of the first item to recompute\n          // and adjust column heights accordingly\n          this.updateColumnHeightsToIndex(startIndex);\n        }\n        var itemCount = this.layouts.length;\n        for (var i = startIndex; i < itemCount; i++) {\n          var layout = this.getLayout(i);\n          // Skip tracking span because we're not changing widths\n          var span = this.getSpan(i, true);\n          if (this.optimizeItemArrangement) {\n            if (span === 1) {\n              // For single column items, place in the shortest column\n              this.placeSingleColumnItem(layout);\n            } else {\n              // For multi-column items, find the best position\n              this.placeOptimizedMultiColumnItem(layout, span);\n            }\n          } else {\n            // No optimization - place items sequentially\n            this.placeItemSequentially(layout, span);\n          }\n        }\n      }\n      /**\n       * Calculates the width of an item based on its span.\n       * @param index Index of the item\n       * @returns Width of the item\n       */\n    }, {\n      key: \"getWidth\",\n      value: function getWidth(index) {\n        return this.boundedSize / this.maxColumns * this.getSpan(index);\n      }\n    }, {\n      key: \"updateAllWidths\",\n      value: function updateAllWidths() {\n        for (var i = 0; i < this.layouts.length; i++) {\n          this.layouts[i].width = this.getWidth(i);\n          this.layouts[i].minHeight = undefined;\n        }\n      }\n      /**\n       * Places an item sequentially in the next available position.\n       * @param layout Layout information for the item\n       * @param span Number of columns the item spans\n       */\n    }, {\n      key: \"placeItemSequentially\",\n      value: function placeItemSequentially(layout, span) {\n        // Check if the item can fit in the current row\n        if (this.currentColumn + span > this.maxColumns) {\n          // Move to the next row\n          this.currentColumn = 0;\n        }\n        // Find the maximum height of the columns this item will span\n        var maxHeight = this.columnHeights[this.currentColumn];\n        for (var col = this.currentColumn + 1; col < this.currentColumn + span; col++) {\n          if (col < this.maxColumns) {\n            maxHeight = Math.max(maxHeight, this.columnHeights[col]);\n          }\n        }\n        // Place the item\n        layout.x = this.boundedSize / this.maxColumns * this.currentColumn;\n        layout.y = maxHeight;\n        // Update column heights\n        for (var _col = this.currentColumn; _col < this.currentColumn + span; _col++) {\n          if (_col < this.maxColumns) {\n            this.columnHeights[_col] = maxHeight + layout.height;\n          }\n        }\n        // Move to the next column\n        this.currentColumn += span;\n        if (this.currentColumn >= this.maxColumns) {\n          this.currentColumn = 0;\n        }\n      }\n      /**\n       * Places a single-column item in the shortest available column.\n       * @param layout Layout information for the item\n       */\n    }, {\n      key: \"placeSingleColumnItem\",\n      value: function placeSingleColumnItem(layout) {\n        // Find the shortest column\n        var shortestColumnIndex = 0;\n        var minHeight = this.columnHeights[0];\n        for (var i = 1; i < this.maxColumns; i++) {\n          if (this.columnHeights[i] < minHeight) {\n            minHeight = this.columnHeights[i];\n            shortestColumnIndex = i;\n          }\n        }\n        // Place the item in the shortest column\n        layout.x = this.boundedSize / this.maxColumns * shortestColumnIndex;\n        layout.y = this.columnHeights[shortestColumnIndex];\n        // Update the column height\n        this.columnHeights[shortestColumnIndex] += layout.height;\n      }\n      /**\n       * Places a multi-column item in the position that minimizes total column heights.\n       * @param layout Layout information for the item\n       * @param span Number of columns the item spans\n       */\n    }, {\n      key: \"placeOptimizedMultiColumnItem\",\n      value: function placeOptimizedMultiColumnItem(layout, span) {\n        var bestStartColumn = 0;\n        var minTotalHeight = Number.MAX_VALUE;\n        // Try all possible positions\n        for (var startCol = 0; startCol <= this.maxColumns - span; startCol++) {\n          // Find the maximum height among the columns this item would span\n          var _maxHeight = this.columnHeights[startCol];\n          for (var col = startCol + 1; col < startCol + span; col++) {\n            _maxHeight = Math.max(_maxHeight, this.columnHeights[col]);\n          }\n          // Calculate the total height after placing the item\n          var totalHeight = 0;\n          for (var _col2 = 0; _col2 < this.maxColumns; _col2++) {\n            if (_col2 >= startCol && _col2 < startCol + span) {\n              totalHeight += _maxHeight + layout.height;\n            } else {\n              totalHeight += this.columnHeights[_col2];\n            }\n          }\n          // Update best position if this is better\n          if (totalHeight < minTotalHeight) {\n            minTotalHeight = totalHeight;\n            bestStartColumn = startCol;\n          }\n        }\n        // Place the item at the best position\n        var maxHeight = Math.max(...this.columnHeights.slice(bestStartColumn, bestStartColumn + span));\n        layout.x = this.boundedSize / this.maxColumns * bestStartColumn;\n        layout.y = maxHeight;\n        // Update column heights\n        for (var _col3 = bestStartColumn; _col3 < bestStartColumn + span; _col3++) {\n          this.columnHeights[_col3] = maxHeight + layout.height;\n        }\n      }\n      /**\n       * Updates column heights up to a given index by recalculating item positions.\n       * @param index Index to update column heights up to\n       */\n    }, {\n      key: \"updateColumnHeightsToIndex\",\n      value: function updateColumnHeightsToIndex(index) {\n        // Reset column heights\n        this.columnHeights = Array(this.maxColumns).fill(0);\n        this.currentColumn = 0;\n        // Recalculate column heights up to the given index\n        for (var i = 0; i < index; i++) {\n          var layout = this.layouts[i];\n          var itemWidth = layout.width;\n          var columnWidth = this.boundedSize / this.maxColumns;\n          var span = Math.round(itemWidth / columnWidth);\n          // Find which columns this item spans\n          var startColumn = Math.round(layout.x / columnWidth);\n          var endColumn = Math.min(startColumn + span, this.maxColumns);\n          // Update column heights\n          for (var col = startColumn; col < endColumn; col++) {\n            this.columnHeights[col] = Math.max(this.columnHeights[col], layout.y + layout.height);\n          }\n          // Update current column for non-optimized layout\n          if (!this.optimizeItemArrangement) {\n            this.currentColumn = (startColumn + span) % this.maxColumns;\n          }\n        }\n      }\n    }]);\n  }(_LayoutManager.RVLayoutManager);\n});","lineCount":322,"map":[[12,2,7,0,"Object"],[12,8,7,0],[12,9,7,0,"defineProperty"],[12,23,7,0],[12,24,7,0,"exports"],[12,31,7,0],[13,4,7,0,"enumerable"],[13,14,7,0],[14,4,7,0,"get"],[14,7,7,0],[14,18,7,0,"get"],[14,19,7,0],[15,6,7,0],[15,13,7,0,"RVMasonryLayoutManagerImpl"],[15,39,7,0],[16,4,7,0],[17,2,7,0],[18,2,268,1],[18,6,268,1,"_babelRuntimeHelpersClassCallCheck"],[18,40,268,1],[18,43,268,1,"require"],[18,50,268,1],[18,51,268,1,"_dependencyMap"],[18,65,268,1],[19,2,268,1],[19,6,268,1,"_classCallCheck"],[19,21,268,1],[19,24,268,1,"_interopDefault"],[19,39,268,1],[19,40,268,1,"_babelRuntimeHelpersClassCallCheck"],[19,74,268,1],[20,2,268,1],[20,6,268,1,"_babelRuntimeHelpersCreateClass"],[20,37,268,1],[20,40,268,1,"require"],[20,47,268,1],[20,48,268,1,"_dependencyMap"],[20,62,268,1],[21,2,268,1],[21,6,268,1,"_createClass"],[21,18,268,1],[21,21,268,1,"_interopDefault"],[21,36,268,1],[21,37,268,1,"_babelRuntimeHelpersCreateClass"],[21,68,268,1],[22,2,268,1],[22,6,268,1,"_babelRuntimeHelpersCallSuper"],[22,35,268,1],[22,38,268,1,"require"],[22,45,268,1],[22,46,268,1,"_dependencyMap"],[22,60,268,1],[23,2,268,1],[23,6,268,1,"_callSuper"],[23,16,268,1],[23,19,268,1,"_interopDefault"],[23,34,268,1],[23,35,268,1,"_babelRuntimeHelpersCallSuper"],[23,64,268,1],[24,2,268,1],[24,6,268,1,"_babelRuntimeHelpersSuperPropGet"],[24,38,268,1],[24,41,268,1,"require"],[24,48,268,1],[24,49,268,1,"_dependencyMap"],[24,63,268,1],[25,2,268,1],[25,6,268,1,"_superPropGet"],[25,19,268,1],[25,22,268,1,"_interopDefault"],[25,37,268,1],[25,38,268,1,"_babelRuntimeHelpersSuperPropGet"],[25,70,268,1],[26,2,268,1],[26,6,268,1,"_babelRuntimeHelpersInherits"],[26,34,268,1],[26,37,268,1,"require"],[26,44,268,1],[26,45,268,1,"_dependencyMap"],[26,59,268,1],[27,2,268,1],[27,6,268,1,"_inherits"],[27,15,268,1],[27,18,268,1,"_interopDefault"],[27,33,268,1],[27,34,268,1,"_babelRuntimeHelpersInherits"],[27,62,268,1],[28,2,1,0],[28,6,1,0,"_LayoutManager"],[28,20,1,0],[28,23,1,0,"require"],[28,30,1,0],[28,31,1,0,"_dependencyMap"],[28,45,1,0],[29,2,2,0],[30,0,3,0],[31,0,4,0],[32,0,5,0],[33,0,6,0],[34,2,2,0],[34,6,7,13,"RVMasonryLayoutManagerImpl"],[34,32,7,39],[34,58,7,39,"_RVLayoutManager"],[34,74,7,39],[35,4,8,4],[35,13,8,4,"RVMasonryLayoutManagerImpl"],[35,40,8,16,"params"],[35,46,8,22],[35,48,8,24,"previousLayoutManager"],[35,69,8,45],[35,71,8,47],[36,6,8,47],[36,10,8,47,"_this"],[36,15,8,47],[37,6,8,47],[37,10,8,47,"_classCallCheck"],[37,25,8,47],[37,26,8,47,"default"],[37,33,8,47],[37,41,8,47,"RVMasonryLayoutManagerImpl"],[37,67,8,47],[38,6,9,8],[38,10,9,12,"_a"],[38,12,9,14],[39,6,10,8,"_this"],[39,11,10,8],[39,18,10,8,"_callSuper"],[39,28,10,8],[39,29,10,8,"default"],[39,36,10,8],[39,44,10,8,"RVMasonryLayoutManagerImpl"],[39,70,10,8],[39,73,10,14,"params"],[39,79,10,20],[39,81,10,22,"previousLayoutManager"],[39,102,10,43],[40,6,11,8],[41,6,12,8,"_this"],[41,11,12,8],[41,12,12,13,"currentColumn"],[41,25,12,26],[41,28,12,29],[41,29,12,30],[42,6,13,8],[43,6,14,8,"_this"],[43,11,14,8],[43,12,14,13,"fullRelayoutRequired"],[43,32,14,33],[43,35,14,36],[43,40,14,41],[44,6,15,8,"_this"],[44,11,15,8],[44,12,15,13,"boundedSize"],[44,23,15,24],[44,26,15,27,"params"],[44,32,15,33],[44,33,15,34,"windowSize"],[44,43,15,44],[44,44,15,45,"width"],[44,49,15,50],[45,6,16,8,"_this"],[45,11,16,8],[45,12,16,13,"optimizeItemArrangement"],[45,35,16,36],[45,38,16,39,"params"],[45,44,16,45],[45,45,16,46,"optimizeItemArrangement"],[45,68,16,69],[46,6,17,8,"_this"],[46,11,17,8],[46,12,17,13,"columnHeights"],[46,25,17,26],[46,28,17,29],[46,29,17,30,"_a"],[46,31,17,32],[46,34,17,35,"_this"],[46,39,17,35],[46,40,17,40,"columnHeights"],[46,53,17,53],[46,59,17,59],[46,63,17,63],[46,67,17,67,"_a"],[46,69,17,69],[46,74,17,74],[46,79,17,79],[46,80,17,80],[46,83,17,83,"_a"],[46,85,17,85],[46,88,17,88,"Array"],[46,93,17,93],[46,94,17,94,"_this"],[46,99,17,94],[46,100,17,99,"maxColumns"],[46,110,17,109],[46,111,17,110],[46,112,17,111,"fill"],[46,116,17,115],[46,117,17,116],[46,118,17,117],[46,119,17,118],[47,6,17,119],[47,13,17,119,"_this"],[47,18,17,119],[48,4,18,4],[49,4,19,4],[50,0,20,0],[51,0,21,0],[52,0,22,0],[53,4,19,4],[53,8,19,4,"_inherits"],[53,17,19,4],[53,18,19,4,"default"],[53,25,19,4],[53,27,19,4,"RVMasonryLayoutManagerImpl"],[53,53,19,4],[53,55,19,4,"_RVLayoutManager"],[53,71,19,4],[54,4,19,4],[54,15,19,4,"_createClass"],[54,27,19,4],[54,28,19,4,"default"],[54,35,19,4],[54,37,19,4,"RVMasonryLayoutManagerImpl"],[54,63,19,4],[55,6,19,4,"key"],[55,9,19,4],[56,6,19,4,"value"],[56,11,19,4],[56,13,23,4],[56,22,23,4,"updateLayoutParams"],[56,40,23,22,"updateLayoutParams"],[56,41,23,23,"params"],[56,47,23,29],[56,49,23,31],[57,8,24,8],[57,12,24,14,"prevMaxColumns"],[57,26,24,28],[57,29,24,31],[57,33,24,35],[57,34,24,36,"maxColumns"],[57,44,24,46],[58,8,25,8],[58,12,25,14,"prevOptimizeItemArrangement"],[58,39,25,41],[58,42,25,44],[58,46,25,48],[58,47,25,49,"optimizeItemArrangement"],[58,70,25,72],[59,8,26,8],[59,12,26,8,"_superPropGet"],[59,25,26,8],[59,26,26,8,"default"],[59,33,26,8],[59,35,26,8,"RVMasonryLayoutManagerImpl"],[59,61,26,8],[59,95,26,33,"params"],[59,101,26,39],[60,8,27,8],[60,12,27,12],[60,16,27,16],[60,17,27,17,"boundedSize"],[60,28,27,28],[60,33,27,33,"params"],[60,39,27,39],[60,40,27,40,"windowSize"],[60,50,27,50],[60,51,27,51,"width"],[60,56,27,56],[60,60,28,12,"prevMaxColumns"],[60,74,28,26],[60,79,28,31,"params"],[60,85,28,37],[60,86,28,38,"maxColumns"],[60,96,28,48],[60,100,29,12,"prevOptimizeItemArrangement"],[60,127,29,39],[60,132,29,44,"params"],[60,138,29,50],[60,139,29,51,"optimizeItemArrangement"],[60,162,29,74],[60,164,29,76],[61,10,30,12],[61,14,30,16],[61,15,30,17,"boundedSize"],[61,26,30,28],[61,29,30,31,"params"],[61,35,30,37],[61,36,30,38,"windowSize"],[61,46,30,48],[61,47,30,49,"width"],[61,52,30,54],[62,10,31,12],[62,14,31,16],[62,18,31,20],[62,19,31,21,"layouts"],[62,26,31,28],[62,27,31,29,"length"],[62,33,31,35],[62,36,31,38],[62,37,31,39],[62,39,31,41],[63,12,32,16],[64,12,33,16],[65,12,34,16],[65,16,34,20],[65,17,34,21,"updateAllWidths"],[65,32,34,36],[65,33,34,37],[65,34,34,38],[66,12,35,16],[66,16,35,20],[66,17,35,21,"recomputeLayouts"],[66,33,35,37],[66,34,35,38],[66,35,35,39],[66,37,35,41],[66,41,35,45],[66,42,35,46,"layouts"],[66,49,35,53],[66,50,35,54,"length"],[66,56,35,60],[66,59,35,63],[66,60,35,64],[66,61,35,65],[67,12,36,16],[67,16,36,20],[67,17,36,21,"requiresRepaint"],[67,32,36,36],[67,35,36,39],[67,39,36,43],[68,10,37,12],[69,8,38,8],[70,6,39,4],[71,6,40,4],[72,0,41,0],[73,0,42,0],[74,0,43,0],[75,0,44,0],[76,4,40,4],[77,6,40,4,"key"],[77,9,40,4],[78,6,40,4,"value"],[78,11,40,4],[78,13,45,4],[78,22,45,4,"processLayoutInfo"],[78,39,45,21,"processLayoutInfo"],[78,40,45,22,"layoutInfo"],[78,50,45,32],[78,52,45,34,"itemCount"],[78,61,45,43],[78,63,45,45],[79,8,46,8],[80,8,47,8],[80,13,47,13],[80,17,47,19,"info"],[80,21,47,23],[80,25,47,27,"layoutInfo"],[80,35,47,37],[80,37,47,39],[81,10,48,12],[81,14,48,20,"index"],[81,19,48,25],[81,22,48,42,"info"],[81,26,48,46],[81,27,48,20,"index"],[81,32,48,25],[82,12,48,27,"dimensions"],[82,22,48,37],[82,25,48,42,"info"],[82,29,48,46],[82,30,48,27,"dimensions"],[82,40,48,37],[83,10,49,12],[83,14,49,18,"layout"],[83,20,49,24],[83,23,49,27],[83,27,49,31],[83,28,49,32,"layouts"],[83,35,49,39],[83,36,49,40,"index"],[83,41,49,45],[83,42,49,46],[84,10,50,12,"layout"],[84,16,50,18],[84,17,50,19,"height"],[84,23,50,25],[84,26,50,28,"dimensions"],[84,36,50,38],[84,37,50,39,"height"],[84,43,50,45],[85,10,51,12,"layout"],[85,16,51,18],[85,17,51,19,"isHeightMeasured"],[85,33,51,35],[85,36,51,38],[85,40,51,42],[86,10,52,12,"layout"],[86,16,52,18],[86,17,52,19,"isWidthMeasured"],[86,32,52,34],[86,35,52,37],[86,39,52,41],[87,10,53,12],[87,14,53,16],[87,15,53,17,"layouts"],[87,22,53,24],[87,23,53,25,"index"],[87,28,53,30],[87,29,53,31],[87,32,53,34,"layout"],[87,38,53,40],[88,8,54,8],[89,8,55,8],[90,8,56,8],[90,12,56,12],[90,16,56,16],[90,17,56,17,"fullRelayoutRequired"],[90,37,56,37],[90,39,56,39],[91,10,57,12],[91,14,57,16],[91,15,57,17,"updateAllWidths"],[91,30,57,32],[91,31,57,33],[91,32,57,34],[92,10,58,12],[92,14,58,16],[92,15,58,17,"fullRelayoutRequired"],[92,35,58,37],[92,38,58,40],[92,43,58,45],[93,10,59,12],[93,17,59,19],[93,18,59,20],[94,8,60,8],[95,6,61,4],[96,6,62,4],[97,0,63,0],[98,0,64,0],[99,0,65,0],[100,0,66,0],[101,4,62,4],[102,6,62,4,"key"],[102,9,62,4],[103,6,62,4,"value"],[103,11,62,4],[103,13,67,4],[103,22,67,4,"estimateLayout"],[103,36,67,18,"estimateLayout"],[103,37,67,19,"index"],[103,42,67,24],[103,44,67,26],[104,8,68,8],[104,12,68,14,"layout"],[104,18,68,20],[104,21,68,23],[104,25,68,27],[104,26,68,28,"layouts"],[104,33,68,35],[104,34,68,36,"index"],[104,39,68,41],[104,40,68,42],[105,8,69,8],[106,8,70,8,"layout"],[106,14,70,14],[106,15,70,15,"width"],[106,20,70,20],[106,23,70,23],[106,27,70,27],[106,28,70,28,"getWidth"],[106,36,70,36],[106,37,70,37,"index"],[106,42,70,42],[106,43,70,43],[107,8,71,8,"layout"],[107,14,71,14],[107,15,71,15,"height"],[107,21,71,21],[107,24,71,24],[107,28,71,28],[107,29,71,29,"getEstimatedHeight"],[107,47,71,47],[107,48,71,48,"index"],[107,53,71,53],[107,54,71,54],[108,8,72,8,"layout"],[108,14,72,14],[108,15,72,15,"isWidthMeasured"],[108,30,72,30],[108,33,72,33],[108,37,72,37],[109,8,73,8,"layout"],[109,14,73,14],[109,15,73,15,"enforcedWidth"],[109,28,73,28],[109,31,73,31],[109,35,73,35],[110,6,74,4],[111,6,75,4],[112,0,76,0],[113,0,77,0],[114,0,78,0],[115,4,75,4],[116,6,75,4,"key"],[116,9,75,4],[117,6,75,4,"value"],[117,11,75,4],[117,13,79,4],[117,22,79,4,"handleSpanChange"],[117,38,79,20,"handleSpanChange"],[117,39,79,21,"index"],[117,44,79,26],[117,46,79,28],[118,8,80,8],[118,12,80,12],[118,13,80,13,"fullRelayoutRequired"],[118,33,80,33],[118,36,80,36],[118,40,80,40],[119,6,81,4],[120,6,82,4],[121,0,83,0],[122,0,84,0],[123,0,85,0],[124,4,82,4],[125,6,82,4,"key"],[125,9,82,4],[126,6,82,4,"value"],[126,11,82,4],[126,13,86,4],[126,22,86,4,"getLayoutSize"],[126,35,86,17,"getLayoutSize"],[126,36,86,17],[126,38,86,20],[127,8,87,8],[127,12,87,12],[127,16,87,16],[127,17,87,17,"layouts"],[127,24,87,24],[127,25,87,25,"length"],[127,31,87,31],[127,36,87,36],[127,37,87,37],[127,39,88,12],[127,46,88,19],[128,10,88,21,"width"],[128,15,88,26],[128,17,88,28],[128,18,88,29],[129,10,88,31,"height"],[129,16,88,37],[129,18,88,39],[130,8,88,41],[130,9,88,42],[131,8,89,8],[132,8,90,8],[132,12,90,14,"maxHeight"],[132,21,90,23],[132,24,90,26,"Math"],[132,28,90,30],[132,29,90,31,"max"],[132,32,90,34],[132,33,90,35],[132,36,90,38],[132,40,90,42],[132,41,90,43,"columnHeights"],[132,54,90,56],[132,55,90,57],[133,8,91,8],[133,15,91,15],[134,10,92,12,"width"],[134,15,92,17],[134,17,92,19],[134,21,92,23],[134,22,92,24,"boundedSize"],[134,33,92,35],[135,10,93,12,"height"],[135,16,93,18],[135,18,93,20,"maxHeight"],[136,8,94,8],[136,9,94,9],[137,6,95,4],[138,6,96,4],[139,0,97,0],[140,0,98,0],[141,0,99,0],[142,0,100,0],[143,0,101,0],[144,4,96,4],[145,6,96,4,"key"],[145,9,96,4],[146,6,96,4,"value"],[146,11,96,4],[146,13,102,4],[146,22,102,4,"recomputeLayouts"],[146,38,102,20,"recomputeLayouts"],[146,39,102,21,"startIndex"],[146,49,102,31],[146,51,102,33,"endIndex"],[146,59,102,41],[146,61,102,43],[147,8,103,8],[148,8,104,8],[148,12,104,12,"startIndex"],[148,22,104,22],[148,27,104,27],[148,28,104,28],[148,30,104,30],[149,10,105,12],[149,14,105,16],[149,15,105,17,"columnHeights"],[149,28,105,30],[149,31,105,33,"Array"],[149,36,105,38],[149,37,105,39],[149,41,105,43],[149,42,105,44,"maxColumns"],[149,52,105,54],[149,53,105,55],[149,54,105,56,"fill"],[149,58,105,60],[149,59,105,61],[149,60,105,62],[149,61,105,63],[150,10,106,12],[150,14,106,16],[150,15,106,17,"currentColumn"],[150,28,106,30],[150,31,106,33],[150,32,106,34],[151,8,107,8],[151,9,107,9],[151,15,108,13],[152,10,109,12],[153,10,110,12],[154,10,111,12],[154,14,111,16],[154,15,111,17,"updateColumnHeightsToIndex"],[154,41,111,43],[154,42,111,44,"startIndex"],[154,52,111,54],[154,53,111,55],[155,8,112,8],[156,8,113,8],[156,12,113,14,"itemCount"],[156,21,113,23],[156,24,113,26],[156,28,113,30],[156,29,113,31,"layouts"],[156,36,113,38],[156,37,113,39,"length"],[156,43,113,45],[157,8,114,8],[157,13,114,13],[157,17,114,17,"i"],[157,18,114,18],[157,21,114,21,"startIndex"],[157,31,114,31],[157,33,114,33,"i"],[157,34,114,34],[157,37,114,37,"itemCount"],[157,46,114,46],[157,48,114,48,"i"],[157,49,114,49],[157,51,114,51],[157,53,114,53],[158,10,115,12],[158,14,115,18,"layout"],[158,20,115,24],[158,23,115,27],[158,27,115,31],[158,28,115,32,"getLayout"],[158,37,115,41],[158,38,115,42,"i"],[158,39,115,43],[158,40,115,44],[159,10,116,12],[160,10,117,12],[160,14,117,18,"span"],[160,18,117,22],[160,21,117,25],[160,25,117,29],[160,26,117,30,"getSpan"],[160,33,117,37],[160,34,117,38,"i"],[160,35,117,39],[160,37,117,41],[160,41,117,45],[160,42,117,46],[161,10,118,12],[161,14,118,16],[161,18,118,20],[161,19,118,21,"optimizeItemArrangement"],[161,42,118,44],[161,44,118,46],[162,12,119,16],[162,16,119,20,"span"],[162,20,119,24],[162,25,119,29],[162,26,119,30],[162,28,119,32],[163,14,120,20],[164,14,121,20],[164,18,121,24],[164,19,121,25,"placeSingleColumnItem"],[164,40,121,46],[164,41,121,47,"layout"],[164,47,121,53],[164,48,121,54],[165,12,122,16],[165,13,122,17],[165,19,123,21],[166,14,124,20],[167,14,125,20],[167,18,125,24],[167,19,125,25,"placeOptimizedMultiColumnItem"],[167,48,125,54],[167,49,125,55,"layout"],[167,55,125,61],[167,57,125,63,"span"],[167,61,125,67],[167,62,125,68],[168,12,126,16],[169,10,127,12],[169,11,127,13],[169,17,128,17],[170,12,129,16],[171,12,130,16],[171,16,130,20],[171,17,130,21,"placeItemSequentially"],[171,38,130,42],[171,39,130,43,"layout"],[171,45,130,49],[171,47,130,51,"span"],[171,51,130,55],[171,52,130,56],[172,10,131,12],[173,8,132,8],[174,6,133,4],[175,6,134,4],[176,0,135,0],[177,0,136,0],[178,0,137,0],[179,0,138,0],[180,4,134,4],[181,6,134,4,"key"],[181,9,134,4],[182,6,134,4,"value"],[182,11,134,4],[182,13,139,4],[182,22,139,4,"getWidth"],[182,30,139,12,"getWidth"],[182,31,139,13,"index"],[182,36,139,18],[182,38,139,20],[183,8,140,8],[183,15,140,16],[183,19,140,20],[183,20,140,21,"boundedSize"],[183,31,140,32],[183,34,140,35],[183,38,140,39],[183,39,140,40,"maxColumns"],[183,49,140,50],[183,52,140,54],[183,56,140,58],[183,57,140,59,"getSpan"],[183,64,140,66],[183,65,140,67,"index"],[183,70,140,72],[183,71,140,73],[184,6,141,4],[185,4,141,5],[186,6,141,5,"key"],[186,9,141,5],[187,6,141,5,"value"],[187,11,141,5],[187,13,142,4],[187,22,142,4,"updateAllWidths"],[187,37,142,19,"updateAllWidths"],[187,38,142,19],[187,40,142,22],[188,8,143,8],[188,13,143,13],[188,17,143,17,"i"],[188,18,143,18],[188,21,143,21],[188,22,143,22],[188,24,143,24,"i"],[188,25,143,25],[188,28,143,28],[188,32,143,32],[188,33,143,33,"layouts"],[188,40,143,40],[188,41,143,41,"length"],[188,47,143,47],[188,49,143,49,"i"],[188,50,143,50],[188,52,143,52],[188,54,143,54],[189,10,144,12],[189,14,144,16],[189,15,144,17,"layouts"],[189,22,144,24],[189,23,144,25,"i"],[189,24,144,26],[189,25,144,27],[189,26,144,28,"width"],[189,31,144,33],[189,34,144,36],[189,38,144,40],[189,39,144,41,"getWidth"],[189,47,144,49],[189,48,144,50,"i"],[189,49,144,51],[189,50,144,52],[190,10,145,12],[190,14,145,16],[190,15,145,17,"layouts"],[190,22,145,24],[190,23,145,25,"i"],[190,24,145,26],[190,25,145,27],[190,26,145,28,"minHeight"],[190,35,145,37],[190,38,145,40,"undefined"],[190,47,145,49],[191,8,146,8],[192,6,147,4],[193,6,148,4],[194,0,149,0],[195,0,150,0],[196,0,151,0],[197,0,152,0],[198,4,148,4],[199,6,148,4,"key"],[199,9,148,4],[200,6,148,4,"value"],[200,11,148,4],[200,13,153,4],[200,22,153,4,"placeItemSequentially"],[200,43,153,25,"placeItemSequentially"],[200,44,153,26,"layout"],[200,50,153,32],[200,52,153,34,"span"],[200,56,153,38],[200,58,153,40],[201,8,154,8],[202,8,155,8],[202,12,155,12],[202,16,155,16],[202,17,155,17,"currentColumn"],[202,30,155,30],[202,33,155,33,"span"],[202,37,155,37],[202,40,155,40],[202,44,155,44],[202,45,155,45,"maxColumns"],[202,55,155,55],[202,57,155,57],[203,10,156,12],[204,10,157,12],[204,14,157,16],[204,15,157,17,"currentColumn"],[204,28,157,30],[204,31,157,33],[204,32,157,34],[205,8,158,8],[206,8,159,8],[207,8,160,8],[207,12,160,12,"maxHeight"],[207,21,160,21],[207,24,160,24],[207,28,160,28],[207,29,160,29,"columnHeights"],[207,42,160,42],[207,43,160,43],[207,47,160,47],[207,48,160,48,"currentColumn"],[207,61,160,61],[207,62,160,62],[208,8,161,8],[208,13,161,13],[208,17,161,17,"col"],[208,20,161,20],[208,23,161,23],[208,27,161,27],[208,28,161,28,"currentColumn"],[208,41,161,41],[208,44,161,44],[208,45,161,45],[208,47,161,47,"col"],[208,50,161,50],[208,53,161,53],[208,57,161,57],[208,58,161,58,"currentColumn"],[208,71,161,71],[208,74,161,74,"span"],[208,78,161,78],[208,80,161,80,"col"],[208,83,161,83],[208,85,161,85],[208,87,161,87],[209,10,162,12],[209,14,162,16,"col"],[209,17,162,19],[209,20,162,22],[209,24,162,26],[209,25,162,27,"maxColumns"],[209,35,162,37],[209,37,162,39],[210,12,163,16,"maxHeight"],[210,21,163,25],[210,24,163,28,"Math"],[210,28,163,32],[210,29,163,33,"max"],[210,32,163,36],[210,33,163,37,"maxHeight"],[210,42,163,46],[210,44,163,48],[210,48,163,52],[210,49,163,53,"columnHeights"],[210,62,163,66],[210,63,163,67,"col"],[210,66,163,70],[210,67,163,71],[210,68,163,72],[211,10,164,12],[212,8,165,8],[213,8,166,8],[214,8,167,8,"layout"],[214,14,167,14],[214,15,167,15,"x"],[214,16,167,16],[214,19,167,20],[214,23,167,24],[214,24,167,25,"boundedSize"],[214,35,167,36],[214,38,167,39],[214,42,167,43],[214,43,167,44,"maxColumns"],[214,53,167,54],[214,56,167,58],[214,60,167,62],[214,61,167,63,"currentColumn"],[214,74,167,76],[215,8,168,8,"layout"],[215,14,168,14],[215,15,168,15,"y"],[215,16,168,16],[215,19,168,19,"maxHeight"],[215,28,168,28],[216,8,169,8],[217,8,170,8],[217,13,170,13],[217,17,170,17,"col"],[217,21,170,20],[217,24,170,23],[217,28,170,27],[217,29,170,28,"currentColumn"],[217,42,170,41],[217,44,170,43,"col"],[217,48,170,46],[217,51,170,49],[217,55,170,53],[217,56,170,54,"currentColumn"],[217,69,170,67],[217,72,170,70,"span"],[217,76,170,74],[217,78,170,76,"col"],[217,82,170,79],[217,84,170,81],[217,86,170,83],[218,10,171,12],[218,14,171,16,"col"],[218,18,171,19],[218,21,171,22],[218,25,171,26],[218,26,171,27,"maxColumns"],[218,36,171,37],[218,38,171,39],[219,12,172,16],[219,16,172,20],[219,17,172,21,"columnHeights"],[219,30,172,34],[219,31,172,35,"col"],[219,35,172,38],[219,36,172,39],[219,39,172,42,"maxHeight"],[219,48,172,51],[219,51,172,54,"layout"],[219,57,172,60],[219,58,172,61,"height"],[219,64,172,67],[220,10,173,12],[221,8,174,8],[222,8,175,8],[223,8,176,8],[223,12,176,12],[223,13,176,13,"currentColumn"],[223,26,176,26],[223,30,176,30,"span"],[223,34,176,34],[224,8,177,8],[224,12,177,12],[224,16,177,16],[224,17,177,17,"currentColumn"],[224,30,177,30],[224,34,177,34],[224,38,177,38],[224,39,177,39,"maxColumns"],[224,49,177,49],[224,51,177,51],[225,10,178,12],[225,14,178,16],[225,15,178,17,"currentColumn"],[225,28,178,30],[225,31,178,33],[225,32,178,34],[226,8,179,8],[227,6,180,4],[228,6,181,4],[229,0,182,0],[230,0,183,0],[231,0,184,0],[232,4,181,4],[233,6,181,4,"key"],[233,9,181,4],[234,6,181,4,"value"],[234,11,181,4],[234,13,185,4],[234,22,185,4,"placeSingleColumnItem"],[234,43,185,25,"placeSingleColumnItem"],[234,44,185,26,"layout"],[234,50,185,32],[234,52,185,34],[235,8,186,8],[236,8,187,8],[236,12,187,12,"shortestColumnIndex"],[236,31,187,31],[236,34,187,34],[236,35,187,35],[237,8,188,8],[237,12,188,12,"minHeight"],[237,21,188,21],[237,24,188,24],[237,28,188,28],[237,29,188,29,"columnHeights"],[237,42,188,42],[237,43,188,43],[237,44,188,44],[237,45,188,45],[238,8,189,8],[238,13,189,13],[238,17,189,17,"i"],[238,18,189,18],[238,21,189,21],[238,22,189,22],[238,24,189,24,"i"],[238,25,189,25],[238,28,189,28],[238,32,189,32],[238,33,189,33,"maxColumns"],[238,43,189,43],[238,45,189,45,"i"],[238,46,189,46],[238,48,189,48],[238,50,189,50],[239,10,190,12],[239,14,190,16],[239,18,190,20],[239,19,190,21,"columnHeights"],[239,32,190,34],[239,33,190,35,"i"],[239,34,190,36],[239,35,190,37],[239,38,190,40,"minHeight"],[239,47,190,49],[239,49,190,51],[240,12,191,16,"minHeight"],[240,21,191,25],[240,24,191,28],[240,28,191,32],[240,29,191,33,"columnHeights"],[240,42,191,46],[240,43,191,47,"i"],[240,44,191,48],[240,45,191,49],[241,12,192,16,"shortestColumnIndex"],[241,31,192,35],[241,34,192,38,"i"],[241,35,192,39],[242,10,193,12],[243,8,194,8],[244,8,195,8],[245,8,196,8,"layout"],[245,14,196,14],[245,15,196,15,"x"],[245,16,196,16],[245,19,196,20],[245,23,196,24],[245,24,196,25,"boundedSize"],[245,35,196,36],[245,38,196,39],[245,42,196,43],[245,43,196,44,"maxColumns"],[245,53,196,54],[245,56,196,58,"shortestColumnIndex"],[245,75,196,77],[246,8,197,8,"layout"],[246,14,197,14],[246,15,197,15,"y"],[246,16,197,16],[246,19,197,19],[246,23,197,23],[246,24,197,24,"columnHeights"],[246,37,197,37],[246,38,197,38,"shortestColumnIndex"],[246,57,197,57],[246,58,197,58],[247,8,198,8],[248,8,199,8],[248,12,199,12],[248,13,199,13,"columnHeights"],[248,26,199,26],[248,27,199,27,"shortestColumnIndex"],[248,46,199,46],[248,47,199,47],[248,51,199,51,"layout"],[248,57,199,57],[248,58,199,58,"height"],[248,64,199,64],[249,6,200,4],[250,6,201,4],[251,0,202,0],[252,0,203,0],[253,0,204,0],[254,0,205,0],[255,4,201,4],[256,6,201,4,"key"],[256,9,201,4],[257,6,201,4,"value"],[257,11,201,4],[257,13,206,4],[257,22,206,4,"placeOptimizedMultiColumnItem"],[257,51,206,33,"placeOptimizedMultiColumnItem"],[257,52,206,34,"layout"],[257,58,206,40],[257,60,206,42,"span"],[257,64,206,46],[257,66,206,48],[258,8,207,8],[258,12,207,12,"bestStartColumn"],[258,27,207,27],[258,30,207,30],[258,31,207,31],[259,8,208,8],[259,12,208,12,"minTotalHeight"],[259,26,208,26],[259,29,208,29,"Number"],[259,35,208,35],[259,36,208,36,"MAX_VALUE"],[259,45,208,45],[260,8,209,8],[261,8,210,8],[261,13,210,13],[261,17,210,17,"startCol"],[261,25,210,25],[261,28,210,28],[261,29,210,29],[261,31,210,31,"startCol"],[261,39,210,39],[261,43,210,43],[261,47,210,47],[261,48,210,48,"maxColumns"],[261,58,210,58],[261,61,210,61,"span"],[261,65,210,65],[261,67,210,67,"startCol"],[261,75,210,75],[261,77,210,77],[261,79,210,79],[262,10,211,12],[263,10,212,12],[263,14,212,16,"maxHeight"],[263,24,212,25],[263,27,212,28],[263,31,212,32],[263,32,212,33,"columnHeights"],[263,45,212,46],[263,46,212,47,"startCol"],[263,54,212,55],[263,55,212,56],[264,10,213,12],[264,15,213,17],[264,19,213,21,"col"],[264,22,213,24],[264,25,213,27,"startCol"],[264,33,213,35],[264,36,213,38],[264,37,213,39],[264,39,213,41,"col"],[264,42,213,44],[264,45,213,47,"startCol"],[264,53,213,55],[264,56,213,58,"span"],[264,60,213,62],[264,62,213,64,"col"],[264,65,213,67],[264,67,213,69],[264,69,213,71],[265,12,214,16,"maxHeight"],[265,22,214,25],[265,25,214,28,"Math"],[265,29,214,32],[265,30,214,33,"max"],[265,33,214,36],[265,34,214,37,"maxHeight"],[265,44,214,46],[265,46,214,48],[265,50,214,52],[265,51,214,53,"columnHeights"],[265,64,214,66],[265,65,214,67,"col"],[265,68,214,70],[265,69,214,71],[265,70,214,72],[266,10,215,12],[267,10,216,12],[268,10,217,12],[268,14,217,16,"totalHeight"],[268,25,217,27],[268,28,217,30],[268,29,217,31],[269,10,218,12],[269,15,218,17],[269,19,218,21,"col"],[269,24,218,24],[269,27,218,27],[269,28,218,28],[269,30,218,30,"col"],[269,35,218,33],[269,38,218,36],[269,42,218,40],[269,43,218,41,"maxColumns"],[269,53,218,51],[269,55,218,53,"col"],[269,60,218,56],[269,62,218,58],[269,64,218,60],[270,12,219,16],[270,16,219,20,"col"],[270,21,219,23],[270,25,219,27,"startCol"],[270,33,219,35],[270,37,219,39,"col"],[270,42,219,42],[270,45,219,45,"startCol"],[270,53,219,53],[270,56,219,56,"span"],[270,60,219,60],[270,62,219,62],[271,14,220,20,"totalHeight"],[271,25,220,31],[271,29,220,35,"maxHeight"],[271,39,220,44],[271,42,220,47,"layout"],[271,48,220,53],[271,49,220,54,"height"],[271,55,220,60],[272,12,221,16],[272,13,221,17],[272,19,222,21],[273,14,223,20,"totalHeight"],[273,25,223,31],[273,29,223,35],[273,33,223,39],[273,34,223,40,"columnHeights"],[273,47,223,53],[273,48,223,54,"col"],[273,53,223,57],[273,54,223,58],[274,12,224,16],[275,10,225,12],[276,10,226,12],[277,10,227,12],[277,14,227,16,"totalHeight"],[277,25,227,27],[277,28,227,30,"minTotalHeight"],[277,42,227,44],[277,44,227,46],[278,12,228,16,"minTotalHeight"],[278,26,228,30],[278,29,228,33,"totalHeight"],[278,40,228,44],[279,12,229,16,"bestStartColumn"],[279,27,229,31],[279,30,229,34,"startCol"],[279,38,229,42],[280,10,230,12],[281,8,231,8],[282,8,232,8],[283,8,233,8],[283,12,233,14,"maxHeight"],[283,21,233,23],[283,24,233,26,"Math"],[283,28,233,30],[283,29,233,31,"max"],[283,32,233,34],[283,33,233,35],[283,36,233,38],[283,40,233,42],[283,41,233,43,"columnHeights"],[283,54,233,56],[283,55,233,57,"slice"],[283,60,233,62],[283,61,233,63,"bestStartColumn"],[283,76,233,78],[283,78,233,80,"bestStartColumn"],[283,93,233,95],[283,96,233,98,"span"],[283,100,233,102],[283,101,233,103],[283,102,233,104],[284,8,234,8,"layout"],[284,14,234,14],[284,15,234,15,"x"],[284,16,234,16],[284,19,234,20],[284,23,234,24],[284,24,234,25,"boundedSize"],[284,35,234,36],[284,38,234,39],[284,42,234,43],[284,43,234,44,"maxColumns"],[284,53,234,54],[284,56,234,58,"bestStartColumn"],[284,71,234,73],[285,8,235,8,"layout"],[285,14,235,14],[285,15,235,15,"y"],[285,16,235,16],[285,19,235,19,"maxHeight"],[285,28,235,28],[286,8,236,8],[287,8,237,8],[287,13,237,13],[287,17,237,17,"col"],[287,22,237,20],[287,25,237,23,"bestStartColumn"],[287,40,237,38],[287,42,237,40,"col"],[287,47,237,43],[287,50,237,46,"bestStartColumn"],[287,65,237,61],[287,68,237,64,"span"],[287,72,237,68],[287,74,237,70,"col"],[287,79,237,73],[287,81,237,75],[287,83,237,77],[288,10,238,12],[288,14,238,16],[288,15,238,17,"columnHeights"],[288,28,238,30],[288,29,238,31,"col"],[288,34,238,34],[288,35,238,35],[288,38,238,38,"maxHeight"],[288,47,238,47],[288,50,238,50,"layout"],[288,56,238,56],[288,57,238,57,"height"],[288,63,238,63],[289,8,239,8],[290,6,240,4],[291,6,241,4],[292,0,242,0],[293,0,243,0],[294,0,244,0],[295,4,241,4],[296,6,241,4,"key"],[296,9,241,4],[297,6,241,4,"value"],[297,11,241,4],[297,13,245,4],[297,22,245,4,"updateColumnHeightsToIndex"],[297,48,245,30,"updateColumnHeightsToIndex"],[297,49,245,31,"index"],[297,54,245,36],[297,56,245,38],[298,8,246,8],[299,8,247,8],[299,12,247,12],[299,13,247,13,"columnHeights"],[299,26,247,26],[299,29,247,29,"Array"],[299,34,247,34],[299,35,247,35],[299,39,247,39],[299,40,247,40,"maxColumns"],[299,50,247,50],[299,51,247,51],[299,52,247,52,"fill"],[299,56,247,56],[299,57,247,57],[299,58,247,58],[299,59,247,59],[300,8,248,8],[300,12,248,12],[300,13,248,13,"currentColumn"],[300,26,248,26],[300,29,248,29],[300,30,248,30],[301,8,249,8],[302,8,250,8],[302,13,250,13],[302,17,250,17,"i"],[302,18,250,18],[302,21,250,21],[302,22,250,22],[302,24,250,24,"i"],[302,25,250,25],[302,28,250,28,"index"],[302,33,250,33],[302,35,250,35,"i"],[302,36,250,36],[302,38,250,38],[302,40,250,40],[303,10,251,12],[303,14,251,18,"layout"],[303,20,251,24],[303,23,251,27],[303,27,251,31],[303,28,251,32,"layouts"],[303,35,251,39],[303,36,251,40,"i"],[303,37,251,41],[303,38,251,42],[304,10,252,12],[304,14,252,18,"itemWidth"],[304,23,252,27],[304,26,252,30,"layout"],[304,32,252,36],[304,33,252,37,"width"],[304,38,252,42],[305,10,253,12],[305,14,253,18,"columnWidth"],[305,25,253,29],[305,28,253,32],[305,32,253,36],[305,33,253,37,"boundedSize"],[305,44,253,48],[305,47,253,51],[305,51,253,55],[305,52,253,56,"maxColumns"],[305,62,253,66],[306,10,254,12],[306,14,254,18,"span"],[306,18,254,22],[306,21,254,25,"Math"],[306,25,254,29],[306,26,254,30,"round"],[306,31,254,35],[306,32,254,36,"itemWidth"],[306,41,254,45],[306,44,254,48,"columnWidth"],[306,55,254,59],[306,56,254,60],[307,10,255,12],[308,10,256,12],[308,14,256,18,"startColumn"],[308,25,256,29],[308,28,256,32,"Math"],[308,32,256,36],[308,33,256,37,"round"],[308,38,256,42],[308,39,256,43,"layout"],[308,45,256,49],[308,46,256,50,"x"],[308,47,256,51],[308,50,256,54,"columnWidth"],[308,61,256,65],[308,62,256,66],[309,10,257,12],[309,14,257,18,"endColumn"],[309,23,257,27],[309,26,257,30,"Math"],[309,30,257,34],[309,31,257,35,"min"],[309,34,257,38],[309,35,257,39,"startColumn"],[309,46,257,50],[309,49,257,53,"span"],[309,53,257,57],[309,55,257,59],[309,59,257,63],[309,60,257,64,"maxColumns"],[309,70,257,74],[309,71,257,75],[310,10,258,12],[311,10,259,12],[311,15,259,17],[311,19,259,21,"col"],[311,22,259,24],[311,25,259,27,"startColumn"],[311,36,259,38],[311,38,259,40,"col"],[311,41,259,43],[311,44,259,46,"endColumn"],[311,53,259,55],[311,55,259,57,"col"],[311,58,259,60],[311,60,259,62],[311,62,259,64],[312,12,260,16],[312,16,260,20],[312,17,260,21,"columnHeights"],[312,30,260,34],[312,31,260,35,"col"],[312,34,260,38],[312,35,260,39],[312,38,260,42,"Math"],[312,42,260,46],[312,43,260,47,"max"],[312,46,260,50],[312,47,260,51],[312,51,260,55],[312,52,260,56,"columnHeights"],[312,65,260,69],[312,66,260,70,"col"],[312,69,260,73],[312,70,260,74],[312,72,260,76,"layout"],[312,78,260,82],[312,79,260,83,"y"],[312,80,260,84],[312,83,260,87,"layout"],[312,89,260,93],[312,90,260,94,"height"],[312,96,260,100],[312,97,260,101],[313,10,261,12],[314,10,262,12],[315,10,263,12],[315,14,263,16],[315,15,263,17],[315,19,263,21],[315,20,263,22,"optimizeItemArrangement"],[315,43,263,45],[315,45,263,47],[316,12,264,16],[316,16,264,20],[316,17,264,21,"currentColumn"],[316,30,264,34],[316,33,264,37],[316,34,264,38,"startColumn"],[316,45,264,49],[316,48,264,52,"span"],[316,52,264,56],[316,56,264,60],[316,60,264,64],[316,61,264,65,"maxColumns"],[316,71,264,75],[317,10,265,12],[318,8,266,8],[319,6,267,4],[320,4,267,5],[321,2,267,5],[321,4,7,48,"RVLayoutManager"],[321,18,7,63],[321,19,7,63,"RVLayoutManager"],[321,34,7,63],[322,0,7,63],[322,3]],"functionMap":{"names":["<global>","RVMasonryLayoutManagerImpl","RVMasonryLayoutManagerImpl#constructor","RVMasonryLayoutManagerImpl#updateLayoutParams","RVMasonryLayoutManagerImpl#processLayoutInfo","RVMasonryLayoutManagerImpl#estimateLayout","RVMasonryLayoutManagerImpl#handleSpanChange","RVMasonryLayoutManagerImpl#getLayoutSize","RVMasonryLayoutManagerImpl#recomputeLayouts","RVMasonryLayoutManagerImpl#getWidth","RVMasonryLayoutManagerImpl#updateAllWidths","RVMasonryLayoutManagerImpl#placeItemSequentially","RVMasonryLayoutManagerImpl#placeSingleColumnItem","RVMasonryLayoutManagerImpl#placeOptimizedMultiColumnItem","RVMasonryLayoutManagerImpl#updateColumnHeightsToIndex"],"mappings":"AAA;OCM;ICC;KDU;IEK;KFgB;IGM;KHgB;IIM;KJO;IKK;KLE;IMK;KNS;IOO;KP+B;IQM;KRE;ISC;KTK;IUM;KV2B;IWK;KXe;IYM;KZkC;IaK;KbsB;CDC"},"hasCjsExports":false},"type":"js/module"}]}