{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.getCameraDevice = getCameraDevice;\n  /**\n   * Get the best matching Camera device that best satisfies your requirements using a sorting filter, or `undefined` if {@linkcode devices} does not contain any devices.\n   * @param position The position of the Camera device relative to the phone.\n   * @param filter The filter you want to use. The Camera device that matches your filter the closest will be returned\n   * @returns The Camera device that matches your filter the closest, or `undefined` if no such Camera Device exists on the given {@linkcode position}.\n   * @example\n   * ```ts\n   * const devices = Camera.getAvailableCameraDevices()\n   * const device = getCameraDevice(devices, 'back', {\n   *    physicalDevices: ['wide-angle-camera']\n   * })\n   * ```\n   */\n  function getCameraDevice(devices, position, filter = {}) {\n    const filtered = devices.filter(d => d.position === position);\n    let bestDevice = filtered[0];\n    if (bestDevice == null) return undefined;\n\n    // Compare each device using a point scoring system\n    for (const device of filtered) {\n      let leftPoints = 0;\n      let rightPoints = 0;\n\n      // prefer higher hardware-level\n      if (bestDevice.hardwareLevel === 'full') leftPoints += 4;\n      if (device.hardwareLevel === 'full') rightPoints += 4;\n      if (filter.physicalDevices != null) {\n        // user did pass a physical device filter, two possible scenarios:\n        // 1. user wants all cameras ([ultra-wide, wide, tele]) to zoom. prefer those devices that have all 3 cameras.\n        // 2. user wants only one ([wide]) for faster performance. prefer those devices that only have one camera, if they have more, we rank them lower.\n        for (const d of bestDevice.physicalDevices) {\n          if (filter.physicalDevices.includes(d)) leftPoints += 1;else leftPoints -= 1;\n        }\n        for (const d of device.physicalDevices) {\n          if (filter.physicalDevices.includes(d)) rightPoints += 1;else rightPoints -= 1;\n        }\n      } else {\n        // user did not pass a physical device filter. prefer wide-angle-camera as a default\n        if (bestDevice.physicalDevices.includes('wide-angle-camera')) leftPoints += 2;\n        if (device.physicalDevices.includes('wide-angle-camera')) rightPoints += 2;\n        // if we have more than one device, we rank it lower. we only want a simple camera\n        if (bestDevice.physicalDevices.length > device.physicalDevices.length) leftPoints -= 1;\n        if (device.physicalDevices.length > bestDevice.physicalDevices.length) rightPoints -= 1;\n      }\n      if (rightPoints > leftPoints) bestDevice = device;\n    }\n    return bestDevice;\n  }\n});","lineCount":56,"map":[[7,2,14,0,"exports"],[7,9,14,0],[7,10,14,0,"getCameraDevice"],[7,25,14,0],[7,28,14,0,"getCameraDevice"],[7,43,14,0],[8,2,1,0],[9,0,2,0],[10,0,3,0],[11,0,4,0],[12,0,5,0],[13,0,6,0],[14,0,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[18,0,11,0],[19,0,12,0],[20,0,13,0],[21,2,14,7],[21,11,14,16,"getCameraDevice"],[21,26,14,31,"getCameraDevice"],[21,27,14,32,"devices"],[21,34,14,39],[21,36,14,41,"position"],[21,44,14,49],[21,46,14,51,"filter"],[21,52,14,57],[21,55,14,60],[21,56,14,61],[21,57,14,62],[21,59,14,64],[22,4,15,2],[22,10,15,8,"filtered"],[22,18,15,16],[22,21,15,19,"devices"],[22,28,15,26],[22,29,15,27,"filter"],[22,35,15,33],[22,36,15,34,"d"],[22,37,15,35],[22,41,15,39,"d"],[22,42,15,40],[22,43,15,41,"position"],[22,51,15,49],[22,56,15,54,"position"],[22,64,15,62],[22,65,15,63],[23,4,16,2],[23,8,16,6,"bestDevice"],[23,18,16,16],[23,21,16,19,"filtered"],[23,29,16,27],[23,30,16,28],[23,31,16,29],[23,32,16,30],[24,4,17,2],[24,8,17,6,"bestDevice"],[24,18,17,16],[24,22,17,20],[24,26,17,24],[24,28,17,26],[24,35,17,33,"undefined"],[24,44,17,42],[26,4,19,2],[27,4,20,2],[27,9,20,7],[27,15,20,13,"device"],[27,21,20,19],[27,25,20,23,"filtered"],[27,33,20,31],[27,35,20,33],[28,6,21,4],[28,10,21,8,"leftPoints"],[28,20,21,18],[28,23,21,21],[28,24,21,22],[29,6,22,4],[29,10,22,8,"rightPoints"],[29,21,22,19],[29,24,22,22],[29,25,22,23],[31,6,24,4],[32,6,25,4],[32,10,25,8,"bestDevice"],[32,20,25,18],[32,21,25,19,"hardwareLevel"],[32,34,25,32],[32,39,25,37],[32,45,25,43],[32,47,25,45,"leftPoints"],[32,57,25,55],[32,61,25,59],[32,62,25,60],[33,6,26,4],[33,10,26,8,"device"],[33,16,26,14],[33,17,26,15,"hardwareLevel"],[33,30,26,28],[33,35,26,33],[33,41,26,39],[33,43,26,41,"rightPoints"],[33,54,26,52],[33,58,26,56],[33,59,26,57],[34,6,27,4],[34,10,27,8,"filter"],[34,16,27,14],[34,17,27,15,"physicalDevices"],[34,32,27,30],[34,36,27,34],[34,40,27,38],[34,42,27,40],[35,8,28,6],[36,8,29,6],[37,8,30,6],[38,8,31,6],[38,13,31,11],[38,19,31,17,"d"],[38,20,31,18],[38,24,31,22,"bestDevice"],[38,34,31,32],[38,35,31,33,"physicalDevices"],[38,50,31,48],[38,52,31,50],[39,10,32,8],[39,14,32,12,"filter"],[39,20,32,18],[39,21,32,19,"physicalDevices"],[39,36,32,34],[39,37,32,35,"includes"],[39,45,32,43],[39,46,32,44,"d"],[39,47,32,45],[39,48,32,46],[39,50,32,48,"leftPoints"],[39,60,32,58],[39,64,32,62],[39,65,32,63],[39,66,32,64],[39,71,32,69,"leftPoints"],[39,81,32,79],[39,85,32,83],[39,86,32,84],[40,8,33,6],[41,8,34,6],[41,13,34,11],[41,19,34,17,"d"],[41,20,34,18],[41,24,34,22,"device"],[41,30,34,28],[41,31,34,29,"physicalDevices"],[41,46,34,44],[41,48,34,46],[42,10,35,8],[42,14,35,12,"filter"],[42,20,35,18],[42,21,35,19,"physicalDevices"],[42,36,35,34],[42,37,35,35,"includes"],[42,45,35,43],[42,46,35,44,"d"],[42,47,35,45],[42,48,35,46],[42,50,35,48,"rightPoints"],[42,61,35,59],[42,65,35,63],[42,66,35,64],[42,67,35,65],[42,72,35,70,"rightPoints"],[42,83,35,81],[42,87,35,85],[42,88,35,86],[43,8,36,6],[44,6,37,4],[44,7,37,5],[44,13,37,11],[45,8,38,6],[46,8,39,6],[46,12,39,10,"bestDevice"],[46,22,39,20],[46,23,39,21,"physicalDevices"],[46,38,39,36],[46,39,39,37,"includes"],[46,47,39,45],[46,48,39,46],[46,67,39,65],[46,68,39,66],[46,70,39,68,"leftPoints"],[46,80,39,78],[46,84,39,82],[46,85,39,83],[47,8,40,6],[47,12,40,10,"device"],[47,18,40,16],[47,19,40,17,"physicalDevices"],[47,34,40,32],[47,35,40,33,"includes"],[47,43,40,41],[47,44,40,42],[47,63,40,61],[47,64,40,62],[47,66,40,64,"rightPoints"],[47,77,40,75],[47,81,40,79],[47,82,40,80],[48,8,41,6],[49,8,42,6],[49,12,42,10,"bestDevice"],[49,22,42,20],[49,23,42,21,"physicalDevices"],[49,38,42,36],[49,39,42,37,"length"],[49,45,42,43],[49,48,42,46,"device"],[49,54,42,52],[49,55,42,53,"physicalDevices"],[49,70,42,68],[49,71,42,69,"length"],[49,77,42,75],[49,79,42,77,"leftPoints"],[49,89,42,87],[49,93,42,91],[49,94,42,92],[50,8,43,6],[50,12,43,10,"device"],[50,18,43,16],[50,19,43,17,"physicalDevices"],[50,34,43,32],[50,35,43,33,"length"],[50,41,43,39],[50,44,43,42,"bestDevice"],[50,54,43,52],[50,55,43,53,"physicalDevices"],[50,70,43,68],[50,71,43,69,"length"],[50,77,43,75],[50,79,43,77,"rightPoints"],[50,90,43,88],[50,94,43,92],[50,95,43,93],[51,6,44,4],[52,6,45,4],[52,10,45,8,"rightPoints"],[52,21,45,19],[52,24,45,22,"leftPoints"],[52,34,45,32],[52,36,45,34,"bestDevice"],[52,46,45,44],[52,49,45,47,"device"],[52,55,45,53],[53,4,46,2],[54,4,47,2],[54,11,47,9,"bestDevice"],[54,21,47,19],[55,2,48,0],[56,0,48,1],[56,3]],"functionMap":{"names":["<global>","getCameraDevice","devices.filter$argument_0"],"mappings":"AAA;OCa;kCCC,4BD;CDiC"},"hasCjsExports":false},"type":"js/module"}]}