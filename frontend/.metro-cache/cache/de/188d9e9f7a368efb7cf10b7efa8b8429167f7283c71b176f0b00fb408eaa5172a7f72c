{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":32,"index":32}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../devices/getCameraFormat","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":33},"end":{"line":2,"column":61,"index":94}}],"key":"HdcfEGsZ2+dabFDsAyx2/W5ZY5k=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.useCameraFormat = useCameraFormat;\n  var _react = require(_dependencyMap[0], \"react\");\n  var _devicesGetCameraFormat = require(_dependencyMap[1], \"../devices/getCameraFormat\");\n  /**\n   * Get the best matching Camera format for the given device that satisfies your requirements using a sorting filter. By default, formats are sorted by highest to lowest resolution.\n   *\n   * The {@linkcode filters | filters} are ranked by priority, from highest to lowest.\n   * This means the first item you pass will have a higher priority than the second, and so on.\n   *\n   * @param device The Camera Device you're currently using\n   * @param filters The filters you want to use. The format that matches your filter the closest will be returned\n   * @returns The format that matches your filter the closest.\n   * @example\n   * ```ts\n   * const device = useCameraDevice(...)\n   * const format = useCameraFormat(device, [\n   *   { videoResolution: { width: 3048, height: 2160 } },\n   *   { fps: 60 }\n   * ])\n   * ```\n   */\n  function useCameraFormat(device, filters) {\n    const format = (0, _react.useMemo)(() => {\n      if (device == null) return undefined;\n      return (0, _devicesGetCameraFormat.getCameraFormat)(device, filters);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [device, JSON.stringify(filters)]);\n    return format;\n  }\n});","lineCount":36,"map":[[7,2,22,0,"exports"],[7,9,22,0],[7,10,22,0,"useCameraFormat"],[7,25,22,0],[7,28,22,0,"useCameraFormat"],[7,43,22,0],[8,2,1,0],[8,6,1,0,"_react"],[8,12,1,0],[8,15,1,0,"require"],[8,22,1,0],[8,23,1,0,"_dependencyMap"],[8,37,1,0],[9,2,2,0],[9,6,2,0,"_devicesGetCameraFormat"],[9,29,2,0],[9,32,2,0,"require"],[9,39,2,0],[9,40,2,0,"_dependencyMap"],[9,54,2,0],[10,2,4,0],[11,0,5,0],[12,0,6,0],[13,0,7,0],[14,0,8,0],[15,0,9,0],[16,0,10,0],[17,0,11,0],[18,0,12,0],[19,0,13,0],[20,0,14,0],[21,0,15,0],[22,0,16,0],[23,0,17,0],[24,0,18,0],[25,0,19,0],[26,0,20,0],[27,0,21,0],[28,2,22,7],[28,11,22,16,"useCameraFormat"],[28,26,22,31,"useCameraFormat"],[28,27,22,32,"device"],[28,33,22,38],[28,35,22,40,"filters"],[28,42,22,47],[28,44,22,49],[29,4,23,2],[29,10,23,8,"format"],[29,16,23,14],[29,19,23,17],[29,23,23,17,"useMemo"],[29,29,23,24],[29,30,23,24,"useMemo"],[29,37,23,24],[29,39,23,25],[29,45,23,31],[30,6,24,4],[30,10,24,8,"device"],[30,16,24,14],[30,20,24,18],[30,24,24,22],[30,26,24,24],[30,33,24,31,"undefined"],[30,42,24,40],[31,6,25,4],[31,13,25,11],[31,17,25,11,"getCameraFormat"],[31,40,25,26],[31,41,25,26,"getCameraFormat"],[31,56,25,26],[31,58,25,27,"device"],[31,64,25,33],[31,66,25,35,"filters"],[31,73,25,42],[31,74,25,43],[32,6,26,4],[33,4,27,2],[33,5,27,3],[33,7,27,5],[33,8,27,6,"device"],[33,14,27,12],[33,16,27,14,"JSON"],[33,20,27,18],[33,21,27,19,"stringify"],[33,30,27,28],[33,31,27,29,"filters"],[33,38,27,36],[33,39,27,37],[33,40,27,38],[33,41,27,39],[34,4,28,2],[34,11,28,9,"format"],[34,17,28,15],[35,2,29,0],[36,0,29,1],[36,3]],"functionMap":{"names":["<global>","useCameraFormat","useMemo$argument_0"],"mappings":"AAA;OCqB;yBCC;GDI;CDE"},"hasCjsExports":false},"type":"js/module"}]}