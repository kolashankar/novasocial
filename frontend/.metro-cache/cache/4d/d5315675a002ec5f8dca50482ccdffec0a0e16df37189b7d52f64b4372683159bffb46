{"dependencies":[{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":42,"index":42}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.areDimensionsNotEqual = areDimensionsNotEqual;\n  exports.areDimensionsEqual = areDimensionsEqual;\n  exports.roundOffPixel = roundOffPixel;\n  exports.measureParentSize = measureParentSize;\n  exports.measureFirstChildLayout = measureFirstChildLayout;\n  exports.measureItemLayout = measureItemLayout;\n  var _reactNative = require(_dependencyMap[0], \"react-native\");\n  /**\n   * Measures the layout of a view relative to itselft.\n   * Using measure wasn't returing accurate values but this workaround does.\n   * Returns the x, y coordinates and dimensions of the view.\n   *\n   * @param view - The React Native View component to measure\n   * @returns An object containing x, y, width, and height measurements\n   */\n  function measureLayout(view, oldLayout) {\n    // const layout = view.unstable_getBoundingClientRect();\n    // layout.width = roundOffPixel(layout.width);\n    // layout.height = roundOffPixel(layout.height);\n    // return layout;\n    return measureLayoutRelative(view, view, oldLayout);\n  }\n  /**\n   * Measures the layout of a view relative to another view.\n   * Useful for measuring positions relative to a specific reference view.\n   *\n   * @param view - The React Native View component to measure\n   * @param relativeTo - The reference view to measure against\n   * @returns An object containing x, y, width, and height measurements\n   */\n  function measureLayoutRelative(view, relativeTo, oldLayout) {\n    var layout = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    view.measureLayout(relativeTo, (x, y, width, height) => {\n      layout.x = x;\n      layout.y = y;\n      layout.width = roundOffPixel(width);\n      layout.height = roundOffPixel(height);\n    });\n    if (oldLayout) {\n      if (areDimensionsEqual(layout.width, oldLayout.width)) {\n        layout.width = oldLayout.width;\n      }\n      if (areDimensionsEqual(layout.height, oldLayout.height)) {\n        layout.height = oldLayout.height;\n      }\n    }\n    return layout;\n  }\n  /**\n   * Checks if two dimension values are not equal, with a small tolerance.\n   * Used to handle floating-point precision issues in layout measurements.\n   *\n   * @param value1 - First dimension value to compare\n   * @param value2 - Second dimension value to compare\n   * @returns true if the values are significantly different, false otherwise\n   */\n  function areDimensionsNotEqual(value1, value2) {\n    return !areDimensionsEqual(value1, value2);\n  }\n  /**\n   * Checks if two dimension values are equal, with a small tolerance.\n   * Used to handle floating-point precision issues in layout measurements.\n   *\n   * @param value1 - First dimension value to compare\n   * @param value2 - Second dimension value to compare\n   * @returns true if the values are approximately equal, false otherwise\n   */\n  function areDimensionsEqual(value1, value2) {\n    return Math.abs(_reactNative.PixelRatio.getPixelSizeForLayoutSize(value1) - _reactNative.PixelRatio.getPixelSizeForLayoutSize(value2)) <= 1;\n  }\n  function roundOffPixel(value) {\n    return _reactNative.PixelRatio.roundToNearestPixel(value);\n  }\n  /**\n   * Specific method for easier mocking\n   * Measures the layout of parent of RecyclerView\n   * Returns the x, y coordinates and dimensions of the view.\n   * @param view - The React Native View component to measure\n   * @returns An object containing x, y, width, and height measurements\n   */\n  function measureParentSize(view) {\n    return measureLayout(view, undefined);\n  }\n  /**\n   * Specific method for easier mocking\n   * Measures the layout of child container of RecyclerView\n   * @param childContainerView\n   * @param parentView\n   * @returns\n   */\n  function measureFirstChildLayout(childContainerView, parentView) {\n    return measureLayoutRelative(childContainerView, parentView, undefined);\n  }\n  /**\n   * Specific method for easier mocking\n   * Measures the layout of items of RecyclerView\n   * @param item\n   * @param oldLayout\n   * @returns\n   */\n  function measureItemLayout(item, oldLayout) {\n    return measureLayout(item, oldLayout);\n  }\n});","lineCount":115,"map":[[7,2,51,0,"exports"],[7,9,51,0],[7,10,51,0,"areDimensionsNotEqual"],[7,31,51,0],[7,34,51,0,"areDimensionsNotEqual"],[7,55,51,0],[8,2,62,0,"exports"],[8,9,62,0],[8,10,62,0,"areDimensionsEqual"],[8,28,62,0],[8,31,62,0,"areDimensionsEqual"],[8,49,62,0],[9,2,66,0,"exports"],[9,9,66,0],[9,10,66,0,"roundOffPixel"],[9,23,66,0],[9,26,66,0,"roundOffPixel"],[9,39,66,0],[10,2,76,0,"exports"],[10,9,76,0],[10,10,76,0,"measureParentSize"],[10,27,76,0],[10,30,76,0,"measureParentSize"],[10,47,76,0],[11,2,86,0,"exports"],[11,9,86,0],[11,10,86,0,"measureFirstChildLayout"],[11,33,86,0],[11,36,86,0,"measureFirstChildLayout"],[11,59,86,0],[12,2,96,0,"exports"],[12,9,96,0],[12,10,96,0,"measureItemLayout"],[12,27,96,0],[12,30,96,0,"measureItemLayout"],[12,47,96,0],[13,2,1,0],[13,6,1,0,"_reactNative"],[13,18,1,0],[13,21,1,0,"require"],[13,28,1,0],[13,29,1,0,"_dependencyMap"],[13,43,1,0],[14,2,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[19,0,7,0],[20,0,8,0],[21,0,9,0],[22,2,10,0],[22,11,10,9,"measureLayout"],[22,24,10,22,"measureLayout"],[22,25,10,23,"view"],[22,29,10,27],[22,31,10,29,"oldLayout"],[22,40,10,38],[22,42,10,40],[23,4,11,4],[24,4,12,4],[25,4,13,4],[26,4,14,4],[27,4,15,4],[27,11,15,11,"measureLayoutRelative"],[27,32,15,32],[27,33,15,33,"view"],[27,37,15,37],[27,39,15,39,"view"],[27,43,15,43],[27,45,15,45,"oldLayout"],[27,54,15,54],[27,55,15,55],[28,2,16,0],[29,2,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,2,25,0],[37,11,25,9,"measureLayoutRelative"],[37,32,25,30,"measureLayoutRelative"],[37,33,25,31,"view"],[37,37,25,35],[37,39,25,37,"relativeTo"],[37,49,25,47],[37,51,25,49,"oldLayout"],[37,60,25,58],[37,62,25,60],[38,4,26,4],[38,8,26,10,"layout"],[38,14,26,16],[38,17,26,19],[39,6,26,21,"x"],[39,7,26,22],[39,9,26,24],[39,10,26,25],[40,6,26,27,"y"],[40,7,26,28],[40,9,26,30],[40,10,26,31],[41,6,26,33,"width"],[41,11,26,38],[41,13,26,40],[41,14,26,41],[42,6,26,43,"height"],[42,12,26,49],[42,14,26,51],[43,4,26,53],[43,5,26,54],[44,4,27,4,"view"],[44,8,27,8],[44,9,27,9,"measureLayout"],[44,22,27,22],[44,23,27,23,"relativeTo"],[44,33,27,33],[44,35,27,35],[44,36,27,36,"x"],[44,37,27,37],[44,39,27,39,"y"],[44,40,27,40],[44,42,27,42,"width"],[44,47,27,47],[44,49,27,49,"height"],[44,55,27,55],[44,60,27,60],[45,6,28,8,"layout"],[45,12,28,14],[45,13,28,15,"x"],[45,14,28,16],[45,17,28,19,"x"],[45,18,28,20],[46,6,29,8,"layout"],[46,12,29,14],[46,13,29,15,"y"],[46,14,29,16],[46,17,29,19,"y"],[46,18,29,20],[47,6,30,8,"layout"],[47,12,30,14],[47,13,30,15,"width"],[47,18,30,20],[47,21,30,23,"roundOffPixel"],[47,34,30,36],[47,35,30,37,"width"],[47,40,30,42],[47,41,30,43],[48,6,31,8,"layout"],[48,12,31,14],[48,13,31,15,"height"],[48,19,31,21],[48,22,31,24,"roundOffPixel"],[48,35,31,37],[48,36,31,38,"height"],[48,42,31,44],[48,43,31,45],[49,4,32,4],[49,5,32,5],[49,6,32,6],[50,4,33,4],[50,8,33,8,"oldLayout"],[50,17,33,17],[50,19,33,19],[51,6,34,8],[51,10,34,12,"areDimensionsEqual"],[51,28,34,30],[51,29,34,31,"layout"],[51,35,34,37],[51,36,34,38,"width"],[51,41,34,43],[51,43,34,45,"oldLayout"],[51,52,34,54],[51,53,34,55,"width"],[51,58,34,60],[51,59,34,61],[51,61,34,63],[52,8,35,12,"layout"],[52,14,35,18],[52,15,35,19,"width"],[52,20,35,24],[52,23,35,27,"oldLayout"],[52,32,35,36],[52,33,35,37,"width"],[52,38,35,42],[53,6,36,8],[54,6,37,8],[54,10,37,12,"areDimensionsEqual"],[54,28,37,30],[54,29,37,31,"layout"],[54,35,37,37],[54,36,37,38,"height"],[54,42,37,44],[54,44,37,46,"oldLayout"],[54,53,37,55],[54,54,37,56,"height"],[54,60,37,62],[54,61,37,63],[54,63,37,65],[55,8,38,12,"layout"],[55,14,38,18],[55,15,38,19,"height"],[55,21,38,25],[55,24,38,28,"oldLayout"],[55,33,38,37],[55,34,38,38,"height"],[55,40,38,44],[56,6,39,8],[57,4,40,4],[58,4,41,4],[58,11,41,11,"layout"],[58,17,41,17],[59,2,42,0],[60,2,43,0],[61,0,44,0],[62,0,45,0],[63,0,46,0],[64,0,47,0],[65,0,48,0],[66,0,49,0],[67,0,50,0],[68,2,51,7],[68,11,51,16,"areDimensionsNotEqual"],[68,32,51,37,"areDimensionsNotEqual"],[68,33,51,38,"value1"],[68,39,51,44],[68,41,51,46,"value2"],[68,47,51,52],[68,49,51,54],[69,4,52,4],[69,11,52,11],[69,12,52,12,"areDimensionsEqual"],[69,30,52,30],[69,31,52,31,"value1"],[69,37,52,37],[69,39,52,39,"value2"],[69,45,52,45],[69,46,52,46],[70,2,53,0],[71,2,54,0],[72,0,55,0],[73,0,56,0],[74,0,57,0],[75,0,58,0],[76,0,59,0],[77,0,60,0],[78,0,61,0],[79,2,62,7],[79,11,62,16,"areDimensionsEqual"],[79,29,62,34,"areDimensionsEqual"],[79,30,62,35,"value1"],[79,36,62,41],[79,38,62,43,"value2"],[79,44,62,49],[79,46,62,51],[80,4,63,4],[80,11,63,12,"Math"],[80,15,63,16],[80,16,63,17,"abs"],[80,19,63,20],[80,20,63,21,"PixelRatio"],[80,32,63,31],[80,33,63,31,"PixelRatio"],[80,43,63,31],[80,44,63,32,"getPixelSizeForLayoutSize"],[80,69,63,57],[80,70,63,58,"value1"],[80,76,63,64],[80,77,63,65],[80,80,64,8,"PixelRatio"],[80,92,64,18],[80,93,64,18,"PixelRatio"],[80,103,64,18],[80,104,64,19,"getPixelSizeForLayoutSize"],[80,129,64,44],[80,130,64,45,"value2"],[80,136,64,51],[80,137,64,52],[80,138,64,53],[80,142,64,57],[80,143,64,58],[81,2,65,0],[82,2,66,7],[82,11,66,16,"roundOffPixel"],[82,24,66,29,"roundOffPixel"],[82,25,66,30,"value"],[82,30,66,35],[82,32,66,37],[83,4,67,4],[83,11,67,11,"PixelRatio"],[83,23,67,21],[83,24,67,21,"PixelRatio"],[83,34,67,21],[83,35,67,22,"roundToNearestPixel"],[83,54,67,41],[83,55,67,42,"value"],[83,60,67,47],[83,61,67,48],[84,2,68,0],[85,2,69,0],[86,0,70,0],[87,0,71,0],[88,0,72,0],[89,0,73,0],[90,0,74,0],[91,0,75,0],[92,2,76,7],[92,11,76,16,"measureParentSize"],[92,28,76,33,"measureParentSize"],[92,29,76,34,"view"],[92,33,76,38],[92,35,76,40],[93,4,77,4],[93,11,77,11,"measureLayout"],[93,24,77,24],[93,25,77,25,"view"],[93,29,77,29],[93,31,77,31,"undefined"],[93,40,77,40],[93,41,77,41],[94,2,78,0],[95,2,79,0],[96,0,80,0],[97,0,81,0],[98,0,82,0],[99,0,83,0],[100,0,84,0],[101,0,85,0],[102,2,86,7],[102,11,86,16,"measureFirstChildLayout"],[102,34,86,39,"measureFirstChildLayout"],[102,35,86,40,"childContainerView"],[102,53,86,58],[102,55,86,60,"parentView"],[102,65,86,70],[102,67,86,72],[103,4,87,4],[103,11,87,11,"measureLayoutRelative"],[103,32,87,32],[103,33,87,33,"childContainerView"],[103,51,87,51],[103,53,87,53,"parentView"],[103,63,87,63],[103,65,87,65,"undefined"],[103,74,87,74],[103,75,87,75],[104,2,88,0],[105,2,89,0],[106,0,90,0],[107,0,91,0],[108,0,92,0],[109,0,93,0],[110,0,94,0],[111,0,95,0],[112,2,96,7],[112,11,96,16,"measureItemLayout"],[112,28,96,33,"measureItemLayout"],[112,29,96,34,"item"],[112,33,96,38],[112,35,96,40,"oldLayout"],[112,44,96,49],[112,46,96,51],[113,4,97,4],[113,11,97,11,"measureLayout"],[113,24,97,24],[113,25,97,25,"item"],[113,29,97,29],[113,31,97,31,"oldLayout"],[113,40,97,40],[113,41,97,41],[114,2,98,0],[115,0,98,1],[115,3]],"functionMap":{"names":["<global>","measureLayout","measureLayoutRelative","view.measureLayout$argument_1","areDimensionsNotEqual","areDimensionsEqual","roundOffPixel","measureParentSize","measureFirstChildLayout","measureItemLayout"],"mappings":"AAA;ACS;CDM;AES;mCCE;KDK;CFU;OIS;CJE;OKS;CLG;OMC;CNE;OOQ;CPE;OQQ;CRE;OSQ;CTE"},"hasCjsExports":false},"type":"js/module"}]}