{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/callSuper","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"378KbBHdmndC3iMXZ2Ix8oB3LeE=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/superPropGet","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"b4Lel0pEiTM8mvZZX/d05uR+OmU=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA=","exportNames":["*"],"imports":1}},{"name":"./LayoutManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"8kHEUlKQMmxShjK4DMjntIDDVoM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"RVGridLayoutManagerImpl\", {\n    enumerable: true,\n    get: function () {\n      return RVGridLayoutManagerImpl;\n    }\n  });\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _babelRuntimeHelpersCallSuper = require(_dependencyMap[2], \"@babel/runtime/helpers/callSuper\");\n  var _callSuper = _interopDefault(_babelRuntimeHelpersCallSuper);\n  var _babelRuntimeHelpersSuperPropGet = require(_dependencyMap[3], \"@babel/runtime/helpers/superPropGet\");\n  var _superPropGet = _interopDefault(_babelRuntimeHelpersSuperPropGet);\n  var _babelRuntimeHelpersInherits = require(_dependencyMap[4], \"@babel/runtime/helpers/inherits\");\n  var _inherits = _interopDefault(_babelRuntimeHelpersInherits);\n  var _LayoutManager = require(_dependencyMap[5], \"./LayoutManager\");\n  /**\n   * GridLayoutManager implementation that arranges items in a grid pattern.\n   * Items are placed in rows and columns, with support for items spanning multiple columns.\n   */\n  var RVGridLayoutManagerImpl = /*#__PURE__*/function (_RVLayoutManager) {\n    function RVGridLayoutManagerImpl(params, previousLayoutManager) {\n      var _this;\n      (0, _classCallCheck.default)(this, RVGridLayoutManagerImpl);\n      _this = (0, _callSuper.default)(this, RVGridLayoutManagerImpl, [params, previousLayoutManager]);\n      /** If there's a span change for grid layout, we need to recompute all the widths */\n      _this.fullRelayoutRequired = false;\n      _this.boundedSize = params.windowSize.width;\n      return _this;\n    }\n    /**\n     * Updates layout parameters and triggers recomputation if necessary.\n     * @param params New layout parameters\n     */\n    (0, _inherits.default)(RVGridLayoutManagerImpl, _RVLayoutManager);\n    return (0, _createClass.default)(RVGridLayoutManagerImpl, [{\n      key: \"updateLayoutParams\",\n      value: function updateLayoutParams(params) {\n        var prevNumColumns = this.maxColumns;\n        (0, _superPropGet.default)(RVGridLayoutManagerImpl, \"updateLayoutParams\", this, 3)([params]);\n        if (this.boundedSize !== params.windowSize.width || prevNumColumns !== params.maxColumns) {\n          this.boundedSize = params.windowSize.width;\n          if (this.layouts.length > 0) {\n            // update all widths\n            this.updateAllWidths();\n            this.recomputeLayouts(0, this.layouts.length - 1);\n            this.requiresRepaint = true;\n          }\n        }\n      }\n      /**\n       * Processes layout information for items, updating their dimensions.\n       * @param layoutInfo Array of layout information for items\n       * @param itemCount Total number of items in the list\n       */\n    }, {\n      key: \"processLayoutInfo\",\n      value: function processLayoutInfo(layoutInfo, itemCount) {\n        for (var info of layoutInfo) {\n          var index = info.index,\n            dimensions = info.dimensions;\n          var layout = this.layouts[index];\n          layout.height = dimensions.height;\n          layout.isHeightMeasured = true;\n          layout.isWidthMeasured = true;\n        }\n        // TODO: Can be optimized\n        if (this.fullRelayoutRequired) {\n          this.updateAllWidths();\n          this.fullRelayoutRequired = false;\n          return 0;\n        }\n      }\n      /**\n       * Estimates layout dimensions for an item at the given index.\n       * @param index Index of the item to estimate layout for\n       */\n    }, {\n      key: \"estimateLayout\",\n      value: function estimateLayout(index) {\n        var layout = this.layouts[index];\n        layout.width = this.getWidth(index);\n        layout.height = this.getEstimatedHeight(index);\n        layout.isWidthMeasured = true;\n        layout.enforcedWidth = true;\n      }\n      /**\n       * Handles span change for an item.\n       * @param index Index of the item\n       */\n    }, {\n      key: \"handleSpanChange\",\n      value: function handleSpanChange(index) {\n        this.fullRelayoutRequired = true;\n      }\n      /**\n       * Returns the total size of the layout area.\n       * @returns RVDimension containing width and height of the layout\n       */\n    }, {\n      key: \"getLayoutSize\",\n      value: function getLayoutSize() {\n        if (this.layouts.length === 0) return {\n          width: 0,\n          height: 0\n        };\n        var totalHeight = this.computeTotalHeightTillRow(this.layouts.length - 1);\n        return {\n          width: this.boundedSize,\n          height: totalHeight\n        };\n      }\n      /**\n       * Recomputes layouts for items in the given range.\n       * @param startIndex Starting index of items to recompute\n       * @param endIndex Ending index of items to recompute\n       */\n    }, {\n      key: \"recomputeLayouts\",\n      value: function recomputeLayouts(startIndex, endIndex) {\n        var newStartIndex = this.locateFirstIndexInRow(Math.max(0, startIndex - 1));\n        var startVal = this.getLayout(newStartIndex);\n        var startX = startVal.x;\n        var startY = startVal.y;\n        for (var i = newStartIndex; i <= endIndex; i++) {\n          var layout = this.getLayout(i);\n          if (!this.checkBounds(startX, layout.width)) {\n            var tallestItem = this.processAndReturnTallestItemInRow(i - 1);\n            startY = tallestItem.y + tallestItem.height;\n            startX = 0;\n          }\n          layout.x = startX;\n          layout.y = startY;\n          startX += layout.width;\n        }\n        if (endIndex === this.layouts.length - 1) {\n          this.processAndReturnTallestItemInRow(endIndex);\n        }\n      }\n      /**\n       * Calculates the width of an item based on its span.\n       * @param index Index of the item\n       * @returns Width of the item\n       */\n    }, {\n      key: \"getWidth\",\n      value: function getWidth(index) {\n        return this.boundedSize / this.maxColumns * this.getSpan(index);\n      }\n      /**\n       * Processes items in a row and returns the tallest item.\n       * Also handles height normalization for items in the same row.\n       * Tallest item per row helps in forcing tallest items height on neighbouring items.\n       * @param endIndex Index of the last item in the row\n       * @returns The tallest item in the row\n       */\n    }, {\n      key: \"processAndReturnTallestItemInRow\",\n      value: function processAndReturnTallestItemInRow(endIndex) {\n        var _a, _b;\n        var startIndex = this.locateFirstIndexInRow(endIndex);\n        var tallestItem;\n        var maxHeight = 0;\n        var i = startIndex;\n        var isMeasured = false;\n        while (i <= endIndex) {\n          var layout = this.layouts[i];\n          isMeasured = isMeasured || Boolean(layout.isHeightMeasured);\n          maxHeight = Math.max(maxHeight, layout.height);\n          if (layout.height > ((_a = layout.minHeight) !== null && _a !== void 0 ? _a : 0) && layout.height > ((_b = tallestItem === null || tallestItem === void 0 ? void 0 : tallestItem.height) !== null && _b !== void 0 ? _b : 0)) {\n            tallestItem = layout;\n          }\n          i++;\n          if (i >= this.layouts.length) {\n            break;\n          }\n        }\n        if (!tallestItem && maxHeight > 0) {\n          maxHeight = Number.MAX_SAFE_INTEGER;\n        }\n        tallestItem = tallestItem !== null && tallestItem !== void 0 ? tallestItem : this.layouts[startIndex];\n        if (!isMeasured) {\n          return tallestItem;\n        }\n        if (tallestItem) {\n          var targetHeight = tallestItem.height;\n          if (maxHeight - tallestItem.height > 1) {\n            targetHeight = 0;\n            this.requiresRepaint = true;\n          }\n          i = startIndex;\n          while (i <= endIndex) {\n            this.layouts[i].minHeight = targetHeight;\n            if (targetHeight > 0) {\n              this.layouts[i].height = targetHeight;\n            }\n            i++;\n            if (i >= this.layouts.length) {\n              break;\n            }\n          }\n          tallestItem.minHeight = 0;\n        }\n        return tallestItem;\n      }\n      /**\n       * Computes the total height of the layout.\n       * @param endIndex Index of the last item in the row\n       * @returns Total height of the layout\n       */\n    }, {\n      key: \"computeTotalHeightTillRow\",\n      value: function computeTotalHeightTillRow(endIndex) {\n        var startIndex = this.locateFirstIndexInRow(endIndex);\n        var y = this.layouts[startIndex].y;\n        var maxHeight = 0;\n        var i = startIndex;\n        while (i <= endIndex) {\n          maxHeight = Math.max(maxHeight, this.layouts[i].height);\n          i++;\n          if (i >= this.layouts.length) {\n            break;\n          }\n        }\n        return y + maxHeight;\n      }\n    }, {\n      key: \"updateAllWidths\",\n      value: function updateAllWidths() {\n        for (var i = 0; i < this.layouts.length; i++) {\n          this.layouts[i].width = this.getWidth(i);\n        }\n      }\n      /**\n       * Checks if an item can fit within the bounded width.\n       * @param itemX Starting X position of the item\n       * @param width Width of the item\n       * @returns True if the item fits within bounds\n       */\n    }, {\n      key: \"checkBounds\",\n      value: function checkBounds(itemX, width) {\n        return itemX + width <= this.boundedSize + 0.9;\n      }\n      /**\n       * Locates the index of the first item in the current row.\n       * @param itemIndex Index to start searching from\n       * @returns Index of the first item in the row\n       */\n    }, {\n      key: \"locateFirstIndexInRow\",\n      value: function locateFirstIndexInRow(itemIndex) {\n        if (itemIndex === 0) {\n          return 0;\n        }\n        var i = itemIndex;\n        for (; i >= 0; i--) {\n          if (this.layouts[i].x === 0) {\n            break;\n          }\n        }\n        return Math.max(i, 0);\n      }\n    }]);\n  }(_LayoutManager.RVLayoutManager);\n});","lineCount":278,"map":[[12,2,6,0,"Object"],[12,8,6,0],[12,9,6,0,"defineProperty"],[12,23,6,0],[12,24,6,0,"exports"],[12,31,6,0],[13,4,6,0,"enumerable"],[13,14,6,0],[14,4,6,0,"get"],[14,7,6,0],[14,18,6,0,"get"],[14,19,6,0],[15,6,6,0],[15,13,6,0,"RVGridLayoutManagerImpl"],[15,36,6,0],[16,4,6,0],[17,2,6,0],[18,2,220,1],[18,6,220,1,"_babelRuntimeHelpersClassCallCheck"],[18,40,220,1],[18,43,220,1,"require"],[18,50,220,1],[18,51,220,1,"_dependencyMap"],[18,65,220,1],[19,2,220,1],[19,6,220,1,"_classCallCheck"],[19,21,220,1],[19,24,220,1,"_interopDefault"],[19,39,220,1],[19,40,220,1,"_babelRuntimeHelpersClassCallCheck"],[19,74,220,1],[20,2,220,1],[20,6,220,1,"_babelRuntimeHelpersCreateClass"],[20,37,220,1],[20,40,220,1,"require"],[20,47,220,1],[20,48,220,1,"_dependencyMap"],[20,62,220,1],[21,2,220,1],[21,6,220,1,"_createClass"],[21,18,220,1],[21,21,220,1,"_interopDefault"],[21,36,220,1],[21,37,220,1,"_babelRuntimeHelpersCreateClass"],[21,68,220,1],[22,2,220,1],[22,6,220,1,"_babelRuntimeHelpersCallSuper"],[22,35,220,1],[22,38,220,1,"require"],[22,45,220,1],[22,46,220,1,"_dependencyMap"],[22,60,220,1],[23,2,220,1],[23,6,220,1,"_callSuper"],[23,16,220,1],[23,19,220,1,"_interopDefault"],[23,34,220,1],[23,35,220,1,"_babelRuntimeHelpersCallSuper"],[23,64,220,1],[24,2,220,1],[24,6,220,1,"_babelRuntimeHelpersSuperPropGet"],[24,38,220,1],[24,41,220,1,"require"],[24,48,220,1],[24,49,220,1,"_dependencyMap"],[24,63,220,1],[25,2,220,1],[25,6,220,1,"_superPropGet"],[25,19,220,1],[25,22,220,1,"_interopDefault"],[25,37,220,1],[25,38,220,1,"_babelRuntimeHelpersSuperPropGet"],[25,70,220,1],[26,2,220,1],[26,6,220,1,"_babelRuntimeHelpersInherits"],[26,34,220,1],[26,37,220,1,"require"],[26,44,220,1],[26,45,220,1,"_dependencyMap"],[26,59,220,1],[27,2,220,1],[27,6,220,1,"_inherits"],[27,15,220,1],[27,18,220,1,"_interopDefault"],[27,33,220,1],[27,34,220,1,"_babelRuntimeHelpersInherits"],[27,62,220,1],[28,2,1,0],[28,6,1,0,"_LayoutManager"],[28,20,1,0],[28,23,1,0,"require"],[28,30,1,0],[28,31,1,0,"_dependencyMap"],[28,45,1,0],[29,2,2,0],[30,0,3,0],[31,0,4,0],[32,0,5,0],[33,2,2,0],[33,6,6,13,"RVGridLayoutManagerImpl"],[33,29,6,36],[33,55,6,36,"_RVLayoutManager"],[33,71,6,36],[34,4,7,4],[34,13,7,4,"RVGridLayoutManagerImpl"],[34,37,7,16,"params"],[34,43,7,22],[34,45,7,24,"previousLayoutManager"],[34,66,7,45],[34,68,7,47],[35,6,7,47],[35,10,7,47,"_this"],[35,15,7,47],[36,6,7,47],[36,10,7,47,"_classCallCheck"],[36,25,7,47],[36,26,7,47,"default"],[36,33,7,47],[36,41,7,47,"RVGridLayoutManagerImpl"],[36,64,7,47],[37,6,8,8,"_this"],[37,11,8,8],[37,18,8,8,"_callSuper"],[37,28,8,8],[37,29,8,8,"default"],[37,36,8,8],[37,44,8,8,"RVGridLayoutManagerImpl"],[37,67,8,8],[37,70,8,14,"params"],[37,76,8,20],[37,78,8,22,"previousLayoutManager"],[37,99,8,43],[38,6,9,8],[39,6,10,8,"_this"],[39,11,10,8],[39,12,10,13,"fullRelayoutRequired"],[39,32,10,33],[39,35,10,36],[39,40,10,41],[40,6,11,8,"_this"],[40,11,11,8],[40,12,11,13,"boundedSize"],[40,23,11,24],[40,26,11,27,"params"],[40,32,11,33],[40,33,11,34,"windowSize"],[40,43,11,44],[40,44,11,45,"width"],[40,49,11,50],[41,6,11,51],[41,13,11,51,"_this"],[41,18,11,51],[42,4,12,4],[43,4,13,4],[44,0,14,0],[45,0,15,0],[46,0,16,0],[47,4,13,4],[47,8,13,4,"_inherits"],[47,17,13,4],[47,18,13,4,"default"],[47,25,13,4],[47,27,13,4,"RVGridLayoutManagerImpl"],[47,50,13,4],[47,52,13,4,"_RVLayoutManager"],[47,68,13,4],[48,4,13,4],[48,15,13,4,"_createClass"],[48,27,13,4],[48,28,13,4,"default"],[48,35,13,4],[48,37,13,4,"RVGridLayoutManagerImpl"],[48,60,13,4],[49,6,13,4,"key"],[49,9,13,4],[50,6,13,4,"value"],[50,11,13,4],[50,13,17,4],[50,22,17,4,"updateLayoutParams"],[50,40,17,22,"updateLayoutParams"],[50,41,17,23,"params"],[50,47,17,29],[50,49,17,31],[51,8,18,8],[51,12,18,14,"prevNumColumns"],[51,26,18,28],[51,29,18,31],[51,33,18,35],[51,34,18,36,"maxColumns"],[51,44,18,46],[52,8,19,8],[52,12,19,8,"_superPropGet"],[52,25,19,8],[52,26,19,8,"default"],[52,33,19,8],[52,35,19,8,"RVGridLayoutManagerImpl"],[52,58,19,8],[52,92,19,33,"params"],[52,98,19,39],[53,8,20,8],[53,12,20,12],[53,16,20,16],[53,17,20,17,"boundedSize"],[53,28,20,28],[53,33,20,33,"params"],[53,39,20,39],[53,40,20,40,"windowSize"],[53,50,20,50],[53,51,20,51,"width"],[53,56,20,56],[53,60,21,12,"prevNumColumns"],[53,74,21,26],[53,79,21,31,"params"],[53,85,21,37],[53,86,21,38,"maxColumns"],[53,96,21,48],[53,98,21,50],[54,10,22,12],[54,14,22,16],[54,15,22,17,"boundedSize"],[54,26,22,28],[54,29,22,31,"params"],[54,35,22,37],[54,36,22,38,"windowSize"],[54,46,22,48],[54,47,22,49,"width"],[54,52,22,54],[55,10,23,12],[55,14,23,16],[55,18,23,20],[55,19,23,21,"layouts"],[55,26,23,28],[55,27,23,29,"length"],[55,33,23,35],[55,36,23,38],[55,37,23,39],[55,39,23,41],[56,12,24,16],[57,12,25,16],[57,16,25,20],[57,17,25,21,"updateAllWidths"],[57,32,25,36],[57,33,25,37],[57,34,25,38],[58,12,26,16],[58,16,26,20],[58,17,26,21,"recomputeLayouts"],[58,33,26,37],[58,34,26,38],[58,35,26,39],[58,37,26,41],[58,41,26,45],[58,42,26,46,"layouts"],[58,49,26,53],[58,50,26,54,"length"],[58,56,26,60],[58,59,26,63],[58,60,26,64],[58,61,26,65],[59,12,27,16],[59,16,27,20],[59,17,27,21,"requiresRepaint"],[59,32,27,36],[59,35,27,39],[59,39,27,43],[60,10,28,12],[61,8,29,8],[62,6,30,4],[63,6,31,4],[64,0,32,0],[65,0,33,0],[66,0,34,0],[67,0,35,0],[68,4,31,4],[69,6,31,4,"key"],[69,9,31,4],[70,6,31,4,"value"],[70,11,31,4],[70,13,36,4],[70,22,36,4,"processLayoutInfo"],[70,39,36,21,"processLayoutInfo"],[70,40,36,22,"layoutInfo"],[70,50,36,32],[70,52,36,34,"itemCount"],[70,61,36,43],[70,63,36,45],[71,8,37,8],[71,13,37,13],[71,17,37,19,"info"],[71,21,37,23],[71,25,37,27,"layoutInfo"],[71,35,37,37],[71,37,37,39],[72,10,38,12],[72,14,38,20,"index"],[72,19,38,25],[72,22,38,42,"info"],[72,26,38,46],[72,27,38,20,"index"],[72,32,38,25],[73,12,38,27,"dimensions"],[73,22,38,37],[73,25,38,42,"info"],[73,29,38,46],[73,30,38,27,"dimensions"],[73,40,38,37],[74,10,39,12],[74,14,39,18,"layout"],[74,20,39,24],[74,23,39,27],[74,27,39,31],[74,28,39,32,"layouts"],[74,35,39,39],[74,36,39,40,"index"],[74,41,39,45],[74,42,39,46],[75,10,40,12,"layout"],[75,16,40,18],[75,17,40,19,"height"],[75,23,40,25],[75,26,40,28,"dimensions"],[75,36,40,38],[75,37,40,39,"height"],[75,43,40,45],[76,10,41,12,"layout"],[76,16,41,18],[76,17,41,19,"isHeightMeasured"],[76,33,41,35],[76,36,41,38],[76,40,41,42],[77,10,42,12,"layout"],[77,16,42,18],[77,17,42,19,"isWidthMeasured"],[77,32,42,34],[77,35,42,37],[77,39,42,41],[78,8,43,8],[79,8,44,8],[80,8,45,8],[80,12,45,12],[80,16,45,16],[80,17,45,17,"fullRelayoutRequired"],[80,37,45,37],[80,39,45,39],[81,10,46,12],[81,14,46,16],[81,15,46,17,"updateAllWidths"],[81,30,46,32],[81,31,46,33],[81,32,46,34],[82,10,47,12],[82,14,47,16],[82,15,47,17,"fullRelayoutRequired"],[82,35,47,37],[82,38,47,40],[82,43,47,45],[83,10,48,12],[83,17,48,19],[83,18,48,20],[84,8,49,8],[85,6,50,4],[86,6,51,4],[87,0,52,0],[88,0,53,0],[89,0,54,0],[90,4,51,4],[91,6,51,4,"key"],[91,9,51,4],[92,6,51,4,"value"],[92,11,51,4],[92,13,55,4],[92,22,55,4,"estimateLayout"],[92,36,55,18,"estimateLayout"],[92,37,55,19,"index"],[92,42,55,24],[92,44,55,26],[93,8,56,8],[93,12,56,14,"layout"],[93,18,56,20],[93,21,56,23],[93,25,56,27],[93,26,56,28,"layouts"],[93,33,56,35],[93,34,56,36,"index"],[93,39,56,41],[93,40,56,42],[94,8,57,8,"layout"],[94,14,57,14],[94,15,57,15,"width"],[94,20,57,20],[94,23,57,23],[94,27,57,27],[94,28,57,28,"getWidth"],[94,36,57,36],[94,37,57,37,"index"],[94,42,57,42],[94,43,57,43],[95,8,58,8,"layout"],[95,14,58,14],[95,15,58,15,"height"],[95,21,58,21],[95,24,58,24],[95,28,58,28],[95,29,58,29,"getEstimatedHeight"],[95,47,58,47],[95,48,58,48,"index"],[95,53,58,53],[95,54,58,54],[96,8,59,8,"layout"],[96,14,59,14],[96,15,59,15,"isWidthMeasured"],[96,30,59,30],[96,33,59,33],[96,37,59,37],[97,8,60,8,"layout"],[97,14,60,14],[97,15,60,15,"enforcedWidth"],[97,28,60,28],[97,31,60,31],[97,35,60,35],[98,6,61,4],[99,6,62,4],[100,0,63,0],[101,0,64,0],[102,0,65,0],[103,4,62,4],[104,6,62,4,"key"],[104,9,62,4],[105,6,62,4,"value"],[105,11,62,4],[105,13,66,4],[105,22,66,4,"handleSpanChange"],[105,38,66,20,"handleSpanChange"],[105,39,66,21,"index"],[105,44,66,26],[105,46,66,28],[106,8,67,8],[106,12,67,12],[106,13,67,13,"fullRelayoutRequired"],[106,33,67,33],[106,36,67,36],[106,40,67,40],[107,6,68,4],[108,6,69,4],[109,0,70,0],[110,0,71,0],[111,0,72,0],[112,4,69,4],[113,6,69,4,"key"],[113,9,69,4],[114,6,69,4,"value"],[114,11,69,4],[114,13,73,4],[114,22,73,4,"getLayoutSize"],[114,35,73,17,"getLayoutSize"],[114,36,73,17],[114,38,73,20],[115,8,74,8],[115,12,74,12],[115,16,74,16],[115,17,74,17,"layouts"],[115,24,74,24],[115,25,74,25,"length"],[115,31,74,31],[115,36,74,36],[115,37,74,37],[115,39,75,12],[115,46,75,19],[116,10,75,21,"width"],[116,15,75,26],[116,17,75,28],[116,18,75,29],[117,10,75,31,"height"],[117,16,75,37],[117,18,75,39],[118,8,75,41],[118,9,75,42],[119,8,76,8],[119,12,76,14,"totalHeight"],[119,23,76,25],[119,26,76,28],[119,30,76,32],[119,31,76,33,"computeTotalHeightTillRow"],[119,56,76,58],[119,57,76,59],[119,61,76,63],[119,62,76,64,"layouts"],[119,69,76,71],[119,70,76,72,"length"],[119,76,76,78],[119,79,76,81],[119,80,76,82],[119,81,76,83],[120,8,77,8],[120,15,77,15],[121,10,78,12,"width"],[121,15,78,17],[121,17,78,19],[121,21,78,23],[121,22,78,24,"boundedSize"],[121,33,78,35],[122,10,79,12,"height"],[122,16,79,18],[122,18,79,20,"totalHeight"],[123,8,80,8],[123,9,80,9],[124,6,81,4],[125,6,82,4],[126,0,83,0],[127,0,84,0],[128,0,85,0],[129,0,86,0],[130,4,82,4],[131,6,82,4,"key"],[131,9,82,4],[132,6,82,4,"value"],[132,11,82,4],[132,13,87,4],[132,22,87,4,"recomputeLayouts"],[132,38,87,20,"recomputeLayouts"],[132,39,87,21,"startIndex"],[132,49,87,31],[132,51,87,33,"endIndex"],[132,59,87,41],[132,61,87,43],[133,8,88,8],[133,12,88,14,"newStartIndex"],[133,25,88,27],[133,28,88,30],[133,32,88,34],[133,33,88,35,"locateFirstIndexInRow"],[133,54,88,56],[133,55,88,57,"Math"],[133,59,88,61],[133,60,88,62,"max"],[133,63,88,65],[133,64,88,66],[133,65,88,67],[133,67,88,69,"startIndex"],[133,77,88,79],[133,80,88,82],[133,81,88,83],[133,82,88,84],[133,83,88,85],[134,8,89,8],[134,12,89,14,"startVal"],[134,20,89,22],[134,23,89,25],[134,27,89,29],[134,28,89,30,"getLayout"],[134,37,89,39],[134,38,89,40,"newStartIndex"],[134,51,89,53],[134,52,89,54],[135,8,90,8],[135,12,90,12,"startX"],[135,18,90,18],[135,21,90,21,"startVal"],[135,29,90,29],[135,30,90,30,"x"],[135,31,90,31],[136,8,91,8],[136,12,91,12,"startY"],[136,18,91,18],[136,21,91,21,"startVal"],[136,29,91,29],[136,30,91,30,"y"],[136,31,91,31],[137,8,92,8],[137,13,92,13],[137,17,92,17,"i"],[137,18,92,18],[137,21,92,21,"newStartIndex"],[137,34,92,34],[137,36,92,36,"i"],[137,37,92,37],[137,41,92,41,"endIndex"],[137,49,92,49],[137,51,92,51,"i"],[137,52,92,52],[137,54,92,54],[137,56,92,56],[138,10,93,12],[138,14,93,18,"layout"],[138,20,93,24],[138,23,93,27],[138,27,93,31],[138,28,93,32,"getLayout"],[138,37,93,41],[138,38,93,42,"i"],[138,39,93,43],[138,40,93,44],[139,10,94,12],[139,14,94,16],[139,15,94,17],[139,19,94,21],[139,20,94,22,"checkBounds"],[139,31,94,33],[139,32,94,34,"startX"],[139,38,94,40],[139,40,94,42,"layout"],[139,46,94,48],[139,47,94,49,"width"],[139,52,94,54],[139,53,94,55],[139,55,94,57],[140,12,95,16],[140,16,95,22,"tallestItem"],[140,27,95,33],[140,30,95,36],[140,34,95,40],[140,35,95,41,"processAndReturnTallestItemInRow"],[140,67,95,73],[140,68,95,74,"i"],[140,69,95,75],[140,72,95,78],[140,73,95,79],[140,74,95,80],[141,12,96,16,"startY"],[141,18,96,22],[141,21,96,25,"tallestItem"],[141,32,96,36],[141,33,96,37,"y"],[141,34,96,38],[141,37,96,41,"tallestItem"],[141,48,96,52],[141,49,96,53,"height"],[141,55,96,59],[142,12,97,16,"startX"],[142,18,97,22],[142,21,97,25],[142,22,97,26],[143,10,98,12],[144,10,99,12,"layout"],[144,16,99,18],[144,17,99,19,"x"],[144,18,99,20],[144,21,99,23,"startX"],[144,27,99,29],[145,10,100,12,"layout"],[145,16,100,18],[145,17,100,19,"y"],[145,18,100,20],[145,21,100,23,"startY"],[145,27,100,29],[146,10,101,12,"startX"],[146,16,101,18],[146,20,101,22,"layout"],[146,26,101,28],[146,27,101,29,"width"],[146,32,101,34],[147,8,102,8],[148,8,103,8],[148,12,103,12,"endIndex"],[148,20,103,20],[148,25,103,25],[148,29,103,29],[148,30,103,30,"layouts"],[148,37,103,37],[148,38,103,38,"length"],[148,44,103,44],[148,47,103,47],[148,48,103,48],[148,50,103,50],[149,10,104,12],[149,14,104,16],[149,15,104,17,"processAndReturnTallestItemInRow"],[149,47,104,49],[149,48,104,50,"endIndex"],[149,56,104,58],[149,57,104,59],[150,8,105,8],[151,6,106,4],[152,6,107,4],[153,0,108,0],[154,0,109,0],[155,0,110,0],[156,0,111,0],[157,4,107,4],[158,6,107,4,"key"],[158,9,107,4],[159,6,107,4,"value"],[159,11,107,4],[159,13,112,4],[159,22,112,4,"getWidth"],[159,30,112,12,"getWidth"],[159,31,112,13,"index"],[159,36,112,18],[159,38,112,20],[160,8,113,8],[160,15,113,16],[160,19,113,20],[160,20,113,21,"boundedSize"],[160,31,113,32],[160,34,113,35],[160,38,113,39],[160,39,113,40,"maxColumns"],[160,49,113,50],[160,52,113,54],[160,56,113,58],[160,57,113,59,"getSpan"],[160,64,113,66],[160,65,113,67,"index"],[160,70,113,72],[160,71,113,73],[161,6,114,4],[162,6,115,4],[163,0,116,0],[164,0,117,0],[165,0,118,0],[166,0,119,0],[167,0,120,0],[168,0,121,0],[169,4,115,4],[170,6,115,4,"key"],[170,9,115,4],[171,6,115,4,"value"],[171,11,115,4],[171,13,122,4],[171,22,122,4,"processAndReturnTallestItemInRow"],[171,54,122,36,"processAndReturnTallestItemInRow"],[171,55,122,37,"endIndex"],[171,63,122,45],[171,65,122,47],[172,8,123,8],[172,12,123,12,"_a"],[172,14,123,14],[172,16,123,16,"_b"],[172,18,123,18],[173,8,124,8],[173,12,124,14,"startIndex"],[173,22,124,24],[173,25,124,27],[173,29,124,31],[173,30,124,32,"locateFirstIndexInRow"],[173,51,124,53],[173,52,124,54,"endIndex"],[173,60,124,62],[173,61,124,63],[174,8,125,8],[174,12,125,12,"tallestItem"],[174,23,125,23],[175,8,126,8],[175,12,126,12,"maxHeight"],[175,21,126,21],[175,24,126,24],[175,25,126,25],[176,8,127,8],[176,12,127,12,"i"],[176,13,127,13],[176,16,127,16,"startIndex"],[176,26,127,26],[177,8,128,8],[177,12,128,12,"isMeasured"],[177,22,128,22],[177,25,128,25],[177,30,128,30],[178,8,129,8],[178,15,129,15,"i"],[178,16,129,16],[178,20,129,20,"endIndex"],[178,28,129,28],[178,30,129,30],[179,10,130,12],[179,14,130,18,"layout"],[179,20,130,24],[179,23,130,27],[179,27,130,31],[179,28,130,32,"layouts"],[179,35,130,39],[179,36,130,40,"i"],[179,37,130,41],[179,38,130,42],[180,10,131,12,"isMeasured"],[180,20,131,22],[180,23,131,25,"isMeasured"],[180,33,131,35],[180,37,131,39,"Boolean"],[180,44,131,46],[180,45,131,47,"layout"],[180,51,131,53],[180,52,131,54,"isHeightMeasured"],[180,68,131,70],[180,69,131,71],[181,10,132,12,"maxHeight"],[181,19,132,21],[181,22,132,24,"Math"],[181,26,132,28],[181,27,132,29,"max"],[181,30,132,32],[181,31,132,33,"maxHeight"],[181,40,132,42],[181,42,132,44,"layout"],[181,48,132,50],[181,49,132,51,"height"],[181,55,132,57],[181,56,132,58],[182,10,133,12],[182,14,133,16,"layout"],[182,20,133,22],[182,21,133,23,"height"],[182,27,133,29],[182,31,133,33],[182,32,133,34,"_a"],[182,34,133,36],[182,37,133,39,"layout"],[182,43,133,45],[182,44,133,46,"minHeight"],[182,53,133,55],[182,59,133,61],[182,63,133,65],[182,67,133,69,"_a"],[182,69,133,71],[182,74,133,76],[182,79,133,81],[182,80,133,82],[182,83,133,85,"_a"],[182,85,133,87],[182,88,133,90],[182,89,133,91],[182,90,133,92],[182,94,134,16,"layout"],[182,100,134,22],[182,101,134,23,"height"],[182,107,134,29],[182,111,134,33],[182,112,134,34,"_b"],[182,114,134,36],[182,117,134,39,"tallestItem"],[182,128,134,50],[182,133,134,55],[182,137,134,59],[182,141,134,63,"tallestItem"],[182,152,134,74],[182,157,134,79],[182,162,134,84],[182,163,134,85],[182,166,134,88],[182,171,134,93],[182,172,134,94],[182,175,134,97,"tallestItem"],[182,186,134,108],[182,187,134,109,"height"],[182,193,134,115],[182,199,134,121],[182,203,134,125],[182,207,134,129,"_b"],[182,209,134,131],[182,214,134,136],[182,219,134,141],[182,220,134,142],[182,223,134,145,"_b"],[182,225,134,147],[182,228,134,150],[182,229,134,151],[182,230,134,152],[182,232,134,154],[183,12,135,16,"tallestItem"],[183,23,135,27],[183,26,135,30,"layout"],[183,32,135,36],[184,10,136,12],[185,10,137,12,"i"],[185,11,137,13],[185,13,137,15],[186,10,138,12],[186,14,138,16,"i"],[186,15,138,17],[186,19,138,21],[186,23,138,25],[186,24,138,26,"layouts"],[186,31,138,33],[186,32,138,34,"length"],[186,38,138,40],[186,40,138,42],[187,12,139,16],[188,10,140,12],[189,8,141,8],[190,8,142,8],[190,12,142,12],[190,13,142,13,"tallestItem"],[190,24,142,24],[190,28,142,28,"maxHeight"],[190,37,142,37],[190,40,142,40],[190,41,142,41],[190,43,142,43],[191,10,143,12,"maxHeight"],[191,19,143,21],[191,22,143,24,"Number"],[191,28,143,30],[191,29,143,31,"MAX_SAFE_INTEGER"],[191,45,143,47],[192,8,144,8],[193,8,145,8,"tallestItem"],[193,19,145,19],[193,22,145,22,"tallestItem"],[193,33,145,33],[193,38,145,38],[193,42,145,42],[193,46,145,46,"tallestItem"],[193,57,145,57],[193,62,145,62],[193,67,145,67],[193,68,145,68],[193,71,145,71,"tallestItem"],[193,82,145,82],[193,85,145,85],[193,89,145,89],[193,90,145,90,"layouts"],[193,97,145,97],[193,98,145,98,"startIndex"],[193,108,145,108],[193,109,145,109],[194,8,146,8],[194,12,146,12],[194,13,146,13,"isMeasured"],[194,23,146,23],[194,25,146,25],[195,10,147,12],[195,17,147,19,"tallestItem"],[195,28,147,30],[196,8,148,8],[197,8,149,8],[197,12,149,12,"tallestItem"],[197,23,149,23],[197,25,149,25],[198,10,150,12],[198,14,150,16,"targetHeight"],[198,26,150,28],[198,29,150,31,"tallestItem"],[198,40,150,42],[198,41,150,43,"height"],[198,47,150,49],[199,10,151,12],[199,14,151,16,"maxHeight"],[199,23,151,25],[199,26,151,28,"tallestItem"],[199,37,151,39],[199,38,151,40,"height"],[199,44,151,46],[199,47,151,49],[199,48,151,50],[199,50,151,52],[200,12,152,16,"targetHeight"],[200,24,152,28],[200,27,152,31],[200,28,152,32],[201,12,153,16],[201,16,153,20],[201,17,153,21,"requiresRepaint"],[201,32,153,36],[201,35,153,39],[201,39,153,43],[202,10,154,12],[203,10,155,12,"i"],[203,11,155,13],[203,14,155,16,"startIndex"],[203,24,155,26],[204,10,156,12],[204,17,156,19,"i"],[204,18,156,20],[204,22,156,24,"endIndex"],[204,30,156,32],[204,32,156,34],[205,12,157,16],[205,16,157,20],[205,17,157,21,"layouts"],[205,24,157,28],[205,25,157,29,"i"],[205,26,157,30],[205,27,157,31],[205,28,157,32,"minHeight"],[205,37,157,41],[205,40,157,44,"targetHeight"],[205,52,157,56],[206,12,158,16],[206,16,158,20,"targetHeight"],[206,28,158,32],[206,31,158,35],[206,32,158,36],[206,34,158,38],[207,14,159,20],[207,18,159,24],[207,19,159,25,"layouts"],[207,26,159,32],[207,27,159,33,"i"],[207,28,159,34],[207,29,159,35],[207,30,159,36,"height"],[207,36,159,42],[207,39,159,45,"targetHeight"],[207,51,159,57],[208,12,160,16],[209,12,161,16,"i"],[209,13,161,17],[209,15,161,19],[210,12,162,16],[210,16,162,20,"i"],[210,17,162,21],[210,21,162,25],[210,25,162,29],[210,26,162,30,"layouts"],[210,33,162,37],[210,34,162,38,"length"],[210,40,162,44],[210,42,162,46],[211,14,163,20],[212,12,164,16],[213,10,165,12],[214,10,166,12,"tallestItem"],[214,21,166,23],[214,22,166,24,"minHeight"],[214,31,166,33],[214,34,166,36],[214,35,166,37],[215,8,167,8],[216,8,168,8],[216,15,168,15,"tallestItem"],[216,26,168,26],[217,6,169,4],[218,6,170,4],[219,0,171,0],[220,0,172,0],[221,0,173,0],[222,0,174,0],[223,4,170,4],[224,6,170,4,"key"],[224,9,170,4],[225,6,170,4,"value"],[225,11,170,4],[225,13,175,4],[225,22,175,4,"computeTotalHeightTillRow"],[225,47,175,29,"computeTotalHeightTillRow"],[225,48,175,30,"endIndex"],[225,56,175,38],[225,58,175,40],[226,8,176,8],[226,12,176,14,"startIndex"],[226,22,176,24],[226,25,176,27],[226,29,176,31],[226,30,176,32,"locateFirstIndexInRow"],[226,51,176,53],[226,52,176,54,"endIndex"],[226,60,176,62],[226,61,176,63],[227,8,177,8],[227,12,177,14,"y"],[227,13,177,15],[227,16,177,18],[227,20,177,22],[227,21,177,23,"layouts"],[227,28,177,30],[227,29,177,31,"startIndex"],[227,39,177,41],[227,40,177,42],[227,41,177,43,"y"],[227,42,177,44],[228,8,178,8],[228,12,178,12,"maxHeight"],[228,21,178,21],[228,24,178,24],[228,25,178,25],[229,8,179,8],[229,12,179,12,"i"],[229,13,179,13],[229,16,179,16,"startIndex"],[229,26,179,26],[230,8,180,8],[230,15,180,15,"i"],[230,16,180,16],[230,20,180,20,"endIndex"],[230,28,180,28],[230,30,180,30],[231,10,181,12,"maxHeight"],[231,19,181,21],[231,22,181,24,"Math"],[231,26,181,28],[231,27,181,29,"max"],[231,30,181,32],[231,31,181,33,"maxHeight"],[231,40,181,42],[231,42,181,44],[231,46,181,48],[231,47,181,49,"layouts"],[231,54,181,56],[231,55,181,57,"i"],[231,56,181,58],[231,57,181,59],[231,58,181,60,"height"],[231,64,181,66],[231,65,181,67],[232,10,182,12,"i"],[232,11,182,13],[232,13,182,15],[233,10,183,12],[233,14,183,16,"i"],[233,15,183,17],[233,19,183,21],[233,23,183,25],[233,24,183,26,"layouts"],[233,31,183,33],[233,32,183,34,"length"],[233,38,183,40],[233,40,183,42],[234,12,184,16],[235,10,185,12],[236,8,186,8],[237,8,187,8],[237,15,187,15,"y"],[237,16,187,16],[237,19,187,19,"maxHeight"],[237,28,187,28],[238,6,188,4],[239,4,188,5],[240,6,188,5,"key"],[240,9,188,5],[241,6,188,5,"value"],[241,11,188,5],[241,13,189,4],[241,22,189,4,"updateAllWidths"],[241,37,189,19,"updateAllWidths"],[241,38,189,19],[241,40,189,22],[242,8,190,8],[242,13,190,13],[242,17,190,17,"i"],[242,18,190,18],[242,21,190,21],[242,22,190,22],[242,24,190,24,"i"],[242,25,190,25],[242,28,190,28],[242,32,190,32],[242,33,190,33,"layouts"],[242,40,190,40],[242,41,190,41,"length"],[242,47,190,47],[242,49,190,49,"i"],[242,50,190,50],[242,52,190,52],[242,54,190,54],[243,10,191,12],[243,14,191,16],[243,15,191,17,"layouts"],[243,22,191,24],[243,23,191,25,"i"],[243,24,191,26],[243,25,191,27],[243,26,191,28,"width"],[243,31,191,33],[243,34,191,36],[243,38,191,40],[243,39,191,41,"getWidth"],[243,47,191,49],[243,48,191,50,"i"],[243,49,191,51],[243,50,191,52],[244,8,192,8],[245,6,193,4],[246,6,194,4],[247,0,195,0],[248,0,196,0],[249,0,197,0],[250,0,198,0],[251,0,199,0],[252,4,194,4],[253,6,194,4,"key"],[253,9,194,4],[254,6,194,4,"value"],[254,11,194,4],[254,13,200,4],[254,22,200,4,"checkBounds"],[254,33,200,15,"checkBounds"],[254,34,200,16,"itemX"],[254,39,200,21],[254,41,200,23,"width"],[254,46,200,28],[254,48,200,30],[255,8,201,8],[255,15,201,15,"itemX"],[255,20,201,20],[255,23,201,23,"width"],[255,28,201,28],[255,32,201,32],[255,36,201,36],[255,37,201,37,"boundedSize"],[255,48,201,48],[255,51,201,51],[255,54,201,54],[256,6,202,4],[257,6,203,4],[258,0,204,0],[259,0,205,0],[260,0,206,0],[261,0,207,0],[262,4,203,4],[263,6,203,4,"key"],[263,9,203,4],[264,6,203,4,"value"],[264,11,203,4],[264,13,208,4],[264,22,208,4,"locateFirstIndexInRow"],[264,43,208,25,"locateFirstIndexInRow"],[264,44,208,26,"itemIndex"],[264,53,208,35],[264,55,208,37],[265,8,209,8],[265,12,209,12,"itemIndex"],[265,21,209,21],[265,26,209,26],[265,27,209,27],[265,29,209,29],[266,10,210,12],[266,17,210,19],[266,18,210,20],[267,8,211,8],[268,8,212,8],[268,12,212,12,"i"],[268,13,212,13],[268,16,212,16,"itemIndex"],[268,25,212,25],[269,8,213,8],[269,15,213,15,"i"],[269,16,213,16],[269,20,213,20],[269,21,213,21],[269,23,213,23,"i"],[269,24,213,24],[269,26,213,26],[269,28,213,28],[270,10,214,12],[270,14,214,16],[270,18,214,20],[270,19,214,21,"layouts"],[270,26,214,28],[270,27,214,29,"i"],[270,28,214,30],[270,29,214,31],[270,30,214,32,"x"],[270,31,214,33],[270,36,214,38],[270,37,214,39],[270,39,214,41],[271,12,215,16],[272,10,216,12],[273,8,217,8],[274,8,218,8],[274,15,218,15,"Math"],[274,19,218,19],[274,20,218,20,"max"],[274,23,218,23],[274,24,218,24,"i"],[274,25,218,25],[274,27,218,27],[274,28,218,28],[274,29,218,29],[275,6,219,4],[276,4,219,5],[277,2,219,5],[277,4,6,45,"RVLayoutManager"],[277,18,6,60],[277,19,6,60,"RVLayoutManager"],[277,34,6,60],[278,0,6,60],[278,3]],"functionMap":{"names":["<global>","RVGridLayoutManagerImpl","RVGridLayoutManagerImpl#constructor","RVGridLayoutManagerImpl#updateLayoutParams","RVGridLayoutManagerImpl#processLayoutInfo","RVGridLayoutManagerImpl#estimateLayout","RVGridLayoutManagerImpl#handleSpanChange","RVGridLayoutManagerImpl#getLayoutSize","RVGridLayoutManagerImpl#recomputeLayouts","RVGridLayoutManagerImpl#getWidth","RVGridLayoutManagerImpl#processAndReturnTallestItemInRow","RVGridLayoutManagerImpl#computeTotalHeightTillRow","RVGridLayoutManagerImpl#updateAllWidths","RVGridLayoutManagerImpl#checkBounds","RVGridLayoutManagerImpl#locateFirstIndexInRow"],"mappings":"AAA;OCK;ICC;KDK;IEK;KFa;IGM;KHc;IIK;KJM;IKK;KLE;IMK;KNQ;IOM;KPmB;IQM;KRE;ISQ;KT+C;IUM;KVa;IWC;KXI;IYO;KZE;IaM;KbW;CDC"},"hasCjsExports":false},"type":"js/module"}]}