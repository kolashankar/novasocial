{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"RenderStackManager\", {\n    enumerable: true,\n    get: function () {\n      return RenderStackManager;\n    }\n  });\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[2], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  /**\n   * Manages the recycling of rendered items in a virtualized list.\n   * This class handles tracking, recycling, and reusing item keys to optimize\n   * rendering performance by minimizing creation/destruction of components.\n   */\n  var RenderStackManager = /*#__PURE__*/function () {\n    /**\n     * @param maxItemsInRecyclePool - Maximum number of items that can be in the recycle pool\n     */\n    function RenderStackManager() {\n      var maxItemsInRecyclePool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.MAX_SAFE_INTEGER;\n      (0, _classCallCheck.default)(this, RenderStackManager);\n      this.disableRecycling = false;\n      this.maxItemsInRecyclePool = maxItemsInRecyclePool;\n      this.recycleKeyPools = new Map();\n      this.keyMap = new Map();\n      this.stableIdMap = new Map();\n      this.keyCounter = 0;\n      this.unProcessedIndices = new Set();\n    }\n    /**\n     * Synchronizes the render stack with the current state of data.\n     * This method is the core orchestrator that:\n     * 1. Recycles keys for items that are no longer valid\n     * 2. Updates existing keys for items that remain visible\n     * 3. Assigns new keys for newly visible items\n     * 4. Cleans up excess items to maintain the recycling pool size\n     *\n     * @param getStableId - Function to get a stable identifier for an item at a specific index\n     * @param getItemType - Function to get the type of an item at a specific index\n     * @param engagedIndices - Collection of indices that are currently visible or engaged\n     * @param dataLength - Total length of the data set\n     */\n    return (0, _createClass.default)(RenderStackManager, [{\n      key: \"sync\",\n      value: function sync(getStableId, getItemType, engagedIndices, dataLength) {\n        this.clearRecyclePool();\n        this.unProcessedIndices.clear();\n        // Recycle keys for items that are no longer valid or visible\n        this.keyMap.forEach((keyInfo, key) => {\n          var index = keyInfo.index,\n            stableId = keyInfo.stableId,\n            itemType = keyInfo.itemType;\n          if (index >= dataLength) {\n            this.recycleKey(key);\n            return;\n          }\n          if (!this.disableRecycling) {\n            this.unProcessedIndices.add(index);\n          }\n          if (!engagedIndices.includes(index)) {\n            this.recycleKey(key);\n            return;\n          }\n          var newStableId = getStableId(index);\n          var newItemType = getItemType(index);\n          if (stableId !== newStableId || itemType !== newItemType) {\n            this.recycleKey(key);\n          }\n        });\n        // First pass: process items that already have optimized keys\n        for (var index of engagedIndices) {\n          if (this.hasOptimizedKey(getStableId(index))) {\n            this.syncItem(index, getItemType(index), getStableId(index));\n          }\n        }\n        // Second pass: process remaining items that need new keys\n        for (var _index of engagedIndices) {\n          if (!this.hasOptimizedKey(getStableId(_index))) {\n            this.syncItem(_index, getItemType(_index), getStableId(_index));\n          }\n        }\n        // create indices that are not in the engagedIndices and less than dataLength\n        // select only indices that are not in the engagedIndices\n        var validIndicesInPool = [];\n        for (var keyInfo of this.keyMap.values()) {\n          var _index2 = keyInfo.index;\n          if (_index2 < dataLength && !engagedIndices.includes(_index2)) {\n            validIndicesInPool.push(_index2);\n          }\n        }\n        // First pass: process items that already have optimized keys\n        for (var _index3 of validIndicesInPool) {\n          if (this.hasOptimizedKey(getStableId(_index3))) {\n            this.syncItem(_index3, getItemType(_index3), getStableId(_index3));\n          }\n        }\n        for (var _index4 of validIndicesInPool) {\n          if (!this.hasOptimizedKey(getStableId(_index4))) {\n            this.syncItem(_index4, getItemType(_index4), getStableId(_index4));\n          }\n        }\n        // Clean up stale items and manage the recycle pool size\n        this.cleanup(getStableId, getItemType, engagedIndices, dataLength);\n      }\n      /**\n       * Checks if a stable ID already has an assigned key\n       */\n    }, {\n      key: \"hasOptimizedKey\",\n      value: function hasOptimizedKey(stableId) {\n        return this.stableIdMap.has(stableId);\n      }\n      /**\n       * Cleans up stale keys and manages the recycle pool size.\n       * This ensures we don't maintain references to items that are no longer in the dataset,\n       * and limits the number of recycled items to avoid excessive memory usage.\n       */\n    }, {\n      key: \"cleanup\",\n      value: function cleanup(getStableId, getItemType, engagedIndices, dataLength) {\n        var itemsToDelete = new Array();\n        // Remove items that are no longer in the dataset\n        for (var _ref of this.keyMap.entries()) {\n          var _ref2 = (0, _slicedToArray.default)(_ref, 2);\n          var key = _ref2[0];\n          var keyInfo = _ref2[1];\n          var index = keyInfo.index,\n            itemType = keyInfo.itemType,\n            stableId = keyInfo.stableId;\n          var indexOutOfBounds = index >= dataLength;\n          var hasStableIdChanged = !indexOutOfBounds && getStableId(index) !== stableId;\n          if (indexOutOfBounds || hasStableIdChanged) {\n            var nextIndex = this.unProcessedIndices.values().next().value;\n            var shouldDeleteKey = true;\n            if (nextIndex !== undefined) {\n              var nextItemType = getItemType(nextIndex);\n              var nextStableId = getStableId(nextIndex);\n              if (itemType === nextItemType) {\n                this.syncItem(nextIndex, nextItemType, nextStableId);\n                shouldDeleteKey = false;\n              }\n            }\n            if (shouldDeleteKey) {\n              this.deleteKeyFromRecyclePool(itemType, key);\n              this.stableIdMap.delete(stableId);\n              itemsToDelete.push(key);\n            }\n          }\n        }\n        for (var _key of itemsToDelete) {\n          this.keyMap.delete(_key);\n        }\n        // Limit the size of the recycle pool\n        var itemsRenderedForRecycling = this.keyMap.size - engagedIndices.length;\n        if (itemsRenderedForRecycling > this.maxItemsInRecyclePool) {\n          var deleteCount = itemsRenderedForRecycling - this.maxItemsInRecyclePool;\n          var deleted = 0;\n          // Use a for loop so we can break early once we've deleted enough items\n          var entries = Array.from(this.keyMap.entries()).reverse();\n          for (var i = 0; i < entries.length && deleted < deleteCount; i++) {\n            var _entries$i = (0, _slicedToArray.default)(entries[i], 2),\n              _key2 = _entries$i[0],\n              _keyInfo = _entries$i[1];\n            var _index5 = _keyInfo.index,\n              _itemType = _keyInfo.itemType,\n              _stableId = _keyInfo.stableId;\n            if (!engagedIndices.includes(_index5)) {\n              this.deleteKeyFromRecyclePool(_itemType, _key2);\n              this.stableIdMap.delete(_stableId);\n              this.keyMap.delete(_key2);\n              deleted++;\n            }\n          }\n        }\n      }\n      /**\n       * Places a key back into its type-specific recycle pool for future reuse\n       */\n    }, {\n      key: \"recycleKey\",\n      value: function recycleKey(key) {\n        if (this.disableRecycling) {\n          return;\n        }\n        var keyInfo = this.keyMap.get(key);\n        if (!keyInfo) {\n          return;\n        }\n        var itemType = keyInfo.itemType;\n        // Add key back to its type's pool\n        var pool = this.getRecyclePoolForType(itemType);\n        pool.add(key);\n      }\n      /**\n       * Returns the current render stack containing all active keys and their metadata\n       */\n    }, {\n      key: \"getRenderStack\",\n      value: function getRenderStack() {\n        return this.keyMap;\n      }\n      /**\n       * Syncs an individual item by assigning it an appropriate key.\n       * Will use an existing key if available, or generate a new one.\n       *\n       * @returns The key assigned to the item\n       */\n    }, {\n      key: \"syncItem\",\n      value: function syncItem(index, itemType, stableId) {\n        // Try to reuse an existing key, or get one from the recycle pool, or generate a new one\n        var newKey = this.stableIdMap.get(stableId) || this.getKeyFromRecyclePool(itemType) || this.generateKey();\n        this.unProcessedIndices.delete(index);\n        var keyInfo = this.keyMap.get(newKey);\n        if (keyInfo) {\n          // Update an existing key's metadata\n          this.deleteKeyFromRecyclePool(itemType, newKey);\n          this.deleteKeyFromRecyclePool(keyInfo.itemType, newKey);\n          this.stableIdMap.delete(keyInfo.stableId);\n          keyInfo.index = index;\n          keyInfo.itemType = itemType;\n          keyInfo.stableId = stableId;\n        } else {\n          // Create a new entry in the key map\n          this.keyMap.set(newKey, {\n            itemType,\n            index,\n            stableId\n          });\n        }\n        this.stableIdMap.set(stableId, newKey);\n        return newKey;\n      }\n      /**\n       * Clears all recycled keys from the pool, effectively resetting the recycling system.\n       * This operation does not affect currently active keys.\n       */\n    }, {\n      key: \"clearRecyclePool\",\n      value: function clearRecyclePool() {\n        // iterate over all pools and clear them\n        for (var pool of this.recycleKeyPools.values()) {\n          pool.clear();\n        }\n      }\n      /**\n       * Generates a unique sequential key using an internal counter.\n       * @returns A unique key as a string\n       */\n    }, {\n      key: \"generateKey\",\n      value: function generateKey() {\n        return (this.keyCounter++).toString();\n      }\n      /**\n       * Removes a specific key from its type's recycle pool\n       */\n    }, {\n      key: \"deleteKeyFromRecyclePool\",\n      value: function deleteKeyFromRecyclePool(itemType, key) {\n        var _a;\n        (_a = this.recycleKeyPools.get(itemType)) === null || _a === void 0 ? void 0 : _a.delete(key);\n      }\n      /**\n       * Gets or creates a recycle pool for a specific item type\n       */\n    }, {\n      key: \"getRecyclePoolForType\",\n      value: function getRecyclePoolForType(itemType) {\n        var pool = this.recycleKeyPools.get(itemType);\n        if (!pool) {\n          pool = new Set();\n          this.recycleKeyPools.set(itemType, pool);\n        }\n        return pool;\n      }\n      /**\n       * Retrieves and removes a key from the type's recycle pool\n       * @returns A recycled key or undefined if none available\n       */\n    }, {\n      key: \"getKeyFromRecyclePool\",\n      value: function getKeyFromRecyclePool(itemType) {\n        var pool = this.getRecyclePoolForType(itemType);\n        if (pool.size > 0) {\n          var key = pool.values().next().value;\n          pool.delete(key);\n          return key;\n        }\n        return undefined;\n      }\n    }]);\n  }();\n});","lineCount":308,"map":[[12,2,6,0,"Object"],[12,8,6,0],[12,9,6,0,"defineProperty"],[12,23,6,0],[12,24,6,0,"exports"],[12,31,6,0],[13,4,6,0,"enumerable"],[13,14,6,0],[14,4,6,0,"get"],[14,7,6,0],[14,18,6,0,"get"],[14,19,6,0],[15,6,6,0],[15,13,6,0,"RenderStackManager"],[15,31,6,0],[16,4,6,0],[17,2,6,0],[18,2,251,1],[18,6,251,1,"_babelRuntimeHelpersSlicedToArray"],[18,39,251,1],[18,42,251,1,"require"],[18,49,251,1],[18,50,251,1,"_dependencyMap"],[18,64,251,1],[19,2,251,1],[19,6,251,1,"_slicedToArray"],[19,20,251,1],[19,23,251,1,"_interopDefault"],[19,38,251,1],[19,39,251,1,"_babelRuntimeHelpersSlicedToArray"],[19,72,251,1],[20,2,251,1],[20,6,251,1,"_babelRuntimeHelpersClassCallCheck"],[20,40,251,1],[20,43,251,1,"require"],[20,50,251,1],[20,51,251,1,"_dependencyMap"],[20,65,251,1],[21,2,251,1],[21,6,251,1,"_classCallCheck"],[21,21,251,1],[21,24,251,1,"_interopDefault"],[21,39,251,1],[21,40,251,1,"_babelRuntimeHelpersClassCallCheck"],[21,74,251,1],[22,2,251,1],[22,6,251,1,"_babelRuntimeHelpersCreateClass"],[22,37,251,1],[22,40,251,1,"require"],[22,47,251,1],[22,48,251,1,"_dependencyMap"],[22,62,251,1],[23,2,251,1],[23,6,251,1,"_createClass"],[23,18,251,1],[23,21,251,1,"_interopDefault"],[23,36,251,1],[23,37,251,1,"_babelRuntimeHelpersCreateClass"],[23,68,251,1],[24,2,1,0],[25,0,2,0],[26,0,3,0],[27,0,4,0],[28,0,5,0],[29,2,1,0],[29,6,6,13,"RenderStackManager"],[29,24,6,31],[30,4,7,4],[31,0,8,0],[32,0,9,0],[33,4,10,4],[33,13,10,4,"RenderStackManager"],[33,32,10,4],[33,34,10,65],[34,6,10,65],[34,10,10,16,"maxItemsInRecyclePool"],[34,31,10,37],[34,34,10,37,"arguments"],[34,43,10,37],[34,44,10,37,"length"],[34,50,10,37],[34,58,10,37,"arguments"],[34,67,10,37],[34,75,10,37,"undefined"],[34,84,10,37],[34,87,10,37,"arguments"],[34,96,10,37],[34,102,10,40,"Number"],[34,108,10,46],[34,109,10,47,"MAX_SAFE_INTEGER"],[34,125,10,63],[35,6,10,63],[35,10,10,63,"_classCallCheck"],[35,25,10,63],[35,26,10,63,"default"],[35,33,10,63],[35,41,10,63,"RenderStackManager"],[35,59,10,63],[36,6,11,8],[36,10,11,12],[36,11,11,13,"disableRecycling"],[36,27,11,29],[36,30,11,32],[36,35,11,37],[37,6,12,8],[37,10,12,12],[37,11,12,13,"maxItemsInRecyclePool"],[37,32,12,34],[37,35,12,37,"maxItemsInRecyclePool"],[37,56,12,58],[38,6,13,8],[38,10,13,12],[38,11,13,13,"recycleKeyPools"],[38,26,13,28],[38,29,13,31],[38,33,13,35,"Map"],[38,36,13,38],[38,37,13,39],[38,38,13,40],[39,6,14,8],[39,10,14,12],[39,11,14,13,"keyMap"],[39,17,14,19],[39,20,14,22],[39,24,14,26,"Map"],[39,27,14,29],[39,28,14,30],[39,29,14,31],[40,6,15,8],[40,10,15,12],[40,11,15,13,"stableIdMap"],[40,22,15,24],[40,25,15,27],[40,29,15,31,"Map"],[40,32,15,34],[40,33,15,35],[40,34,15,36],[41,6,16,8],[41,10,16,12],[41,11,16,13,"keyCounter"],[41,21,16,23],[41,24,16,26],[41,25,16,27],[42,6,17,8],[42,10,17,12],[42,11,17,13,"unProcessedIndices"],[42,29,17,31],[42,32,17,34],[42,36,17,38,"Set"],[42,39,17,41],[42,40,17,42],[42,41,17,43],[43,4,18,4],[44,4,19,4],[45,0,20,0],[46,0,21,0],[47,0,22,0],[48,0,23,0],[49,0,24,0],[50,0,25,0],[51,0,26,0],[52,0,27,0],[53,0,28,0],[54,0,29,0],[55,0,30,0],[56,0,31,0],[57,4,19,4],[57,15,19,4,"_createClass"],[57,27,19,4],[57,28,19,4,"default"],[57,35,19,4],[57,37,19,4,"RenderStackManager"],[57,55,19,4],[58,6,19,4,"key"],[58,9,19,4],[59,6,19,4,"value"],[59,11,19,4],[59,13,32,4],[59,22,32,4,"sync"],[59,26,32,8,"sync"],[59,27,32,9,"getStableId"],[59,38,32,20],[59,40,32,22,"getItemType"],[59,51,32,33],[59,53,32,35,"engagedIndices"],[59,67,32,49],[59,69,32,51,"dataLength"],[59,79,32,61],[59,81,32,63],[60,8,33,8],[60,12,33,12],[60,13,33,13,"clearRecyclePool"],[60,29,33,29],[60,30,33,30],[60,31,33,31],[61,8,34,8],[61,12,34,12],[61,13,34,13,"unProcessedIndices"],[61,31,34,31],[61,32,34,32,"clear"],[61,37,34,37],[61,38,34,38],[61,39,34,39],[62,8,35,8],[63,8,36,8],[63,12,36,12],[63,13,36,13,"keyMap"],[63,19,36,19],[63,20,36,20,"forEach"],[63,27,36,27],[63,28,36,28],[63,29,36,29,"keyInfo"],[63,36,36,36],[63,38,36,38,"key"],[63,41,36,41],[63,46,36,46],[64,10,37,12],[64,14,37,20,"index"],[64,19,37,25],[64,22,37,50,"keyInfo"],[64,29,37,57],[64,30,37,20,"index"],[64,35,37,25],[65,12,37,27,"stableId"],[65,20,37,35],[65,23,37,50,"keyInfo"],[65,30,37,57],[65,31,37,27,"stableId"],[65,39,37,35],[66,12,37,37,"itemType"],[66,20,37,45],[66,23,37,50,"keyInfo"],[66,30,37,57],[66,31,37,37,"itemType"],[66,39,37,45],[67,10,38,12],[67,14,38,16,"index"],[67,19,38,21],[67,23,38,25,"dataLength"],[67,33,38,35],[67,35,38,37],[68,12,39,16],[68,16,39,20],[68,17,39,21,"recycleKey"],[68,27,39,31],[68,28,39,32,"key"],[68,31,39,35],[68,32,39,36],[69,12,40,16],[70,10,41,12],[71,10,42,12],[71,14,42,16],[71,15,42,17],[71,19,42,21],[71,20,42,22,"disableRecycling"],[71,36,42,38],[71,38,42,40],[72,12,43,16],[72,16,43,20],[72,17,43,21,"unProcessedIndices"],[72,35,43,39],[72,36,43,40,"add"],[72,39,43,43],[72,40,43,44,"index"],[72,45,43,49],[72,46,43,50],[73,10,44,12],[74,10,45,12],[74,14,45,16],[74,15,45,17,"engagedIndices"],[74,29,45,31],[74,30,45,32,"includes"],[74,38,45,40],[74,39,45,41,"index"],[74,44,45,46],[74,45,45,47],[74,47,45,49],[75,12,46,16],[75,16,46,20],[75,17,46,21,"recycleKey"],[75,27,46,31],[75,28,46,32,"key"],[75,31,46,35],[75,32,46,36],[76,12,47,16],[77,10,48,12],[78,10,49,12],[78,14,49,18,"newStableId"],[78,25,49,29],[78,28,49,32,"getStableId"],[78,39,49,43],[78,40,49,44,"index"],[78,45,49,49],[78,46,49,50],[79,10,50,12],[79,14,50,18,"newItemType"],[79,25,50,29],[79,28,50,32,"getItemType"],[79,39,50,43],[79,40,50,44,"index"],[79,45,50,49],[79,46,50,50],[80,10,51,12],[80,14,51,16,"stableId"],[80,22,51,24],[80,27,51,29,"newStableId"],[80,38,51,40],[80,42,51,44,"itemType"],[80,50,51,52],[80,55,51,57,"newItemType"],[80,66,51,68],[80,68,51,70],[81,12,52,16],[81,16,52,20],[81,17,52,21,"recycleKey"],[81,27,52,31],[81,28,52,32,"key"],[81,31,52,35],[81,32,52,36],[82,10,53,12],[83,8,54,8],[83,9,54,9],[83,10,54,10],[84,8,55,8],[85,8,56,8],[85,13,56,13],[85,17,56,19,"index"],[85,22,56,24],[85,26,56,28,"engagedIndices"],[85,40,56,42],[85,42,56,44],[86,10,57,12],[86,14,57,16],[86,18,57,20],[86,19,57,21,"hasOptimizedKey"],[86,34,57,36],[86,35,57,37,"getStableId"],[86,46,57,48],[86,47,57,49,"index"],[86,52,57,54],[86,53,57,55],[86,54,57,56],[86,56,57,58],[87,12,58,16],[87,16,58,20],[87,17,58,21,"syncItem"],[87,25,58,29],[87,26,58,30,"index"],[87,31,58,35],[87,33,58,37,"getItemType"],[87,44,58,48],[87,45,58,49,"index"],[87,50,58,54],[87,51,58,55],[87,53,58,57,"getStableId"],[87,64,58,68],[87,65,58,69,"index"],[87,70,58,74],[87,71,58,75],[87,72,58,76],[88,10,59,12],[89,8,60,8],[90,8,61,8],[91,8,62,8],[91,13,62,13],[91,17,62,19,"index"],[91,23,62,24],[91,27,62,28,"engagedIndices"],[91,41,62,42],[91,43,62,44],[92,10,63,12],[92,14,63,16],[92,15,63,17],[92,19,63,21],[92,20,63,22,"hasOptimizedKey"],[92,35,63,37],[92,36,63,38,"getStableId"],[92,47,63,49],[92,48,63,50,"index"],[92,54,63,55],[92,55,63,56],[92,56,63,57],[92,58,63,59],[93,12,64,16],[93,16,64,20],[93,17,64,21,"syncItem"],[93,25,64,29],[93,26,64,30,"index"],[93,32,64,35],[93,34,64,37,"getItemType"],[93,45,64,48],[93,46,64,49,"index"],[93,52,64,54],[93,53,64,55],[93,55,64,57,"getStableId"],[93,66,64,68],[93,67,64,69,"index"],[93,73,64,74],[93,74,64,75],[93,75,64,76],[94,10,65,12],[95,8,66,8],[96,8,67,8],[97,8,68,8],[98,8,69,8],[98,12,69,14,"validIndicesInPool"],[98,30,69,32],[98,33,69,35],[98,35,69,37],[99,8,70,8],[99,13,70,13],[99,17,70,19,"keyInfo"],[99,24,70,26],[99,28,70,30],[99,32,70,34],[99,33,70,35,"keyMap"],[99,39,70,41],[99,40,70,42,"values"],[99,46,70,48],[99,47,70,49],[99,48,70,50],[99,50,70,52],[100,10,71,12],[100,14,71,18,"index"],[100,21,71,23],[100,24,71,26,"keyInfo"],[100,31,71,33],[100,32,71,34,"index"],[100,37,71,39],[101,10,72,12],[101,14,72,16,"index"],[101,21,72,21],[101,24,72,24,"dataLength"],[101,34,72,34],[101,38,72,38],[101,39,72,39,"engagedIndices"],[101,53,72,53],[101,54,72,54,"includes"],[101,62,72,62],[101,63,72,63,"index"],[101,70,72,68],[101,71,72,69],[101,73,72,71],[102,12,73,16,"validIndicesInPool"],[102,30,73,34],[102,31,73,35,"push"],[102,35,73,39],[102,36,73,40,"index"],[102,43,73,45],[102,44,73,46],[103,10,74,12],[104,8,75,8],[105,8,76,8],[106,8,77,8],[106,13,77,13],[106,17,77,19,"index"],[106,24,77,24],[106,28,77,28,"validIndicesInPool"],[106,46,77,46],[106,48,77,48],[107,10,78,12],[107,14,78,16],[107,18,78,20],[107,19,78,21,"hasOptimizedKey"],[107,34,78,36],[107,35,78,37,"getStableId"],[107,46,78,48],[107,47,78,49,"index"],[107,54,78,54],[107,55,78,55],[107,56,78,56],[107,58,78,58],[108,12,79,16],[108,16,79,20],[108,17,79,21,"syncItem"],[108,25,79,29],[108,26,79,30,"index"],[108,33,79,35],[108,35,79,37,"getItemType"],[108,46,79,48],[108,47,79,49,"index"],[108,54,79,54],[108,55,79,55],[108,57,79,57,"getStableId"],[108,68,79,68],[108,69,79,69,"index"],[108,76,79,74],[108,77,79,75],[108,78,79,76],[109,10,80,12],[110,8,81,8],[111,8,82,8],[111,13,82,13],[111,17,82,19,"index"],[111,24,82,24],[111,28,82,28,"validIndicesInPool"],[111,46,82,46],[111,48,82,48],[112,10,83,12],[112,14,83,16],[112,15,83,17],[112,19,83,21],[112,20,83,22,"hasOptimizedKey"],[112,35,83,37],[112,36,83,38,"getStableId"],[112,47,83,49],[112,48,83,50,"index"],[112,55,83,55],[112,56,83,56],[112,57,83,57],[112,59,83,59],[113,12,84,16],[113,16,84,20],[113,17,84,21,"syncItem"],[113,25,84,29],[113,26,84,30,"index"],[113,33,84,35],[113,35,84,37,"getItemType"],[113,46,84,48],[113,47,84,49,"index"],[113,54,84,54],[113,55,84,55],[113,57,84,57,"getStableId"],[113,68,84,68],[113,69,84,69,"index"],[113,76,84,74],[113,77,84,75],[113,78,84,76],[114,10,85,12],[115,8,86,8],[116,8,87,8],[117,8,88,8],[117,12,88,12],[117,13,88,13,"cleanup"],[117,20,88,20],[117,21,88,21,"getStableId"],[117,32,88,32],[117,34,88,34,"getItemType"],[117,45,88,45],[117,47,88,47,"engagedIndices"],[117,61,88,61],[117,63,88,63,"dataLength"],[117,73,88,73],[117,74,88,74],[118,6,89,4],[119,6,90,4],[120,0,91,0],[121,0,92,0],[122,4,90,4],[123,6,90,4,"key"],[123,9,90,4],[124,6,90,4,"value"],[124,11,90,4],[124,13,93,4],[124,22,93,4,"hasOptimizedKey"],[124,37,93,19,"hasOptimizedKey"],[124,38,93,20,"stableId"],[124,46,93,28],[124,48,93,30],[125,8,94,8],[125,15,94,15],[125,19,94,19],[125,20,94,20,"stableIdMap"],[125,31,94,31],[125,32,94,32,"has"],[125,35,94,35],[125,36,94,36,"stableId"],[125,44,94,44],[125,45,94,45],[126,6,95,4],[127,6,96,4],[128,0,97,0],[129,0,98,0],[130,0,99,0],[131,0,100,0],[132,4,96,4],[133,6,96,4,"key"],[133,9,96,4],[134,6,96,4,"value"],[134,11,96,4],[134,13,101,4],[134,22,101,4,"cleanup"],[134,29,101,11,"cleanup"],[134,30,101,12,"getStableId"],[134,41,101,23],[134,43,101,25,"getItemType"],[134,54,101,36],[134,56,101,38,"engagedIndices"],[134,70,101,52],[134,72,101,54,"dataLength"],[134,82,101,64],[134,84,101,66],[135,8,102,8],[135,12,102,14,"itemsToDelete"],[135,25,102,27],[135,28,102,30],[135,32,102,34,"Array"],[135,37,102,39],[135,38,102,40],[135,39,102,41],[136,8,103,8],[137,8,104,8],[137,17,104,8,"_ref"],[137,21,104,8],[137,25,104,37],[137,29,104,41],[137,30,104,42,"keyMap"],[137,36,104,48],[137,37,104,49,"entries"],[137,44,104,56],[137,45,104,57],[137,46,104,58],[137,48,104,60],[138,10,104,60],[138,14,104,60,"_ref2"],[138,19,104,60],[138,26,104,60,"_slicedToArray"],[138,40,104,60],[138,41,104,60,"default"],[138,48,104,60],[138,50,104,60,"_ref"],[138,54,104,60],[139,10,104,60],[139,14,104,20,"key"],[139,17,104,23],[139,20,104,23,"_ref2"],[139,25,104,23],[140,10,104,23],[140,14,104,25,"keyInfo"],[140,21,104,32],[140,24,104,32,"_ref2"],[140,29,104,32],[141,10,105,12],[141,14,105,20,"index"],[141,19,105,25],[141,22,105,50,"keyInfo"],[141,29,105,57],[141,30,105,20,"index"],[141,35,105,25],[142,12,105,27,"itemType"],[142,20,105,35],[142,23,105,50,"keyInfo"],[142,30,105,57],[142,31,105,27,"itemType"],[142,39,105,35],[143,12,105,37,"stableId"],[143,20,105,45],[143,23,105,50,"keyInfo"],[143,30,105,57],[143,31,105,37,"stableId"],[143,39,105,45],[144,10,106,12],[144,14,106,18,"indexOutOfBounds"],[144,30,106,34],[144,33,106,37,"index"],[144,38,106,42],[144,42,106,46,"dataLength"],[144,52,106,56],[145,10,107,12],[145,14,107,18,"hasStableIdChanged"],[145,32,107,36],[145,35,107,39],[145,36,107,40,"indexOutOfBounds"],[145,52,107,56],[145,56,107,60,"getStableId"],[145,67,107,71],[145,68,107,72,"index"],[145,73,107,77],[145,74,107,78],[145,79,107,83,"stableId"],[145,87,107,91],[146,10,108,12],[146,14,108,16,"indexOutOfBounds"],[146,30,108,32],[146,34,108,36,"hasStableIdChanged"],[146,52,108,54],[146,54,108,56],[147,12,109,16],[147,16,109,22,"nextIndex"],[147,25,109,31],[147,28,109,34],[147,32,109,38],[147,33,109,39,"unProcessedIndices"],[147,51,109,57],[147,52,109,58,"values"],[147,58,109,64],[147,59,109,65],[147,60,109,66],[147,61,109,67,"next"],[147,65,109,71],[147,66,109,72],[147,67,109,73],[147,68,109,74,"value"],[147,73,109,79],[148,12,110,16],[148,16,110,20,"shouldDeleteKey"],[148,31,110,35],[148,34,110,38],[148,38,110,42],[149,12,111,16],[149,16,111,20,"nextIndex"],[149,25,111,29],[149,30,111,34,"undefined"],[149,39,111,43],[149,41,111,45],[150,14,112,20],[150,18,112,26,"nextItemType"],[150,30,112,38],[150,33,112,41,"getItemType"],[150,44,112,52],[150,45,112,53,"nextIndex"],[150,54,112,62],[150,55,112,63],[151,14,113,20],[151,18,113,26,"nextStableId"],[151,30,113,38],[151,33,113,41,"getStableId"],[151,44,113,52],[151,45,113,53,"nextIndex"],[151,54,113,62],[151,55,113,63],[152,14,114,20],[152,18,114,24,"itemType"],[152,26,114,32],[152,31,114,37,"nextItemType"],[152,43,114,49],[152,45,114,51],[153,16,115,24],[153,20,115,28],[153,21,115,29,"syncItem"],[153,29,115,37],[153,30,115,38,"nextIndex"],[153,39,115,47],[153,41,115,49,"nextItemType"],[153,53,115,61],[153,55,115,63,"nextStableId"],[153,67,115,75],[153,68,115,76],[154,16,116,24,"shouldDeleteKey"],[154,31,116,39],[154,34,116,42],[154,39,116,47],[155,14,117,20],[156,12,118,16],[157,12,119,16],[157,16,119,20,"shouldDeleteKey"],[157,31,119,35],[157,33,119,37],[158,14,120,20],[158,18,120,24],[158,19,120,25,"deleteKeyFromRecyclePool"],[158,43,120,49],[158,44,120,50,"itemType"],[158,52,120,58],[158,54,120,60,"key"],[158,57,120,63],[158,58,120,64],[159,14,121,20],[159,18,121,24],[159,19,121,25,"stableIdMap"],[159,30,121,36],[159,31,121,37,"delete"],[159,37,121,43],[159,38,121,44,"stableId"],[159,46,121,52],[159,47,121,53],[160,14,122,20,"itemsToDelete"],[160,27,122,33],[160,28,122,34,"push"],[160,32,122,38],[160,33,122,39,"key"],[160,36,122,42],[160,37,122,43],[161,12,123,16],[162,10,124,12],[163,8,125,8],[164,8,126,8],[164,13,126,13],[164,17,126,19,"key"],[164,21,126,22],[164,25,126,26,"itemsToDelete"],[164,38,126,39],[164,40,126,41],[165,10,127,12],[165,14,127,16],[165,15,127,17,"keyMap"],[165,21,127,23],[165,22,127,24,"delete"],[165,28,127,30],[165,29,127,31,"key"],[165,33,127,34],[165,34,127,35],[166,8,128,8],[167,8,129,8],[168,8,130,8],[168,12,130,14,"itemsRenderedForRecycling"],[168,37,130,39],[168,40,130,42],[168,44,130,46],[168,45,130,47,"keyMap"],[168,51,130,53],[168,52,130,54,"size"],[168,56,130,58],[168,59,130,61,"engagedIndices"],[168,73,130,75],[168,74,130,76,"length"],[168,80,130,82],[169,8,131,8],[169,12,131,12,"itemsRenderedForRecycling"],[169,37,131,37],[169,40,131,40],[169,44,131,44],[169,45,131,45,"maxItemsInRecyclePool"],[169,66,131,66],[169,68,131,68],[170,10,132,12],[170,14,132,18,"deleteCount"],[170,25,132,29],[170,28,132,32,"itemsRenderedForRecycling"],[170,53,132,57],[170,56,132,60],[170,60,132,64],[170,61,132,65,"maxItemsInRecyclePool"],[170,82,132,86],[171,10,133,12],[171,14,133,16,"deleted"],[171,21,133,23],[171,24,133,26],[171,25,133,27],[172,10,134,12],[173,10,135,12],[173,14,135,18,"entries"],[173,21,135,25],[173,24,135,28,"Array"],[173,29,135,33],[173,30,135,34,"from"],[173,34,135,38],[173,35,135,39],[173,39,135,43],[173,40,135,44,"keyMap"],[173,46,135,50],[173,47,135,51,"entries"],[173,54,135,58],[173,55,135,59],[173,56,135,60],[173,57,135,61],[173,58,135,62,"reverse"],[173,65,135,69],[173,66,135,70],[173,67,135,71],[174,10,136,12],[174,15,136,17],[174,19,136,21,"i"],[174,20,136,22],[174,23,136,25],[174,24,136,26],[174,26,136,28,"i"],[174,27,136,29],[174,30,136,32,"entries"],[174,37,136,39],[174,38,136,40,"length"],[174,44,136,46],[174,48,136,50,"deleted"],[174,55,136,57],[174,58,136,60,"deleteCount"],[174,69,136,71],[174,71,136,73,"i"],[174,72,136,74],[174,74,136,76],[174,76,136,78],[175,12,137,16],[175,16,137,16,"_entries$i"],[175,26,137,16],[175,33,137,16,"_slicedToArray"],[175,47,137,16],[175,48,137,16,"default"],[175,55,137,16],[175,57,137,39,"entries"],[175,64,137,46],[175,65,137,47,"i"],[175,66,137,48],[175,67,137,49],[176,14,137,23,"key"],[176,19,137,26],[176,22,137,26,"_entries$i"],[176,32,137,26],[177,14,137,28,"keyInfo"],[177,22,137,35],[177,25,137,35,"_entries$i"],[177,35,137,35],[178,12,138,16],[178,16,138,24,"index"],[178,23,138,29],[178,26,138,54,"keyInfo"],[178,34,138,61],[178,35,138,24,"index"],[178,40,138,29],[179,14,138,31,"itemType"],[179,23,138,39],[179,26,138,54,"keyInfo"],[179,34,138,61],[179,35,138,31,"itemType"],[179,43,138,39],[180,14,138,41,"stableId"],[180,23,138,49],[180,26,138,54,"keyInfo"],[180,34,138,61],[180,35,138,41,"stableId"],[180,43,138,49],[181,12,139,16],[181,16,139,20],[181,17,139,21,"engagedIndices"],[181,31,139,35],[181,32,139,36,"includes"],[181,40,139,44],[181,41,139,45,"index"],[181,48,139,50],[181,49,139,51],[181,51,139,53],[182,14,140,20],[182,18,140,24],[182,19,140,25,"deleteKeyFromRecyclePool"],[182,43,140,49],[182,44,140,50,"itemType"],[182,53,140,58],[182,55,140,60,"key"],[182,60,140,63],[182,61,140,64],[183,14,141,20],[183,18,141,24],[183,19,141,25,"stableIdMap"],[183,30,141,36],[183,31,141,37,"delete"],[183,37,141,43],[183,38,141,44,"stableId"],[183,47,141,52],[183,48,141,53],[184,14,142,20],[184,18,142,24],[184,19,142,25,"keyMap"],[184,25,142,31],[184,26,142,32,"delete"],[184,32,142,38],[184,33,142,39,"key"],[184,38,142,42],[184,39,142,43],[185,14,143,20,"deleted"],[185,21,143,27],[185,23,143,29],[186,12,144,16],[187,10,145,12],[188,8,146,8],[189,6,147,4],[190,6,148,4],[191,0,149,0],[192,0,150,0],[193,4,148,4],[194,6,148,4,"key"],[194,9,148,4],[195,6,148,4,"value"],[195,11,148,4],[195,13,151,4],[195,22,151,4,"recycleKey"],[195,32,151,14,"recycleKey"],[195,33,151,15,"key"],[195,36,151,18],[195,38,151,20],[196,8,152,8],[196,12,152,12],[196,16,152,16],[196,17,152,17,"disableRecycling"],[196,33,152,33],[196,35,152,35],[197,10,153,12],[198,8,154,8],[199,8,155,8],[199,12,155,14,"keyInfo"],[199,19,155,21],[199,22,155,24],[199,26,155,28],[199,27,155,29,"keyMap"],[199,33,155,35],[199,34,155,36,"get"],[199,37,155,39],[199,38,155,40,"key"],[199,41,155,43],[199,42,155,44],[200,8,156,8],[200,12,156,12],[200,13,156,13,"keyInfo"],[200,20,156,20],[200,22,156,22],[201,10,157,12],[202,8,158,8],[203,8,159,8],[203,12,159,16,"itemType"],[203,20,159,24],[203,23,159,29,"keyInfo"],[203,30,159,36],[203,31,159,16,"itemType"],[203,39,159,24],[204,8,160,8],[205,8,161,8],[205,12,161,14,"pool"],[205,16,161,18],[205,19,161,21],[205,23,161,25],[205,24,161,26,"getRecyclePoolForType"],[205,45,161,47],[205,46,161,48,"itemType"],[205,54,161,56],[205,55,161,57],[206,8,162,8,"pool"],[206,12,162,12],[206,13,162,13,"add"],[206,16,162,16],[206,17,162,17,"key"],[206,20,162,20],[206,21,162,21],[207,6,163,4],[208,6,164,4],[209,0,165,0],[210,0,166,0],[211,4,164,4],[212,6,164,4,"key"],[212,9,164,4],[213,6,164,4,"value"],[213,11,164,4],[213,13,167,4],[213,22,167,4,"getRenderStack"],[213,36,167,18,"getRenderStack"],[213,37,167,18],[213,39,167,21],[214,8,168,8],[214,15,168,15],[214,19,168,19],[214,20,168,20,"keyMap"],[214,26,168,26],[215,6,169,4],[216,6,170,4],[217,0,171,0],[218,0,172,0],[219,0,173,0],[220,0,174,0],[221,0,175,0],[222,4,170,4],[223,6,170,4,"key"],[223,9,170,4],[224,6,170,4,"value"],[224,11,170,4],[224,13,176,4],[224,22,176,4,"syncItem"],[224,30,176,12,"syncItem"],[224,31,176,13,"index"],[224,36,176,18],[224,38,176,20,"itemType"],[224,46,176,28],[224,48,176,30,"stableId"],[224,56,176,38],[224,58,176,40],[225,8,177,8],[226,8,178,8],[226,12,178,14,"newKey"],[226,18,178,20],[226,21,178,23],[226,25,178,27],[226,26,178,28,"stableIdMap"],[226,37,178,39],[226,38,178,40,"get"],[226,41,178,43],[226,42,178,44,"stableId"],[226,50,178,52],[226,51,178,53],[226,55,179,12],[226,59,179,16],[226,60,179,17,"getKeyFromRecyclePool"],[226,81,179,38],[226,82,179,39,"itemType"],[226,90,179,47],[226,91,179,48],[226,95,180,12],[226,99,180,16],[226,100,180,17,"generateKey"],[226,111,180,28],[226,112,180,29],[226,113,180,30],[227,8,181,8],[227,12,181,12],[227,13,181,13,"unProcessedIndices"],[227,31,181,31],[227,32,181,32,"delete"],[227,38,181,38],[227,39,181,39,"index"],[227,44,181,44],[227,45,181,45],[228,8,182,8],[228,12,182,14,"keyInfo"],[228,19,182,21],[228,22,182,24],[228,26,182,28],[228,27,182,29,"keyMap"],[228,33,182,35],[228,34,182,36,"get"],[228,37,182,39],[228,38,182,40,"newKey"],[228,44,182,46],[228,45,182,47],[229,8,183,8],[229,12,183,12,"keyInfo"],[229,19,183,19],[229,21,183,21],[230,10,184,12],[231,10,185,12],[231,14,185,16],[231,15,185,17,"deleteKeyFromRecyclePool"],[231,39,185,41],[231,40,185,42,"itemType"],[231,48,185,50],[231,50,185,52,"newKey"],[231,56,185,58],[231,57,185,59],[232,10,186,12],[232,14,186,16],[232,15,186,17,"deleteKeyFromRecyclePool"],[232,39,186,41],[232,40,186,42,"keyInfo"],[232,47,186,49],[232,48,186,50,"itemType"],[232,56,186,58],[232,58,186,60,"newKey"],[232,64,186,66],[232,65,186,67],[233,10,187,12],[233,14,187,16],[233,15,187,17,"stableIdMap"],[233,26,187,28],[233,27,187,29,"delete"],[233,33,187,35],[233,34,187,36,"keyInfo"],[233,41,187,43],[233,42,187,44,"stableId"],[233,50,187,52],[233,51,187,53],[234,10,188,12,"keyInfo"],[234,17,188,19],[234,18,188,20,"index"],[234,23,188,25],[234,26,188,28,"index"],[234,31,188,33],[235,10,189,12,"keyInfo"],[235,17,189,19],[235,18,189,20,"itemType"],[235,26,189,28],[235,29,189,31,"itemType"],[235,37,189,39],[236,10,190,12,"keyInfo"],[236,17,190,19],[236,18,190,20,"stableId"],[236,26,190,28],[236,29,190,31,"stableId"],[236,37,190,39],[237,8,191,8],[237,9,191,9],[237,15,192,13],[238,10,193,12],[239,10,194,12],[239,14,194,16],[239,15,194,17,"keyMap"],[239,21,194,23],[239,22,194,24,"set"],[239,25,194,27],[239,26,194,28,"newKey"],[239,32,194,34],[239,34,194,36],[240,12,195,16,"itemType"],[240,20,195,24],[241,12,196,16,"index"],[241,17,196,21],[242,12,197,16,"stableId"],[243,10,198,12],[243,11,198,13],[243,12,198,14],[244,8,199,8],[245,8,200,8],[245,12,200,12],[245,13,200,13,"stableIdMap"],[245,24,200,24],[245,25,200,25,"set"],[245,28,200,28],[245,29,200,29,"stableId"],[245,37,200,37],[245,39,200,39,"newKey"],[245,45,200,45],[245,46,200,46],[246,8,201,8],[246,15,201,15,"newKey"],[246,21,201,21],[247,6,202,4],[248,6,203,4],[249,0,204,0],[250,0,205,0],[251,0,206,0],[252,4,203,4],[253,6,203,4,"key"],[253,9,203,4],[254,6,203,4,"value"],[254,11,203,4],[254,13,207,4],[254,22,207,4,"clearRecyclePool"],[254,38,207,20,"clearRecyclePool"],[254,39,207,20],[254,41,207,23],[255,8,208,8],[256,8,209,8],[256,13,209,13],[256,17,209,19,"pool"],[256,21,209,23],[256,25,209,27],[256,29,209,31],[256,30,209,32,"recycleKeyPools"],[256,45,209,47],[256,46,209,48,"values"],[256,52,209,54],[256,53,209,55],[256,54,209,56],[256,56,209,58],[257,10,210,12,"pool"],[257,14,210,16],[257,15,210,17,"clear"],[257,20,210,22],[257,21,210,23],[257,22,210,24],[258,8,211,8],[259,6,212,4],[260,6,213,4],[261,0,214,0],[262,0,215,0],[263,0,216,0],[264,4,213,4],[265,6,213,4,"key"],[265,9,213,4],[266,6,213,4,"value"],[266,11,213,4],[266,13,217,4],[266,22,217,4,"generateKey"],[266,33,217,15,"generateKey"],[266,34,217,15],[266,36,217,18],[267,8,218,8],[267,15,218,15],[267,16,218,16],[267,20,218,20],[267,21,218,21,"keyCounter"],[267,31,218,31],[267,33,218,33],[267,35,218,35,"toString"],[267,43,218,43],[267,44,218,44],[267,45,218,45],[268,6,219,4],[269,6,220,4],[270,0,221,0],[271,0,222,0],[272,4,220,4],[273,6,220,4,"key"],[273,9,220,4],[274,6,220,4,"value"],[274,11,220,4],[274,13,223,4],[274,22,223,4,"deleteKeyFromRecyclePool"],[274,46,223,28,"deleteKeyFromRecyclePool"],[274,47,223,29,"itemType"],[274,55,223,37],[274,57,223,39,"key"],[274,60,223,42],[274,62,223,44],[275,8,224,8],[275,12,224,12,"_a"],[275,14,224,14],[276,8,225,8],[276,9,225,9,"_a"],[276,11,225,11],[276,14,225,14],[276,18,225,18],[276,19,225,19,"recycleKeyPools"],[276,34,225,34],[276,35,225,35,"get"],[276,38,225,38],[276,39,225,39,"itemType"],[276,47,225,47],[276,48,225,48],[276,54,225,54],[276,58,225,58],[276,62,225,62,"_a"],[276,64,225,64],[276,69,225,69],[276,74,225,74],[276,75,225,75],[276,78,225,78],[276,83,225,83],[276,84,225,84],[276,87,225,87,"_a"],[276,89,225,89],[276,90,225,90,"delete"],[276,96,225,96],[276,97,225,97,"key"],[276,100,225,100],[276,101,225,101],[277,6,226,4],[278,6,227,4],[279,0,228,0],[280,0,229,0],[281,4,227,4],[282,6,227,4,"key"],[282,9,227,4],[283,6,227,4,"value"],[283,11,227,4],[283,13,230,4],[283,22,230,4,"getRecyclePoolForType"],[283,43,230,25,"getRecyclePoolForType"],[283,44,230,26,"itemType"],[283,52,230,34],[283,54,230,36],[284,8,231,8],[284,12,231,12,"pool"],[284,16,231,16],[284,19,231,19],[284,23,231,23],[284,24,231,24,"recycleKeyPools"],[284,39,231,39],[284,40,231,40,"get"],[284,43,231,43],[284,44,231,44,"itemType"],[284,52,231,52],[284,53,231,53],[285,8,232,8],[285,12,232,12],[285,13,232,13,"pool"],[285,17,232,17],[285,19,232,19],[286,10,233,12,"pool"],[286,14,233,16],[286,17,233,19],[286,21,233,23,"Set"],[286,24,233,26],[286,25,233,27],[286,26,233,28],[287,10,234,12],[287,14,234,16],[287,15,234,17,"recycleKeyPools"],[287,30,234,32],[287,31,234,33,"set"],[287,34,234,36],[287,35,234,37,"itemType"],[287,43,234,45],[287,45,234,47,"pool"],[287,49,234,51],[287,50,234,52],[288,8,235,8],[289,8,236,8],[289,15,236,15,"pool"],[289,19,236,19],[290,6,237,4],[291,6,238,4],[292,0,239,0],[293,0,240,0],[294,0,241,0],[295,4,238,4],[296,6,238,4,"key"],[296,9,238,4],[297,6,238,4,"value"],[297,11,238,4],[297,13,242,4],[297,22,242,4,"getKeyFromRecyclePool"],[297,43,242,25,"getKeyFromRecyclePool"],[297,44,242,26,"itemType"],[297,52,242,34],[297,54,242,36],[298,8,243,8],[298,12,243,14,"pool"],[298,16,243,18],[298,19,243,21],[298,23,243,25],[298,24,243,26,"getRecyclePoolForType"],[298,45,243,47],[298,46,243,48,"itemType"],[298,54,243,56],[298,55,243,57],[299,8,244,8],[299,12,244,12,"pool"],[299,16,244,16],[299,17,244,17,"size"],[299,21,244,21],[299,24,244,24],[299,25,244,25],[299,27,244,27],[300,10,245,12],[300,14,245,18,"key"],[300,17,245,21],[300,20,245,24,"pool"],[300,24,245,28],[300,25,245,29,"values"],[300,31,245,35],[300,32,245,36],[300,33,245,37],[300,34,245,38,"next"],[300,38,245,42],[300,39,245,43],[300,40,245,44],[300,41,245,45,"value"],[300,46,245,50],[301,10,246,12,"pool"],[301,14,246,16],[301,15,246,17,"delete"],[301,21,246,23],[301,22,246,24,"key"],[301,25,246,27],[301,26,246,28],[302,10,247,12],[302,17,247,19,"key"],[302,20,247,22],[303,8,248,8],[304,8,249,8],[304,15,249,15,"undefined"],[304,24,249,24],[305,6,250,4],[306,4,250,5],[307,2,250,5],[308,0,250,5],[308,3]],"functionMap":{"names":["<global>","RenderStackManager","constructor","sync","keyMap.forEach$argument_0","hasOptimizedKey","cleanup","recycleKey","getRenderStack","syncItem","clearRecyclePool","generateKey","deleteKeyFromRecyclePool","getRecyclePoolForType","getKeyFromRecyclePool"],"mappings":"AAA;OCK;ICI;KDQ;IEc;4BCI;SDkB;KFmC;III;KJE;IKM;KL8C;IMI;KNY;IOI;KPE;IQO;KR0B;ISK;KTK;IUK;KVE;IWI;KXG;IYI;KZO;IaK;KbQ;CDC"},"hasCjsExports":false},"type":"js/module"}]}