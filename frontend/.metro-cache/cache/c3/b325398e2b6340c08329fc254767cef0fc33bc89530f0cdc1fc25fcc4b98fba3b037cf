{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"ConsecutiveNumbers\", {\n    enumerable: true,\n    get: function () {\n      return ConsecutiveNumbers;\n    }\n  });\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  /**\n   * A simple wrapper for consecutive postive integer arrays\n   * Only stores start and end indices for faster computation as numbers are consecutive.\n   */\n  var ConsecutiveNumbers = /*#__PURE__*/function () {\n    function ConsecutiveNumbers(startIndex, endIndex) {\n      (0, _classCallCheck.default)(this, ConsecutiveNumbers);\n      this.startIndex = startIndex;\n      this.endIndex = endIndex;\n    }\n    /**\n     * Get the length of the array\n     */\n    return (0, _createClass.default)(ConsecutiveNumbers, [{\n      key: \"length\",\n      get: function () {\n        return Math.max(0, this.endIndex - this.startIndex + 1);\n      }\n      /**\n       * Get element at specified index\n       */\n    }, {\n      key: \"at\",\n      value: function at(index) {\n        return this.startIndex + index;\n      }\n      /**\n       * Check if two consecutive numbers are equal\n       */\n    }, {\n      key: \"equals\",\n      value: function equals(other) {\n        return this.startIndex === other.startIndex && this.endIndex === other.endIndex;\n      }\n      /**\n       * Converts the consecutive range to an actual array\n       * @returns An array containing all consecutive numbers\n       */\n    }, {\n      key: \"toArray\",\n      value: function toArray() {\n        if (this.length === 0) {\n          return [];\n        }\n        var array = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          array[i] = this.startIndex + i;\n        }\n        return array;\n      }\n      /**\n       * Check if array includes a value\n       */\n    }, {\n      key: \"includes\",\n      value: function includes(value) {\n        return value >= this.startIndex && value <= this.endIndex;\n      }\n      /**\n       * Get index of a value in the consecutive range\n       */\n    }, {\n      key: \"indexOf\",\n      value: function indexOf(value) {\n        return this.includes(value) ? value - this.startIndex : -1;\n      }\n    }, {\n      key: \"findValue\",\n      value: function findValue(predicate) {\n        for (var i = 0; i < this.length; i++) {\n          var value = this.startIndex + i;\n          if (predicate(value, i, this)) {\n            return value;\n          }\n        }\n        return undefined;\n      }\n      /**\n       * Tests whether all elements in the consecutive range pass the provided test function\n       * @param predicate A function that tests each element\n       * @returns true if all elements pass the test; otherwise, false\n       */\n    }, {\n      key: \"every\",\n      value: function every(predicate) {\n        for (var i = 0; i < this.length; i++) {\n          var value = this.startIndex + i;\n          if (!predicate(value, i, this)) {\n            return false;\n          }\n        }\n        return true;\n      }\n      /**\n       * Get a slice of the consecutive array\n       */\n    }, {\n      key: \"slice\",\n      value: function slice() {\n        var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;\n        var newStart = this.startIndex + start;\n        var newEnd = this.startIndex + Math.min(end, this.length) - 1;\n        return new ConsecutiveNumbers(newStart, Math.max(newStart - 1, newEnd));\n      }\n      /**\n       * Implement iterator to enable for...of\n       */\n    }, {\n      key: Symbol.iterator,\n      value: function* () {\n        for (var i = this.startIndex; i <= this.endIndex; i++) {\n          yield i;\n        }\n      }\n    }]);\n  }();\n  ConsecutiveNumbers.EMPTY = new ConsecutiveNumbers(-1, -2);\n});","lineCount":140,"map":[[12,2,5,0,"Object"],[12,8,5,0],[12,9,5,0,"defineProperty"],[12,23,5,0],[12,24,5,0,"exports"],[12,31,5,0],[13,4,5,0,"enumerable"],[13,14,5,0],[14,4,5,0,"get"],[14,7,5,0],[14,18,5,0,"get"],[14,19,5,0],[15,6,5,0],[15,13,5,0,"ConsecutiveNumbers"],[15,31,5,0],[16,4,5,0],[17,2,5,0],[18,2,93,1],[18,6,93,1,"_babelRuntimeHelpersClassCallCheck"],[18,40,93,1],[18,43,93,1,"require"],[18,50,93,1],[18,51,93,1,"_dependencyMap"],[18,65,93,1],[19,2,93,1],[19,6,93,1,"_classCallCheck"],[19,21,93,1],[19,24,93,1,"_interopDefault"],[19,39,93,1],[19,40,93,1,"_babelRuntimeHelpersClassCallCheck"],[19,74,93,1],[20,2,93,1],[20,6,93,1,"_babelRuntimeHelpersCreateClass"],[20,37,93,1],[20,40,93,1,"require"],[20,47,93,1],[20,48,93,1,"_dependencyMap"],[20,62,93,1],[21,2,93,1],[21,6,93,1,"_createClass"],[21,18,93,1],[21,21,93,1,"_interopDefault"],[21,36,93,1],[21,37,93,1,"_babelRuntimeHelpersCreateClass"],[21,68,93,1],[22,2,1,0],[23,0,2,0],[24,0,3,0],[25,0,4,0],[26,2,1,0],[26,6,5,13,"ConsecutiveNumbers"],[26,24,5,31],[27,4,6,4],[27,13,6,4,"ConsecutiveNumbers"],[27,32,6,16,"startIndex"],[27,42,6,26],[27,44,6,28,"endIndex"],[27,52,6,36],[27,54,6,38],[28,6,6,38],[28,10,6,38,"_classCallCheck"],[28,25,6,38],[28,26,6,38,"default"],[28,33,6,38],[28,41,6,38,"ConsecutiveNumbers"],[28,59,6,38],[29,6,7,8],[29,10,7,12],[29,11,7,13,"startIndex"],[29,21,7,23],[29,24,7,26,"startIndex"],[29,34,7,36],[30,6,8,8],[30,10,8,12],[30,11,8,13,"endIndex"],[30,19,8,21],[30,22,8,24,"endIndex"],[30,30,8,32],[31,4,9,4],[32,4,10,4],[33,0,11,0],[34,0,12,0],[35,4,10,4],[35,15,10,4,"_createClass"],[35,27,10,4],[35,28,10,4,"default"],[35,35,10,4],[35,37,10,4,"ConsecutiveNumbers"],[35,55,10,4],[36,6,10,4,"key"],[36,9,10,4],[37,6,10,4,"get"],[37,9,10,4],[37,11,13,4],[37,20,13,4,"get"],[37,21,13,4],[37,23,13,17],[38,8,14,8],[38,15,14,15,"Math"],[38,19,14,19],[38,20,14,20,"max"],[38,23,14,23],[38,24,14,24],[38,25,14,25],[38,27,14,27],[38,31,14,31],[38,32,14,32,"endIndex"],[38,40,14,40],[38,43,14,43],[38,47,14,47],[38,48,14,48,"startIndex"],[38,58,14,58],[38,61,14,61],[38,62,14,62],[38,63,14,63],[39,6,15,4],[40,6,16,4],[41,0,17,0],[42,0,18,0],[43,4,16,4],[44,6,16,4,"key"],[44,9,16,4],[45,6,16,4,"value"],[45,11,16,4],[45,13,19,4],[45,22,19,4,"at"],[45,24,19,6,"at"],[45,25,19,7,"index"],[45,30,19,12],[45,32,19,14],[46,8,20,8],[46,15,20,15],[46,19,20,19],[46,20,20,20,"startIndex"],[46,30,20,30],[46,33,20,33,"index"],[46,38,20,38],[47,6,21,4],[48,6,22,4],[49,0,23,0],[50,0,24,0],[51,4,22,4],[52,6,22,4,"key"],[52,9,22,4],[53,6,22,4,"value"],[53,11,22,4],[53,13,25,4],[53,22,25,4,"equals"],[53,28,25,10,"equals"],[53,29,25,11,"other"],[53,34,25,16],[53,36,25,18],[54,8,26,8],[54,15,26,16],[54,19,26,20],[54,20,26,21,"startIndex"],[54,30,26,31],[54,35,26,36,"other"],[54,40,26,41],[54,41,26,42,"startIndex"],[54,51,26,52],[54,55,26,56],[54,59,26,60],[54,60,26,61,"endIndex"],[54,68,26,69],[54,73,26,74,"other"],[54,78,26,79],[54,79,26,80,"endIndex"],[54,87,26,88],[55,6,27,4],[56,6,28,4],[57,0,29,0],[58,0,30,0],[59,0,31,0],[60,4,28,4],[61,6,28,4,"key"],[61,9,28,4],[62,6,28,4,"value"],[62,11,28,4],[62,13,32,4],[62,22,32,4,"toArray"],[62,29,32,11,"toArray"],[62,30,32,11],[62,32,32,14],[63,8,33,8],[63,12,33,12],[63,16,33,16],[63,17,33,17,"length"],[63,23,33,23],[63,28,33,28],[63,29,33,29],[63,31,33,31],[64,10,34,12],[64,17,34,19],[64,19,34,21],[65,8,35,8],[66,8,36,8],[66,12,36,14,"array"],[66,17,36,19],[66,20,36,22],[66,24,36,26,"Array"],[66,29,36,31],[66,30,36,32],[66,34,36,36],[66,35,36,37,"length"],[66,41,36,43],[66,42,36,44],[67,8,37,8],[67,13,37,13],[67,17,37,17,"i"],[67,18,37,18],[67,21,37,21],[67,22,37,22],[67,24,37,24,"i"],[67,25,37,25],[67,28,37,28],[67,32,37,32],[67,33,37,33,"length"],[67,39,37,39],[67,41,37,41,"i"],[67,42,37,42],[67,44,37,44],[67,46,37,46],[68,10,38,12,"array"],[68,15,38,17],[68,16,38,18,"i"],[68,17,38,19],[68,18,38,20],[68,21,38,23],[68,25,38,27],[68,26,38,28,"startIndex"],[68,36,38,38],[68,39,38,41,"i"],[68,40,38,42],[69,8,39,8],[70,8,40,8],[70,15,40,15,"array"],[70,20,40,20],[71,6,41,4],[72,6,42,4],[73,0,43,0],[74,0,44,0],[75,4,42,4],[76,6,42,4,"key"],[76,9,42,4],[77,6,42,4,"value"],[77,11,42,4],[77,13,45,4],[77,22,45,4,"includes"],[77,30,45,12,"includes"],[77,31,45,13,"value"],[77,36,45,18],[77,38,45,20],[78,8,46,8],[78,15,46,15,"value"],[78,20,46,20],[78,24,46,24],[78,28,46,28],[78,29,46,29,"startIndex"],[78,39,46,39],[78,43,46,43,"value"],[78,48,46,48],[78,52,46,52],[78,56,46,56],[78,57,46,57,"endIndex"],[78,65,46,65],[79,6,47,4],[80,6,48,4],[81,0,49,0],[82,0,50,0],[83,4,48,4],[84,6,48,4,"key"],[84,9,48,4],[85,6,48,4,"value"],[85,11,48,4],[85,13,51,4],[85,22,51,4,"indexOf"],[85,29,51,11,"indexOf"],[85,30,51,12,"value"],[85,35,51,17],[85,37,51,19],[86,8,52,8],[86,15,52,15],[86,19,52,19],[86,20,52,20,"includes"],[86,28,52,28],[86,29,52,29,"value"],[86,34,52,34],[86,35,52,35],[86,38,52,38,"value"],[86,43,52,43],[86,46,52,46],[86,50,52,50],[86,51,52,51,"startIndex"],[86,61,52,61],[86,64,52,64],[86,65,52,65],[86,66,52,66],[87,6,53,4],[88,4,53,5],[89,6,53,5,"key"],[89,9,53,5],[90,6,53,5,"value"],[90,11,53,5],[90,13,54,4],[90,22,54,4,"findValue"],[90,31,54,13,"findValue"],[90,32,54,14,"predicate"],[90,41,54,23],[90,43,54,25],[91,8,55,8],[91,13,55,13],[91,17,55,17,"i"],[91,18,55,18],[91,21,55,21],[91,22,55,22],[91,24,55,24,"i"],[91,25,55,25],[91,28,55,28],[91,32,55,32],[91,33,55,33,"length"],[91,39,55,39],[91,41,55,41,"i"],[91,42,55,42],[91,44,55,44],[91,46,55,46],[92,10,56,12],[92,14,56,18,"value"],[92,19,56,23],[92,22,56,26],[92,26,56,30],[92,27,56,31,"startIndex"],[92,37,56,41],[92,40,56,44,"i"],[92,41,56,45],[93,10,57,12],[93,14,57,16,"predicate"],[93,23,57,25],[93,24,57,26,"value"],[93,29,57,31],[93,31,57,33,"i"],[93,32,57,34],[93,34,57,36],[93,38,57,40],[93,39,57,41],[93,41,57,43],[94,12,58,16],[94,19,58,23,"value"],[94,24,58,28],[95,10,59,12],[96,8,60,8],[97,8,61,8],[97,15,61,15,"undefined"],[97,24,61,24],[98,6,62,4],[99,6,63,4],[100,0,64,0],[101,0,65,0],[102,0,66,0],[103,0,67,0],[104,4,63,4],[105,6,63,4,"key"],[105,9,63,4],[106,6,63,4,"value"],[106,11,63,4],[106,13,68,4],[106,22,68,4,"every"],[106,27,68,9,"every"],[106,28,68,10,"predicate"],[106,37,68,19],[106,39,68,21],[107,8,69,8],[107,13,69,13],[107,17,69,17,"i"],[107,18,69,18],[107,21,69,21],[107,22,69,22],[107,24,69,24,"i"],[107,25,69,25],[107,28,69,28],[107,32,69,32],[107,33,69,33,"length"],[107,39,69,39],[107,41,69,41,"i"],[107,42,69,42],[107,44,69,44],[107,46,69,46],[108,10,70,12],[108,14,70,18,"value"],[108,19,70,23],[108,22,70,26],[108,26,70,30],[108,27,70,31,"startIndex"],[108,37,70,41],[108,40,70,44,"i"],[108,41,70,45],[109,10,71,12],[109,14,71,16],[109,15,71,17,"predicate"],[109,24,71,26],[109,25,71,27,"value"],[109,30,71,32],[109,32,71,34,"i"],[109,33,71,35],[109,35,71,37],[109,39,71,41],[109,40,71,42],[109,42,71,44],[110,12,72,16],[110,19,72,23],[110,24,72,28],[111,10,73,12],[112,8,74,8],[113,8,75,8],[113,15,75,15],[113,19,75,19],[114,6,76,4],[115,6,77,4],[116,0,78,0],[117,0,79,0],[118,4,77,4],[119,6,77,4,"key"],[119,9,77,4],[120,6,77,4,"value"],[120,11,77,4],[120,13,80,4],[120,22,80,4,"slice"],[120,27,80,9,"slice"],[120,28,80,9],[120,30,80,40],[121,8,80,40],[121,12,80,10,"start"],[121,17,80,15],[121,20,80,15,"arguments"],[121,29,80,15],[121,30,80,15,"length"],[121,36,80,15],[121,44,80,15,"arguments"],[121,53,80,15],[121,61,80,15,"undefined"],[121,70,80,15],[121,73,80,15,"arguments"],[121,82,80,15],[121,88,80,18],[121,89,80,19],[122,8,80,19],[122,12,80,21,"end"],[122,15,80,24],[122,18,80,24,"arguments"],[122,27,80,24],[122,28,80,24,"length"],[122,34,80,24],[122,42,80,24,"arguments"],[122,51,80,24],[122,59,80,24,"undefined"],[122,68,80,24],[122,71,80,24,"arguments"],[122,80,80,24],[122,86,80,27],[122,90,80,31],[122,91,80,32,"length"],[122,97,80,38],[123,8,81,8],[123,12,81,14,"newStart"],[123,20,81,22],[123,23,81,25],[123,27,81,29],[123,28,81,30,"startIndex"],[123,38,81,40],[123,41,81,43,"start"],[123,46,81,48],[124,8,82,8],[124,12,82,14,"newEnd"],[124,18,82,20],[124,21,82,23],[124,25,82,27],[124,26,82,28,"startIndex"],[124,36,82,38],[124,39,82,41,"Math"],[124,43,82,45],[124,44,82,46,"min"],[124,47,82,49],[124,48,82,50,"end"],[124,51,82,53],[124,53,82,55],[124,57,82,59],[124,58,82,60,"length"],[124,64,82,66],[124,65,82,67],[124,68,82,70],[124,69,82,71],[125,8,83,8],[125,15,83,15],[125,19,83,19,"ConsecutiveNumbers"],[125,37,83,37],[125,38,83,38,"newStart"],[125,46,83,46],[125,48,83,48,"Math"],[125,52,83,52],[125,53,83,53,"max"],[125,56,83,56],[125,57,83,57,"newStart"],[125,65,83,65],[125,68,83,68],[125,69,83,69],[125,71,83,71,"newEnd"],[125,77,83,77],[125,78,83,78],[125,79,83,79],[126,6,84,4],[127,6,85,4],[128,0,86,0],[129,0,87,0],[130,4,85,4],[131,6,85,4,"key"],[131,9,85,4],[131,11,88,6,"Symbol"],[131,17,88,12],[131,18,88,13,"iterator"],[131,26,88,21],[132,6,88,21,"value"],[132,11,88,21],[132,13,88,4],[132,23,88,4,"value"],[132,24,88,4],[132,26,88,25],[133,8,89,8],[133,13,89,13],[133,17,89,17,"i"],[133,18,89,18],[133,21,89,21],[133,25,89,25],[133,26,89,26,"startIndex"],[133,36,89,36],[133,38,89,38,"i"],[133,39,89,39],[133,43,89,43],[133,47,89,47],[133,48,89,48,"endIndex"],[133,56,89,56],[133,58,89,58,"i"],[133,59,89,59],[133,61,89,61],[133,63,89,63],[134,10,90,12],[134,16,90,18,"i"],[134,17,90,19],[135,8,91,8],[136,6,92,4],[137,4,92,5],[138,2,92,5],[139,2,94,0,"ConsecutiveNumbers"],[139,20,94,18],[139,21,94,19,"EMPTY"],[139,26,94,24],[139,29,94,27],[139,33,94,31,"ConsecutiveNumbers"],[139,51,94,49],[139,52,94,50],[139,53,94,51],[139,54,94,52],[139,56,94,54],[139,57,94,55],[139,58,94,56],[139,59,94,57],[140,0,94,58],[140,3]],"functionMap":{"names":["<global>","ConsecutiveNumbers","constructor","get__length","at","equals","toArray","includes","indexOf","findValue","every","slice","@@iterator"],"mappings":"AAA;OCI;ICC;KDG;IEI;KFE;IGI;KHE;III;KJE;IKK;KLS;IMI;KNE;IOI;KPE;IQC;KRQ;ISM;KTQ;IUI;KVI;IWI;KXI;CDC"},"hasCjsExports":false},"type":"js/module"}]}