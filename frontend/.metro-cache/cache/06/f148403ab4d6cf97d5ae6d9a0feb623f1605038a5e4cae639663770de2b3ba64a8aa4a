{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getCameraDevice = getCameraDevice;\n  /**\n   * Get the best matching Camera device that best satisfies your requirements using a sorting filter, or `undefined` if {@linkcode devices} does not contain any devices.\n   * @param position The position of the Camera device relative to the phone.\n   * @param filter The filter you want to use. The Camera device that matches your filter the closest will be returned\n   * @returns The Camera device that matches your filter the closest, or `undefined` if no such Camera Device exists on the given {@linkcode position}.\n   * @example\n   * ```ts\n   * const devices = Camera.getAvailableCameraDevices()\n   * const device = getCameraDevice(devices, 'back', {\n   *    physicalDevices: ['wide-angle-camera']\n   * })\n   * ```\n   */\n  function getCameraDevice(devices, position, filter = {}) {\n    const filtered = devices.filter(d => d.position === position);\n    let bestDevice = filtered[0];\n    if (bestDevice == null) return undefined;\n\n    // Compare each device using a point scoring system\n    for (const device of filtered) {\n      let leftPoints = 0;\n      let rightPoints = 0;\n\n      // prefer higher hardware-level\n      if (bestDevice.hardwareLevel === 'full') leftPoints += 4;\n      if (device.hardwareLevel === 'full') rightPoints += 4;\n      if (filter.physicalDevices != null) {\n        // user did pass a physical device filter, two possible scenarios:\n        // 1. user wants all cameras ([ultra-wide, wide, tele]) to zoom. prefer those devices that have all 3 cameras.\n        // 2. user wants only one ([wide]) for faster performance. prefer those devices that only have one camera, if they have more, we rank them lower.\n        for (const d of bestDevice.physicalDevices) {\n          if (filter.physicalDevices.includes(d)) leftPoints += 1;else leftPoints -= 1;\n        }\n        for (const d of device.physicalDevices) {\n          if (filter.physicalDevices.includes(d)) rightPoints += 1;else rightPoints -= 1;\n        }\n      } else {\n        // user did not pass a physical device filter. prefer wide-angle-camera as a default\n        if (bestDevice.physicalDevices.includes('wide-angle-camera')) leftPoints += 2;\n        if (device.physicalDevices.includes('wide-angle-camera')) rightPoints += 2;\n        // if we have more than one device, we rank it lower. we only want a simple camera\n        if (bestDevice.physicalDevices.length > device.physicalDevices.length) leftPoints -= 1;\n        if (device.physicalDevices.length > bestDevice.physicalDevices.length) rightPoints -= 1;\n      }\n      if (rightPoints > leftPoints) bestDevice = device;\n    }\n    return bestDevice;\n  }\n});","lineCount":56,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"getCameraDevice"],[7,25,6,23],[7,28,6,26,"getCameraDevice"],[7,43,6,41],[8,2,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,2,20,0],[21,11,20,9,"getCameraDevice"],[21,26,20,24,"getCameraDevice"],[21,27,20,25,"devices"],[21,34,20,32],[21,36,20,34,"position"],[21,44,20,42],[21,46,20,44,"filter"],[21,52,20,50],[21,55,20,53],[21,56,20,54],[21,57,20,55],[21,59,20,57],[22,4,21,2],[22,10,21,8,"filtered"],[22,18,21,16],[22,21,21,19,"devices"],[22,28,21,26],[22,29,21,27,"filter"],[22,35,21,33],[22,36,21,34,"d"],[22,37,21,35],[22,41,21,39,"d"],[22,42,21,40],[22,43,21,41,"position"],[22,51,21,49],[22,56,21,54,"position"],[22,64,21,62],[22,65,21,63],[23,4,22,2],[23,8,22,6,"bestDevice"],[23,18,22,16],[23,21,22,19,"filtered"],[23,29,22,27],[23,30,22,28],[23,31,22,29],[23,32,22,30],[24,4,23,2],[24,8,23,6,"bestDevice"],[24,18,23,16],[24,22,23,20],[24,26,23,24],[24,28,23,26],[24,35,23,33,"undefined"],[24,44,23,42],[26,4,25,2],[27,4,26,2],[27,9,26,7],[27,15,26,13,"device"],[27,21,26,19],[27,25,26,23,"filtered"],[27,33,26,31],[27,35,26,33],[28,6,27,4],[28,10,27,8,"leftPoints"],[28,20,27,18],[28,23,27,21],[28,24,27,22],[29,6,28,4],[29,10,28,8,"rightPoints"],[29,21,28,19],[29,24,28,22],[29,25,28,23],[31,6,30,4],[32,6,31,4],[32,10,31,8,"bestDevice"],[32,20,31,18],[32,21,31,19,"hardwareLevel"],[32,34,31,32],[32,39,31,37],[32,45,31,43],[32,47,31,45,"leftPoints"],[32,57,31,55],[32,61,31,59],[32,62,31,60],[33,6,32,4],[33,10,32,8,"device"],[33,16,32,14],[33,17,32,15,"hardwareLevel"],[33,30,32,28],[33,35,32,33],[33,41,32,39],[33,43,32,41,"rightPoints"],[33,54,32,52],[33,58,32,56],[33,59,32,57],[34,6,33,4],[34,10,33,8,"filter"],[34,16,33,14],[34,17,33,15,"physicalDevices"],[34,32,33,30],[34,36,33,34],[34,40,33,38],[34,42,33,40],[35,8,34,6],[36,8,35,6],[37,8,36,6],[38,8,37,6],[38,13,37,11],[38,19,37,17,"d"],[38,20,37,18],[38,24,37,22,"bestDevice"],[38,34,37,32],[38,35,37,33,"physicalDevices"],[38,50,37,48],[38,52,37,50],[39,10,38,8],[39,14,38,12,"filter"],[39,20,38,18],[39,21,38,19,"physicalDevices"],[39,36,38,34],[39,37,38,35,"includes"],[39,45,38,43],[39,46,38,44,"d"],[39,47,38,45],[39,48,38,46],[39,50,38,48,"leftPoints"],[39,60,38,58],[39,64,38,62],[39,65,38,63],[39,66,38,64],[39,71,38,69,"leftPoints"],[39,81,38,79],[39,85,38,83],[39,86,38,84],[40,8,39,6],[41,8,40,6],[41,13,40,11],[41,19,40,17,"d"],[41,20,40,18],[41,24,40,22,"device"],[41,30,40,28],[41,31,40,29,"physicalDevices"],[41,46,40,44],[41,48,40,46],[42,10,41,8],[42,14,41,12,"filter"],[42,20,41,18],[42,21,41,19,"physicalDevices"],[42,36,41,34],[42,37,41,35,"includes"],[42,45,41,43],[42,46,41,44,"d"],[42,47,41,45],[42,48,41,46],[42,50,41,48,"rightPoints"],[42,61,41,59],[42,65,41,63],[42,66,41,64],[42,67,41,65],[42,72,41,70,"rightPoints"],[42,83,41,81],[42,87,41,85],[42,88,41,86],[43,8,42,6],[44,6,43,4],[44,7,43,5],[44,13,43,11],[45,8,44,6],[46,8,45,6],[46,12,45,10,"bestDevice"],[46,22,45,20],[46,23,45,21,"physicalDevices"],[46,38,45,36],[46,39,45,37,"includes"],[46,47,45,45],[46,48,45,46],[46,67,45,65],[46,68,45,66],[46,70,45,68,"leftPoints"],[46,80,45,78],[46,84,45,82],[46,85,45,83],[47,8,46,6],[47,12,46,10,"device"],[47,18,46,16],[47,19,46,17,"physicalDevices"],[47,34,46,32],[47,35,46,33,"includes"],[47,43,46,41],[47,44,46,42],[47,63,46,61],[47,64,46,62],[47,66,46,64,"rightPoints"],[47,77,46,75],[47,81,46,79],[47,82,46,80],[48,8,47,6],[49,8,48,6],[49,12,48,10,"bestDevice"],[49,22,48,20],[49,23,48,21,"physicalDevices"],[49,38,48,36],[49,39,48,37,"length"],[49,45,48,43],[49,48,48,46,"device"],[49,54,48,52],[49,55,48,53,"physicalDevices"],[49,70,48,68],[49,71,48,69,"length"],[49,77,48,75],[49,79,48,77,"leftPoints"],[49,89,48,87],[49,93,48,91],[49,94,48,92],[50,8,49,6],[50,12,49,10,"device"],[50,18,49,16],[50,19,49,17,"physicalDevices"],[50,34,49,32],[50,35,49,33,"length"],[50,41,49,39],[50,44,49,42,"bestDevice"],[50,54,49,52],[50,55,49,53,"physicalDevices"],[50,70,49,68],[50,71,49,69,"length"],[50,77,49,75],[50,79,49,77,"rightPoints"],[50,90,49,88],[50,94,49,92],[50,95,49,93],[51,6,50,4],[52,6,51,4],[52,10,51,8,"rightPoints"],[52,21,51,19],[52,24,51,22,"leftPoints"],[52,34,51,32],[52,36,51,34,"bestDevice"],[52,46,51,44],[52,49,51,47,"device"],[52,55,51,53],[53,4,52,2],[54,4,53,2],[54,11,53,9,"bestDevice"],[54,21,53,19],[55,2,54,0],[56,0,54,1],[56,3]],"functionMap":{"names":["<global>","getCameraDevice","devices.filter$argument_0"],"mappings":"AAA;ACmB;kCCC,4BD;CDiC"},"hasCjsExports":true},"type":"js/module"}]}